package jdk.internal.module;

import java.lang.module.ModuleDescriptor;
import java.lang.module.ModuleDescriptor.Exports;
import java.lang.module.ModuleDescriptor.Opens;
import java.lang.module.ModuleDescriptor.Provides;
import java.lang.module.ModuleDescriptor.Requires;
import java.lang.module.ModuleDescriptor.Requires.Modifier;
import java.util.List;
import java.util.Map;
import java.util.Set;

// 默认系统模块的静态信息
final class SystemModules$default implements SystemModules {
    
    public SystemModules$default() {
    }
    
    public boolean hasSplitPackages() {
        return false;
    }
    
    public boolean hasIncubatorModules() {
        return false;
    }
    
    public ModuleDescriptor[] moduleDescriptors() {
        ModuleDescriptor[] var1 = new ModuleDescriptor[61];
        Builder var35 = new Builder("java.base");
        var35.requires(new Requires[0]);
        Exports[] var10003 = new Exports[107];
        Set var4 = Set.of();
        Set var5 = Set.of("java.desktop");
        var10003[0] = Builder.newExports(var4, "sun.reflect.generics.reflectiveObjects", var5);
        var10003[1] = Builder.newExports(var4, "java.util");
        var10003[2] = Builder.newExports(var4, "java.lang.ref");
        Set var6 = Set.of("jdk.crypto.ec");
        var10003[3] = Builder.newExports(var4, "sun.security.util.math", var6);
        Set var7 = Set.of("jdk.jartool");
        var10003[4] = Builder.newExports(var4, "jdk.internal.util.jar", var7);
        var10003[5] = Builder.newExports(var4, "javax.net.ssl");
        var10003[6] = Builder.newExports(var4, "java.nio.channels");
        var10003[7] = Builder.newExports(var4, "java.util.concurrent");
        var10003[8] = Builder.newExports(var4, "javax.security.auth.spi");
        Set var2 = Set.of("java.rmi", "jdk.crypto.mscapi", "java.xml.crypto", "java.smartcardio", "java.security.jgss", "jdk.crypto.cryptoki", "java.desktop", "java.naming", "jdk.security.auth", "java.security.sasl", "jdk.jartool", "jdk.security.jgss", "jdk.crypto.ec");
        var10003[9] = Builder.newExports(var4, "sun.security.util", var2);
        var10003[10] = Builder.newExports(var4, "java.util.jar");
        var2 = Set.of("java.security.jgss", "jdk.naming.dns");
        var10003[11] = Builder.newExports(var4, "sun.net.dns", var2);
        var10003[12] = Builder.newExports(var4, "javax.crypto.spec");
        var10003[13] = Builder.newExports(var4, "javax.security.auth.callback");
        var10003[14] = Builder.newExports(var4, "java.util.concurrent.locks");
        var10003[15] = Builder.newExports(var4, "javax.security.cert");
        var10003[16] = Builder.newExports(var4, "javax.security.auth.login");
        var10003[17] = Builder.newExports(var4, "sun.security.tools", var7);
        var10003[18] = Builder.newExports(var4, "java.nio");
        var10003[19] = Builder.newExports(var4, "java.util.zip");
        var2 = Set.of("java.rmi", "java.security.jgss", "jdk.crypto.cryptoki", "jdk.security.auth");
        var10003[20] = Builder.newExports(var4, "sun.security.provider", var2);
        var10003[21] = Builder.newExports(var4, "java.lang.invoke");
        var10003[22] = Builder.newExports(var4, "java.net");
        Set var8 = Set.of("jdk.jlink");
        var10003[23] = Builder.newExports(var4, "jdk.internal.jimage", var8);
        var10003[24] = Builder.newExports(var4, "java.util.regex");
        var10003[25] = Builder.newExports(var4, "sun.security.timestamp", var7);
        var2 = Set.of("jdk.charsets");
        var10003[26] = Builder.newExports(var4, "sun.nio.cs", var2);
        var10003[27] = Builder.newExports(var4, "javax.net");
        var2 = Set.of("java.desktop", "java.security.jgss");
        var10003[28] = Builder.newExports(var4, "sun.security.action", var2);
        var2 = Set.of("java.management", "jdk.internal.jvmstat", "jdk.management.agent");
        var10003[29] = Builder.newExports(var4, "jdk.internal.perf", var2);
        var2 = Set.of("java.desktop", "jdk.jlink", "jdk.localedata");
        var10003[30] = Builder.newExports(var4, "sun.util.locale.provider", var2);
        var2 = Set.of("java.rmi", "java.management", "java.sql.rowset", "java.desktop", "java.datatransfer", "java.management.rmi");
        var10003[31] = Builder.newExports(var4, "sun.reflect.misc", var2);
        var10003[32] = Builder.newExports(var4, "java.nio.file");
        var2 = Set.of("java.logging", "java.sql", "java.sql.rowset", "jdk.unsupported", "jdk.scripting.nashorn", "jdk.dynalink");
        var10003[33] = Builder.newExports(var4, "jdk.internal.reflect", var2);
        var2 = Set.of("java.security.sasl");
        var10003[34] = Builder.newExports(var4, "com.sun.security.ntlm", var2);
        Set var9 = Set.of("jdk.jfr");
        var10003[35] = Builder.newExports(var4, "jdk.internal.org.xml.sax.helpers", var9);
        var10003[36] = Builder.newExports(var4, "java.net.spi");
        var10003[37] = Builder.newExports(var4, "java.util.stream");
        var2 = Set.of("java.management", "jdk.sctp", "jdk.crypto.cryptoki", "jdk.unsupported", "jdk.net");
        var10003[38] = Builder.newExports(var4, "sun.nio.ch", var2);
        Set var10 = Set.of("jdk.crypto.mscapi", "jdk.crypto.cryptoki");
        var10003[39] = Builder.newExports(var4, "sun.security.rsa", var10);
        var10003[40] = Builder.newExports(var4, "java.time.temporal");
        var2 = Set.of("jdk.localedata");
        var10003[41] = Builder.newExports(var4, "sun.util.resources", var2);
        var10003[42] = Builder.newExports(var4, "jdk.internal", var9);
        var2 = Set.of("java.net.http", "jdk.naming.dns");
        var10003[43] = Builder.newExports(var4, "sun.net", var2);
        var10003[44] = Builder.newExports(var4, "java.security.cert");
        var2 = Set.of("java.logging", "java.instrument");
        var10003[45] = Builder.newExports(var4, "jdk.internal.loader", var2);
        var2 = Set.of("jdk.jfr", "jdk.jlink", "jdk.jartool", "java.management.rmi", "java.instrument");
        var10003[46] = Builder.newExports(var4, "jdk.internal.module", var2);
        var10003[47] = Builder.newExports(var4, "java.lang.reflect");
        var2 = Set.of("jdk.compiler", "jdk.jlink");
        var10003[48] = Builder.newExports(var4, "jdk.internal.jmod", var2);
        var10003[49] = Builder.newExports(var4, "java.math");
        var2 = Set.of("jdk.jfr", "jdk.jlink", "jdk.scripting.nashorn", "jdk.jartool");
        var10003[50] = Builder.newExports(var4, "jdk.internal.org.objectweb.asm", var2);
        var10003[51] = Builder.newExports(var4, "java.nio.channels.spi");
        Set var11 = Set.of("java.security.jgss");
        var10003[52] = Builder.newExports(var4, "sun.security.ssl", var11);
        var2 = Set.of("java.desktop", "jdk.jartool", "java.net.http");
        var10003[53] = Builder.newExports(var4, "sun.net.www", var2);
        Set var12 = Set.of("jdk.jfr", "jdk.scripting.nashorn");
        var10003[54] = Builder.newExports(var4, "jdk.internal.org.objectweb.asm.util", var12);
        var10003[55] = Builder.newExports(var4, "jdk.internal.org.objectweb.asm.commons", var12);
        var10003[56] = Builder.newExports(var4, "javax.security.auth");
        var2 = Set.of("jdk.unsupported");
        var10003[57] = Builder.newExports(var4, "sun.nio.fs", var2);
        var10003[58] = Builder.newExports(var4, "java.time.format");
        var2 = Set.of("java.desktop", "jdk.unsupported");
        var10003[59] = Builder.newExports(var4, "jdk.internal.ref", var2);
        var10003[60] = Builder.newExports(var4, "java.security");
        var10003[61] = Builder.newExports(var4, "sun.util.cldr", var8);
        var10003[62] = Builder.newExports(var4, "sun.security.validator", var7);
        var2 = Set.of("jdk.jartool", "jdk.crypto.ec");
        var10003[63] = Builder.newExports(var4, "sun.security.pkcs", var2);
        var2 = Set.of("jdk.jfr", "jdk.jlink");
        var10003[64] = Builder.newExports(var4, "jdk.internal.org.objectweb.asm.tree", var2);
        var2 = Set.of("jdk.internal.jvmstat", "jdk.management.agent");
        var10003[65] = Builder.newExports(var4, "jdk.internal.vm", var2);
        Set var13 = Set.of("java.naming");
        var10003[66] = Builder.newExports(var4, "sun.security.provider.certpath", var13);
        var10003[67] = Builder.newExports(var4, "java.util.spi");
        var10003[68] = Builder.newExports(var4, "jdk.internal.util.xml.impl", var9);
        var10003[69] = Builder.newExports(var4, "java.util.concurrent.atomic");
        var10003[70] = Builder.newExports(var4, "jdk.internal.jimage.decompressor", var8);
        var2 = Set.of("jdk.compiler");
        var10003[71] = Builder.newExports(var4, "sun.reflect.annotation", var2);
        var10003[72] = Builder.newExports(var4, "jdk.internal.org.xml.sax", var9);
        var2 = Set.of("java.smartcardio", "jdk.crypto.cryptoki", "jdk.naming.dns", "jdk.crypto.ec");
        var10003[73] = Builder.newExports(var4, "sun.security.jca", var2);
        var10003[74] = Builder.newExports(var4, "java.io");
        var10003[75] = Builder.newExports(var4, "java.text");
        var2 = Set.of("java.desktop", "java.logging", "java.prefs");
        var10003[76] = Builder.newExports(var4, "sun.util.logging", var2);
        var10003[77] = Builder.newExports(var4, "java.security.interfaces");
        var10003[78] = Builder.newExports(var4, "sun.security.internal.spec", var10);
        var2 = Set.of("jdk.net");
        var10003[79] = Builder.newExports(var4, "sun.net.ext", var2);
        var2 = Set.of("java.rmi", "java.sql", "jdk.jshell", "jdk.charsets", "java.logging", "java.management", "java.xml", "jdk.jfr", "jdk.jlink", "jdk.unsupported", "jdk.scripting.nashorn", "jdk.scripting.nashorn.shell", "jdk.internal.vm.ci", "java.security.jgss", "jdk.net", "java.desktop", "java.naming", "java.net.http", "jdk.compiler", "jdk.attach");
        var10003[80] = Builder.newExports(var4, "jdk.internal.misc", var2);
        var2 = Set.of("jdk.jartool", "jdk.crypto.cryptoki", "jdk.crypto.ec");
        var10003[81] = Builder.newExports(var4, "sun.security.x509", var2);
        var10003[82] = Builder.newExports(var4, "java.lang.module");
        var10003[83] = Builder.newExports(var4, "java.nio.file.spi");
        var10003[84] = Builder.newExports(var4, "java.nio.charset");
        var10003[85] = Builder.newExports(var4, "javax.crypto");
        var10003[86] = Builder.newExports(var4, "java.time");
        var10003[87] = Builder.newExports(var4, "java.util.function");
        var2 = Set.of("java.logging");
        var10003[88] = Builder.newExports(var4, "jdk.internal.logger", var2);
        var10003[89] = Builder.newExports(var4, "sun.net.www.protocol.http", var11);
        var10003[90] = Builder.newExports(var4, "javax.crypto.interfaces");
        var10003[91] = Builder.newExports(var4, "sun.security.util.math.intpoly", var6);
        var2 = Set.of("java.desktop", "jdk.jconsole", "java.net.http");
        var10003[92] = Builder.newExports(var4, "sun.net.util", var2);
        var10003[93] = Builder.newExports(var4, "java.nio.charset.spi");
        var10003[94] = Builder.newExports(var4, "java.security.acl");
        var2 = Set.of("jdk.internal.vm.ci", "jdk.unsupported");
        var10003[95] = Builder.newExports(var4, "jdk.internal.vm.annotation", var2);
        var10003[96] = Builder.newExports(var4, "java.lang");
        var10003[97] = Builder.newExports(var4, "jdk.internal.util.xml", var9);
        var2 = Set.of("jdk.crypto.cryptoki");
        var10003[98] = Builder.newExports(var4, "sun.security.internal.interfaces", var2);
        var10003[99] = Builder.newExports(var4, "java.lang.annotation");
        var10003[100] = Builder.newExports(var4, "javax.security.auth.x500");
        var2 = Set.of("jdk.scripting.nashorn");
        var10003[101] = Builder.newExports(var4, "jdk.internal.org.objectweb.asm.signature", var2);
        var10003[102] = Builder.newExports(var4, "java.time.zone");
        var10003[103] = Builder.newExports(var4, "java.security.spec");
        var10003[104] = Builder.newExports(var4, "java.time.chrono");
        var10003[105] = Builder.newExports(var4, "java.text.spi");
        var10003[106] = Builder.newExports(var4, "java.nio.file.attribute");
        var35.exports(var10003);
        var35.opens(new Opens[0]);
        var2 = Set.of("sun.text.spi.JavaTimeDateTimePatternProvider", "sun.util.spi.CalendarProvider", "java.text.spi.DecimalFormatSymbolsProvider", "java.net.ContentHandlerFactory", "java.nio.charset.spi.CharsetProvider", "java.util.spi.ResourceBundleControlProvider", "java.util.spi.CalendarNameProvider", "sun.util.resources.LocaleData$CommonResourceBundleProvider", "java.nio.file.spi.FileSystemProvider", "java.util.spi.ResourceBundleProvider", "java.nio.channels.spi.SelectorProvider", "java.text.spi.DateFormatProvider", "java.util.spi.TimeZoneNameProvider", "java.util.spi.CurrencyNameProvider", "java.util.spi.LocaleNameProvider", "jdk.internal.logger.DefaultLoggerFinder", "java.nio.channels.spi.AsynchronousChannelProvider", "java.util.spi.ToolProvider", "java.util.spi.CalendarDataProvider", "javax.security.auth.spi.LoginModule", "java.net.spi.URLStreamHandlerProvider", "java.text.spi.DateFormatSymbolsProvider", "java.text.spi.NumberFormatProvider", "java.nio.file.spi" +
        ".FileTypeDetector", "java.security.Provider", "sun.util.locale.provider.LocaleDataMetaInfo", "java.time.chrono.Chronology", "java.text.spi.CollatorProvider", "java.lang.System$LoggerFinder", "java.time.chrono.AbstractChronology", "java.text.spi.BreakIteratorProvider", "sun.util.resources.LocaleData$SupplementaryResourceBundleProvider", "java.time.zone.ZoneRulesProvider");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("java.nio.file.spi.FileSystemProvider", List.of("jdk.internal.jrtfs.JrtFileSystemProvider"))});
        var2 = Set.of("sun.security.ssl", "sun.reflect.annotation", "sun.net.ftp", "sun.net.www.protocol.http", "com.sun.net.ssl", "jdk.internal.jimage", "sun.security.tools", "java.nio", "sun.net.www.content.text", "java.security.cert", "java.util.zip", "java.nio.file", "java.lang.ref", "java.time", "sun.reflect.generics.reflectiveObjects", "com.sun.security.cert.internal.x509", "java.util.regex", "sun.net.ftp.impl", "sun.invoke.util", "javax.security.auth.callback", "jdk.internal.org.xml.sax.helpers", "com.sun.crypto.provider", "com.sun.net.ssl.internal.ssl", "sun.net.www.protocol.file", "sun.security.pkcs", "sun.net.smtp", "java.lang.reflect", "java.security", "sun.net.www.protocol.mailto", "jdk.internal.loader", "sun.security.x509", "com.sun.net.ssl.internal.www.protocol.https", "jdk.internal.jmod", "sun.net.sdp", "sun.reflect.generics.factory", "jdk.internal.org.objectweb.asm.signature", "java.lang", "sun.security.rsa", "java.net.spi", "sun.invoke.empty", "jdk.internal.module",
         "sun.net.www.protocol.ftp", "sun.security.jca", "sun.security.timestamp", "jdk.internal.org.objectweb.asm.tree.analysis", "javax.crypto", "java.util", "sun.util.cldr", "javax.security.auth.x500", "sun.util.resources", "sun.net.ext", "java.security.acl", "java.util.stream", "sun.security.util.math", "java.lang.annotation", "sun.nio", "java.nio.channels", "java.time.temporal", "jdk.internal.util.jar", "sun.text.normalizer", "sun.launcher", "sun.security.action", "java.nio.charset", "jdk.internal.org.xml.sax", "jdk.internal.org.objectweb.asm.util", "java.time.chrono", "sun.net.www.http", "javax.security.auth", "sun.security.util.math.intpoly", "java.math", "sun.net.dns", "sun.text", "sun.reflect.generics.repository", "sun.net.util", "sun.reflect.generics.visitor", "sun.util.calendar", "sun.text.resources.cldr", "sun.net.www.protocol.jmod", "java.text", "sun.reflect.misc", "sun.nio.ch", "jdk.internal", "sun.nio.cs", "java.nio.charset.spi", "javax.security.auth.login",
          "com.sun" + ".java.util.jar.pack", "java.text.spi", "java.util.spi", "sun.reflect.generics.tree", "sun.reflect.generics.scope", "sun.security.validator", "sun.text.spi", "sun.util.logging", "sun.security.provider.certpath", "sun.net.www.protocol.https", "sun.security.provider.certpath.ssl", "sun.invoke", "sun.reflect.generics.parser", "sun.util.resources.cldr", "java.security.spec", "java.nio.file.spi", "jdk.internal.util.xml.impl", "java.net", "sun.security.provider", "sun.security.pkcs12", "java.security.interfaces", "sun.security.pkcs10", "jdk.internal.jrtfs", "jdk.internal.org.objectweb.asm.commons", "sun.security.internal.spec", "java.time.format", "java.util.concurrent", "javax.security.auth.spi", "sun.net.idn", "jdk.internal.logger", "jdk.internal.vm", "java.util.concurrent.locks", "jdk.internal.util.xml", "sun.util", "jdk.internal.perf", "sun.util.locale.provider", "java.util.function", "javax.net", "jdk.internal.ref", "sun.util.spi", "sun.security.tools.keytool",
          "sun" + ".security.util", "sun.security.internal.interfaces", "sun.net", "jdk.internal.misc", "sun.net.www.protocol.jrt", "sun.net.www", "sun.launcher.resources", "jdk.internal.vm.annotation", "sun.net.spi", "java.time.zone", "jdk.internal.math", "jdk.internal.util", "java.lang.invoke", "jdk.internal.platform", "sun.util.locale", "sun.nio.fs", "sun.text.resources", "javax.security.cert", "com.sun.security.ntlm", "sun.net.www.protocol.jar", "java.util.concurrent.atomic", "sun.io", "javax.crypto.spec", "java.lang.module", "sun.net.www.protocol.http.ntlm", "java.io", "jdk.internal.org.objectweb.asm.tree", "jdk.internal.jimage.decompressor", "jdk.internal.org.objectweb.asm", "java.nio.channels.spi", "java.util.jar", "javax.crypto.interfaces", "javax.net.ssl", "sun.text.bidi", "jdk.internal.reflect", "java.nio.file.attribute", "sun.usagetracker");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[0] = var35.build(1156158450);
        var35 = new Builder("java.compiler");
        Requires[] var10007 = new Requires[1];
        Set var14 = Set.of(Modifier.MANDATED);
        var10007[0] = Builder.newRequires(var14, "java.base");
        var35.requires(var10007);
        var35.exports(new Exports[]{Builder.newExports(var4, "javax.lang.model"), Builder.newExports(var4, "javax.lang.model.type"), Builder.newExports(var4, "javax.lang.model.element"), Builder.newExports(var4, "javax.tools"), Builder.newExports(var4, "javax.annotation.processing"), Builder.newExports(var4, "javax.lang.model.util")});
        var35.opens(new Opens[0]);
        var2 = Set.of("javax.tools.JavaCompiler", "javax.tools.DocumentationTool");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("javax.annotation.processing", "javax.lang.model.util", "javax.lang.model", "javax.tools", "javax.lang.model.type", "javax.lang.model.element");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[1] = var35.build(-2134188500);
        var35 = new Builder("java.datatransfer");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "java.awt.datatransfer"), Builder.newExports(var4, "sun.datatransfer", var5)});
        var35.opens(new Opens[0]);
        var2 = Set.of("sun.datatransfer.DesktopDatatransferService");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("sun.datatransfer.resources", "java.awt.datatransfer", "sun.datatransfer");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[2] = var35.build(-2145393326);
        var35 = new Builder("java.xml");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        Exports[] var10018 = new Exports[]{Builder.newExports(var4, "javax.xml.datatype"), Builder.newExports(var4, "javax.xml.transform.dom"), Builder.newExports(var4, "org.w3c.dom.ranges"), Builder.newExports(var4, "javax.xml.transform"), Builder.newExports(var4, "org.xml.sax.ext"), Builder.newExports(var4, "javax.xml.namespace"), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null};
        Set var15 = Set.of("java.xml.crypto");
        var10018[6] = Builder.newExports(var4, "com.sun.org.apache.xml.internal.utils", var15);
        var10018[7] = Builder.newExports(var4, "javax.xml");
        var10018[8] = Builder.newExports(var4, "org.w3c.dom.ls");
        var10018[9] = Builder.newExports(var4, "org.xml.sax.helpers");
        var10018[10] = Builder.newExports(var4, "javax.xml.validation");
        var10018[11] = Builder.newExports(var4, "com.sun.org.apache.xpath.internal.compiler", var15);
        var10018[12] = Builder.newExports(var4, "com.sun.org.apache.xpath.internal.objects", var15);
        var10018[13] = Builder.newExports(var4, "org.w3c.dom");
        var10018[14] = Builder.newExports(var4, "javax.xml.transform.stax");
        var10018[15] = Builder.newExports(var4, "org.w3c.dom.bootstrap");
        var10018[16] = Builder.newExports(var4, "com.sun.org.apache.xml.internal.dtm", var15);
        var10018[17] = Builder.newExports(var4, "javax.xml.parsers");
        var10018[18] = Builder.newExports(var4, "javax.xml.stream.events");
        var10018[19] = Builder.newExports(var4, "org.w3c.dom.views");
        var10018[20] = Builder.newExports(var4, "javax.xml.xpath");
        var10018[21] = Builder.newExports(var4, "org.xml.sax");
        var10018[22] = Builder.newExports(var4, "javax.xml.catalog");
        var10018[23] = Builder.newExports(var4, "com.sun.org.apache.xpath.internal.functions", var15);
        var10018[24] = Builder.newExports(var4, "org.w3c.dom.events");
        var10018[25] = Builder.newExports(var4, "javax.xml.transform.sax");
        var10018[26] = Builder.newExports(var4, "com.sun.org.apache.xpath.internal", var15);
        var10018[27] = Builder.newExports(var4, "javax.xml.stream");
        var10018[28] = Builder.newExports(var4, "javax.xml.stream.util");
        var10018[29] = Builder.newExports(var4, "com.sun.org.apache.xpath.internal.res", var15);
        var10018[30] = Builder.newExports(var4, "org.w3c.dom.traversal");
        var10018[31] = Builder.newExports(var4, "javax.xml.transform.stream");
        var35.exports(var10018);
        var35.opens(new Opens[0]);
        var2 = Set.of("javax.xml.stream.XMLOutputFactory", "javax.xml.xpath.XPathFactory", "org.xml.sax.XMLReader", "javax.xml.validation.SchemaFactory", "javax.xml.stream.XMLInputFactory", "javax.xml.parsers.SAXParserFactory", "javax.xml.datatype.DatatypeFactory", "javax.xml.parsers.DocumentBuilderFactory", "javax.xml.transform.TransformerFactory", "javax.xml.stream.XMLEventFactory");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("com.sun.org.apache.bcel.internal.generic", "com.sun.org.apache.xalan.internal.xsltc.trax", "javax.xml.stream", "com.sun.org.apache.xerces.internal.xs.datatypes", "com.sun.org.apache.xerces.internal.impl.validation", "com.sun.org.apache.xerces.internal.jaxp.validation", "com.sun.org.apache.xpath.internal.functions", "javax.xml.transform.dom", "com.sun.org.apache.xml.internal.dtm.ref.dom2dtm", "com.sun.org.apache.xalan.internal", "com.sun.org.apache.xerces.internal.xni.grammars", "org.w3c.dom.views", "com.sun.org.apache.xerces.internal.impl.io", "com.sun.org.apache.xerces.internal.impl.xpath.regex", "com.sun.org.apache.xerces.internal.impl.xpath", "javax.xml.stream.util", "com.sun.org.apache.xalan.internal.xsltc", "com.sun.org.apache.xerces.internal.impl.xs.identity", "org.w3c.dom.bootstrap", "com.sun.org.apache.xalan.internal.xsltc.runtime.output", "com.sun.org.apache.xml.internal.serializer.dom3", "com.sun.org.apache.xpath.internal.objects", "com.sun.org" +
        ".apache.xalan.internal.xsltc.dom", "org.xml.sax.helpers", "javax.xml.validation", "com.sun.org.apache.xml.internal.utils.res", "com.sun.xml.internal.stream", "com.sun.org.apache.xerces.internal.utils", "org.w3c.dom.events", "com.sun.org.apache.xerces.internal.impl.dv.xs", "com.sun.org.apache.xerces.internal.impl.xs", "javax.xml", "com.sun.java_cup.internal.runtime", "com.sun.org.apache.xpath.internal.operations", "com.sun.org.apache.xpath.internal", "com.sun.org.apache.xpath.internal.axes", "jdk.xml.internal", "org.xml.sax", "com.sun.org.apache.xerces.internal.impl.dv.util", "com.sun.org.apache.xerces.internal.impl.dtd.models", "org.w3c.dom", "com.sun.org.apache.xerces.internal.jaxp", "com.sun.org.apache.xpath.internal.res", "com.sun.org.apache.xerces.internal.impl.xs.opti", "com.sun.org.apache.xerces.internal.jaxp.datatype", "com.sun.org.apache.xerces.internal.xinclude", "com.sun.org.apache.xalan.internal.xsltc.compiler", "javax.xml.transform.stax", "javax.xml.transform",
        "org.w3c.dom.traversal", "com.sun.org.apache.xerces.internal.dom.events", "com.sun.org.apache.xml.internal.serializer.utils", "com.sun.org.apache.xml.internal.dtm", "com.sun.org.apache.xalan.internal.xsltc.compiler.util", "javax.xml.transform.stream", "javax.xml.datatype", "com.sun.org.apache.bcel.internal", "com.sun.org.apache.xerces.internal.impl.dtd", "com.sun.org.apache.xml.internal.dtm.ref.sax2dtm", "com.sun.org.apache.xalan.internal.lib", "com.sun.org.apache.xerces.internal.impl.dv", "com.sun.xml.internal.stream.writers", "com.sun.org.apache.xerces.internal.impl.xs.util", "com.sun.org.apache.xpath.internal.compiler", "com.sun.org.apache.xml.internal.utils", "javax.xml.namespace", "com.sun.org.apache.xerces.internal.impl", "com.sun.org.apache.xalan.internal.templates", "com.sun.xml.internal.stream.util", "com.sun.org.apache.xerces.internal.parsers", "com.sun.org.apache.xerces.internal.xpointer", "com.sun.org.apache.bcel.internal.classfile", "com.sun.org.apache.xml" +
        ".internal.serializer", "javax.xml.transform.sax", "com.sun.org.apache.xerces.internal.impl.dv.dtd", "com.sun.org.apache.xerces.internal.impl.msg", "com.sun.xml.internal.stream.events", "javax.xml.parsers", "com.sun.org.apache.xml.internal.res", "com.sun.org.apache.xerces.internal.xni", "org.xml.sax.ext", "org.w3c.dom.ls", "com.sun.org.apache.xalan.internal.extensions", "com.sun.org.apache.xpath.internal.patterns", "com.sun.xml.internal.stream.dtd.nonvalidating", "com.sun.org.apache.xerces.internal.dom", "javax.xml.xpath", "com.sun.org.apache.xalan.internal.xsltc.runtime", "com.sun.org.apache.xerces.internal.xni.parser", "com.sun.org.apache.xerces.internal.impl.xs.traversers", "com.sun.org.apache.xalan.internal.xsltc.util", "com.sun.org.apache.xml.internal.serialize", "com.sun.xml.internal.stream.dtd", "com.sun.org.apache.xalan.internal.utils", "javax.xml.catalog", "com.sun.org.apache.xml.internal.dtm.ref", "com.sun.org.apache.xpath.internal.jaxp", "com.sun.org.apache" +
        ".xalan.internal.res", "com.sun.org.apache.bcel.internal.util", "com.sun.org.apache.xerces.internal.impl.xs.models", "com.sun.org.apache.xerces.internal.xs", "javax.xml.stream.events", "org.w3c.dom.ranges", "com.sun.org.apache.xerces.internal.util");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[3] = var35.build(2043669910);
        var35 = new Builder("java.prefs");
        Requires[] var10022 = new Requires[2];
        Set var16 = Set.of();
        var10022[0] = Builder.newRequires(var16, "java.xml");
        var10022[1] = Builder.newRequires(var14, "java.base");
        var35.requires(var10022);
        var35.exports(new Exports[]{Builder.newExports(var4, "java.util.prefs")});
        var35.opens(new Opens[0]);
        var2 = Set.of("java.util.prefs.PreferencesFactory");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("java.util.prefs");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[4] = var35.build(1930098033);
        var35 = new Builder("java.desktop");
        Requires[] var10027 = new Requires[]{Builder.newRequires(var16, "java.prefs"), null, null, null};
        Set var17 = Set.of(Modifier.TRANSITIVE);
        var10027[1] = Builder.newRequires(var17, "java.xml");
        var10027[2] = Builder.newRequires(var14, "java.base");
        var10027[3] = Builder.newRequires(var17, "java.datatransfer");
        var35.requires(var10027);
        Exports[] var10028 = new Exports[]{Builder.newExports(var4, "javax.swing.plaf.multi"), Builder.newExports(var4, "javax.imageio.plugins.tiff"), Builder.newExports(var4, "javax.accessibility"), Builder.newExports(var4, "javax.swing.filechooser"), Builder.newExports(var4, "javax.swing.text.rtf"), Builder.newExports(var4, "java.awt.print"), Builder.newExports(var4, "javax.imageio"), Builder.newExports(var4, "javax.swing.plaf"), Builder.newExports(var4, "java.awt.dnd"), Builder.newExports(var4, "javax.sound.midi"), Builder.newExports(var4, "java.awt.font"), Builder.newExports(var4, "java.awt.im"), Builder.newExports(var4, "javax.print.attribute"), Builder.newExports(var4, "java.applet"), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null};
        Set var18 = Set.of("jdk.unsupported.desktop");
        var10028[14] = Builder.newExports(var4, "java.awt.dnd.peer", var18);
        var10028[15] = Builder.newExports(var4, "javax.print.attribute.standard");
        var2 = Set.of("jdk.unsupported.desktop", "jdk.accessibility");
        var10028[16] = Builder.newExports(var4, "sun.awt", var2);
        var10028[17] = Builder.newExports(var4, "javax.swing.tree");
        var10028[18] = Builder.newExports(var4, "java.awt.im.spi");
        var10028[19] = Builder.newExports(var4, "java.awt.desktop");
        var10028[20] = Builder.newExports(var4, "javax.swing.event");
        var10028[21] = Builder.newExports(var4, "javax.imageio.metadata");
        var10028[22] = Builder.newExports(var4, "java.beans.beancontext");
        var10028[23] = Builder.newExports(var4, "javax.swing.text.html");
        var10028[24] = Builder.newExports(var4, "javax.sound.sampled");
        var10028[25] = Builder.newExports(var4, "javax.imageio.stream");
        var10028[26] = Builder.newExports(var4, "javax.imageio.spi");
        var10028[27] = Builder.newExports(var4, "javax.swing.table");
        var10028[28] = Builder.newExports(var4, "java.awt.image");
        var10028[29] = Builder.newExports(var4, "javax.swing.plaf.nimbus");
        var10028[30] = Builder.newExports(var4, "javax.swing.plaf.basic");
        var10028[31] = Builder.newExports(var4, "javax.print.event");
        var10028[32] = Builder.newExports(var4, "javax.swing.colorchooser");
        var10028[33] = Builder.newExports(var4, "javax.sound.midi.spi");
        var10028[34] = Builder.newExports(var4, "javax.swing.text");
        var10028[35] = Builder.newExports(var4, "java.awt.image.renderable");
        var10028[36] = Builder.newExports(var4, "javax.swing.plaf.metal");
        var10028[37] = Builder.newExports(var4, "sun.swing", var18);
        var10028[38] = Builder.newExports(var4, "javax.print");
        var10028[39] = Builder.newExports(var4, "sun.awt.dnd", var18);
        var10028[40] = Builder.newExports(var4, "javax.swing.text.html.parser");
        var10028[41] = Builder.newExports(var4, "javax.imageio.plugins.bmp");
        var10028[42] = Builder.newExports(var4, "java.awt.geom");
        var10028[43] = Builder.newExports(var4, "javax.imageio.plugins.jpeg");
        var10028[44] = Builder.newExports(var4, "java.beans");
        var10028[45] = Builder.newExports(var4, "javax.swing.border");
        var10028[46] = Builder.newExports(var4, "javax.swing.undo");
        var10028[47] = Builder.newExports(var4, "java.awt.event");
        var10028[48] = Builder.newExports(var4, "javax.imageio.event");
        var10028[49] = Builder.newExports(var4, "java.awt");
        var10028[50] = Builder.newExports(var4, "javax.swing.plaf.synth");
        var10028[51] = Builder.newExports(var4, "javax.sound.sampled.spi");
        var10028[52] = Builder.newExports(var4, "java.awt.color");
        var10028[53] = Builder.newExports(var4, "javax.swing");
        var35.exports(var10028);
        Opens[] var10029 = new Opens[2];
        Set var19 = Set.of();
        Set var20 = Set.of("jdk.jconsole");
        var10029[0] = Builder.newOpens(var19, "com.sun.java.swing.plaf.windows", var20);
        var10029[1] = Builder.newOpens(var19, "javax.swing.plaf.basic", var20);
        var35.opens(var10029);
        var2 = Set.of("javax.print.StreamPrintServiceFactory", "javax.imageio.spi.ImageReaderSpi", "javax.sound.midi.spi.MidiFileReader", "javax.sound.midi.spi.MidiDeviceProvider", "java.awt.im.spi.InputMethodDescriptor", "javax.sound.sampled.spi.AudioFileWriter", "javax.imageio.spi.ImageInputStreamSpi", "javax.imageio.spi.ImageOutputStreamSpi", "javax.sound.sampled.spi.MixerProvider", "javax.sound.midi.spi.SoundbankReader", "javax.sound.midi.spi.MidiFileWriter", "javax.accessibility.AccessibilityProvider", "javax.imageio.spi.ImageWriterSpi", "javax.print.PrintServiceLookup", "javax.sound.sampled.spi.AudioFileReader", "javax.sound.sampled.spi.FormatConversionProvider", "sun.swing.InteropProvider", "javax.imageio.spi.ImageTranscoderSpi");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("javax.sound.sampled.spi.AudioFileReader", List.of("com.sun.media.sound.AiffFileReader", "com.sun.media.sound.AuFileReader", "com.sun.media.sound.SoftMidiAudioFileReader", "com.sun.media.sound.WaveFileReader", "com.sun.media.sound.WaveFloatFileReader", "com.sun.media.sound.WaveExtensibleFileReader")), Builder.newProvides("javax.sound.sampled.spi.MixerProvider", List.of("com.sun.media.sound.DirectAudioDeviceProvider", "com.sun.media.sound.PortMixerProvider")), Builder.newProvides("javax.sound.midi.spi.MidiDeviceProvider", List.of("com.sun.media.sound.MidiInDeviceProvider", "com.sun.media.sound.MidiOutDeviceProvider", "com.sun.media.sound.RealTimeSequencerProvider", "com.sun.media.sound.SoftProvider")), Builder.newProvides("java.net.ContentHandlerFactory", List.of("sun.awt.www.content.MultimediaContentHandlers")), Builder.newProvides("sun.datatransfer.DesktopDatatransferService", List.of("sun.awt.datatransfer" +
        ".DesktopDatatransferServiceImpl")), Builder.newProvides("javax.sound.midi.spi.MidiFileReader", List.of("com.sun.media.sound.StandardMidiFileReader")), Builder.newProvides("javax.print.StreamPrintServiceFactory", List.of("sun.print.PSStreamPrinterFactory")), Builder.newProvides("javax.sound.sampled.spi.FormatConversionProvider", List.of("com.sun.media.sound.AlawCodec", "com.sun.media.sound.AudioFloatFormatConverter", "com.sun.media.sound.PCMtoPCMCodec", "com.sun.media.sound.UlawCodec")), Builder.newProvides("javax.sound.midi.spi.MidiFileWriter", List.of("com.sun.media.sound.StandardMidiFileWriter")), Builder.newProvides("javax.print.PrintServiceLookup", List.of("sun.print.PrintServiceLookupProvider")), Builder.newProvides("javax.sound.sampled.spi.AudioFileWriter", List.of("com.sun.media.sound.AiffFileWriter", "com.sun.media.sound.AuFileWriter", "com.sun.media.sound.WaveFileWriter", "com.sun.media.sound.WaveFloatFileWriter")), Builder.newProvides("javax.sound.midi.spi" +
        ".SoundbankReader", List.of("com.sun.media.sound.AudioFileSoundbankReader", "com.sun.media.sound.DLSSoundbankReader", "com.sun.media.sound.JARSoundbankReader", "com.sun.media.sound.SF2SoundbankReader"))});
        var2 = Set.of("java.applet", "com.sun.beans.decoder", "java.awt.image", "javax.swing.plaf.metal.icons.ocean", "javax.swing.table", "java.awt.desktop", "javax.imageio.plugins.jpeg", "com.sun.java.swing.plaf.windows.resources", "com.sun.imageio.plugins.bmp", "sun.awt.resources.cursors", "com.sun.java.swing.plaf.windows", "javax.sound.midi.spi", "javax.swing.filechooser", "com.sun.beans.introspect", "sun.java2d", "com.sun.beans.finder", "javax.print.attribute.standard", "javax.imageio", "sun.awt.windows", "javax.swing.text", "javax.swing.plaf", "javax.swing.text.html", "javax.swing.plaf.metal", "java.awt.dnd.peer", "sun.awt.event", "sun.swing.plaf.windows", "javax.swing.plaf.metal.sounds", "javax.swing.colorchooser", "javax.swing.plaf.metal.icons", "sun.java2d.marlin", "sun.java2d.pipe", "sun.java2d.pipe.hw", "sun.awt.datatransfer", "javax.imageio.spi", "com.sun.java.swing.plaf.motif.resources", "javax.sound.midi", "javax.swing.beaninfo.images", "com.sun.imageio.spi",
         "javax" + ".imageio.stream", "com.sun.swing.internal.plaf.basic.resources", "sun.awt.im", "sun.print.resources", "com.sun.imageio.plugins.tiff", "sun.java2d.cmm.lcms", "sun.awt.util", "java.awt.dnd", "java.awt.geom", "sun.awt", "sun.java2d.loops", "com.sun.accessibility.internal.resources", "java.awt.im", "sun.awt.shell", "javax.swing.text.html.parser", "java.awt", "javax.swing.text.rtf.charsets", "javax.swing.undo", "sun.java2d.cmm", "com.sun.imageio.plugins.png", "sun.applet", "sun.swing.plaf", "com.sun.imageio.stream", "sun.swing.text", "javax.print", "sun.awt.dnd", "com.sun.beans.infos", "sun.font", "sun.swing", "com.sun.beans.editors", "com.sun.java.swing.plaf.motif", "com.sun.java.swing.plaf.motif.icons", "java.beans", "javax.print.event", "javax.imageio.metadata", "sun.java2d.marlin.stats", "javax.accessibility", "com.sun.swing.internal.plaf.metal.resources", "java.awt.font", "com.sun.beans", "com.sun.imageio.plugins.wbmp", "javax.imageio.plugins.bmp", "sun.awt" +
         ".image", "sun" + ".awt.geom", "javax.sound.sampled.spi", "sun.java2d.cmm.profiles", "javax.sound.sampled", "javax.swing.plaf.synth", "sun.awt.www.content.audio", "javax.swing.plaf.basic.icons", "javax.swing.plaf.nimbus", "sun.swing.table", "java.awt.event", "javax.swing.plaf.basic", "javax.swing.border", "javax.swing.tree", "java.awt.image.renderable", "sun.swing.plaf.synth", "java.awt.peer", "javax.imageio.plugins.tiff", "sun.awt.www.content.image", "com.sun.java.swing.plaf.windows.icons", "sun.java2d.d3d", "sun.java2d.windows", "sun.swing.icon", "sun.awt.www.content", "com.sun.imageio.plugins.gif", "sun.font.lookup", "com.sun.java.swing", "com.sun.beans.util", "java.awt.im.spi", "java.beans.beancontext", "com.sun.imageio.plugins.common", "sun.awt.resources", "javax.swing.event", "java.awt.color", "com.sun.imageio.plugins.jpeg", "com.sun.swing.internal.plaf.synth.resources", "javax.swing.text.rtf", "java.awt.print", "com.sun.awt", "javax.swing.plaf.multi", "sun.swing" +
         ".text.html", "javax" + ".imageio.event", "sun.java2d.opengl", "sun.print", "javax.print.attribute", "com.sun.media.sound", "javax.swing");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[5] = var35.build(1812084624);
        var35 = new Builder("java.instrument");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        Exports[] var10033 = new Exports[2];
        Set var21 = Set.of("java.base");
        var10033[0] = Builder.newExports(var4, "sun.instrument", var21);
        var10033[1] = Builder.newExports(var4, "java.lang.instrument");
        var35.exports(var10033);
        var35.opens(new Opens[0]);
        Set var22 = Set.of();
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("java.lang.instrument", "sun.instrument");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[6] = var35.build(1543391452);
        var35 = new Builder("java.logging");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "java.util.logging")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("jdk.internal.logger.DefaultLoggerFinder", List.of("sun.util.logging.internal.LoggingProviderImpl"))});
        var2 = Set.of("java.util.logging", "sun.net.www.protocol.http.logging", "sun.util.logging.internal", "sun.util.logging.resources");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[7] = var35.build(999494080);
        var35 = new Builder("java.management");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        Exports[] var10043 = new Exports[]{Builder.newExports(var4, "javax.management.remote"), Builder.newExports(var4, "javax.management.timer"), null, null, null, null, null, null, null, null, null, null, null, null, null, null};
        Set var23 = Set.of("jdk.management.agent");
        var10043[2] = Builder.newExports(var4, "sun.management.counter", var23);
        var2 = Set.of("java.management.rmi");
        var10043[3] = Builder.newExports(var4, "com.sun.jmx.remote.util", var2);
        Set var24 = Set.of("java.management.rmi", "jdk.management.agent");
        var10043[4] = Builder.newExports(var4, "com.sun.jmx.remote.security", var24);
        var2 = Set.of("jdk.jconsole", "jdk.management", "jdk.management.agent");
        var10043[5] = Builder.newExports(var4, "sun.management", var2);
        var10043[6] = Builder.newExports(var4, "javax.management.modelmbean");
        var10043[7] = Builder.newExports(var4, "com.sun.jmx.remote.internal", var24);
        var10043[8] = Builder.newExports(var4, "java.lang.management");
        var10043[9] = Builder.newExports(var4, "sun.management.counter.perf", var23);
        var10043[10] = Builder.newExports(var4, "javax.management");
        var10043[11] = Builder.newExports(var4, "javax.management.relation");
        var2 = Set.of("jdk.management.jfr", "jdk.management");
        var10043[12] = Builder.newExports(var4, "sun.management.spi", var2);
        var10043[13] = Builder.newExports(var4, "javax.management.openmbean");
        var10043[14] = Builder.newExports(var4, "javax.management.monitor");
        var10043[15] = Builder.newExports(var4, "javax.management.loading");
        var35.exports(var10043);
        var35.opens(new Opens[0]);
        var2 = Set.of("javax.management.remote.JMXConnectorProvider", "javax.management.remote.JMXConnectorServerProvider", "sun.management.spi.PlatformMBeanProvider");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("javax.security.auth.spi.LoginModule", List.of("com.sun.jmx.remote.security.FileLoginModule"))});
        var2 = Set.of("com.sun.jmx.remote.security", "javax.management.modelmbean", "sun.management", "sun.management.counter", "java.lang.management", "sun.management.counter.perf", "sun.management.spi", "javax.management", "javax.management.timer", "com.sun.jmx.remote.util", "com.sun.jmx.interceptor", "javax.management.openmbean", "com.sun.jmx.remote.internal", "javax.management.monitor", "com.sun.jmx.defaults", "javax.management.loading", "javax.management.remote", "com.sun.jmx.mbeanserver", "javax.management.relation");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[8] = var35.build(-416179680);
        var35 = new Builder("java.security.sasl");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.logging")});
        Exports[] var10048 = new Exports[]{Builder.newExports(var4, "javax.security.sasl"), null};
        Set var25 = Set.of("jdk.security.jgss");
        var10048[1] = Builder.newExports(var4, "com.sun.security.sasl.util", var25);
        var35.exports(var10048);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("com.sun.security.sasl.Provider"))});
        var2 = Set.of("com.sun.security.sasl.ntlm", "javax.security.sasl", "com.sun.security.sasl", "com.sun.security.sasl.util", "com.sun.security.sasl.digest");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[9] = var35.build(-1374309236);
        var35 = new Builder("java.naming");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.security.sasl")});
        Exports[] var10053 = new Exports[]{Builder.newExports(var4, "javax.naming.ldap"), null, null, null, null, null, null};
        var2 = Set.of("jdk.naming.dns");
        var10053[1] = Builder.newExports(var4, "com.sun.jndi.toolkit.ctx", var2);
        var10053[2] = Builder.newExports(var4, "javax.naming.event");
        var10053[3] = Builder.newExports(var4, "javax.naming.directory");
        var10053[4] = Builder.newExports(var4, "javax.naming");
        var10053[5] = Builder.newExports(var4, "javax.naming.spi");
        var2 = Set.of("jdk.naming.dns", "jdk.naming.rmi");
        var10053[6] = Builder.newExports(var4, "com.sun.jndi.toolkit.url", var2);
        var35.exports(var10053);
        var35.opens(new Opens[0]);
        var2 = Set.of("javax.naming.spi.InitialContextFactory", "javax.naming.ldap.StartTlsResponse");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("sun.security.provider.certpath.ldap.JdkLDAP"))});
        var2 = Set.of("com.sun.jndi.url.ldap", "com.sun.jndi.toolkit.url", "com.sun.naming.internal", "javax.naming", "com.sun.jndi.ldap.pool", "com.sun.jndi.toolkit.dir", "com.sun.jndi.ldap.ext", "com.sun.jndi.toolkit.ctx", "javax.naming.event", "com.sun.jndi.ldap.sasl", "javax.naming.directory", "sun.security.provider.certpath.ldap", "com.sun.jndi.ldap", "javax.naming.ldap", "javax.naming.spi", "com.sun.jndi.url.ldaps");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[10] = var35.build(-74822278);
        var35 = new Builder("java.rmi");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.logging")});
        Exports[] var10058 = new Exports[]{Builder.newExports(var4, "java.rmi.activation"), Builder.newExports(var4, "com.sun.rmi.rmid", var21), null, null, null, null, null, null, null, null};
        Set var26 = Set.of("jdk.jconsole", "java.management.rmi", "jdk.management.agent");
        var10058[2] = Builder.newExports(var4, "sun.rmi.server", var26);
        var10058[3] = Builder.newExports(var4, "javax.rmi.ssl");
        var10058[4] = Builder.newExports(var4, "java.rmi.dgc");
        var10058[5] = Builder.newExports(var4, "sun.rmi.transport", var26);
        var10058[6] = Builder.newExports(var4, "java.rmi.server");
        var10058[7] = Builder.newExports(var4, "sun.rmi.registry", var23);
        var10058[8] = Builder.newExports(var4, "java.rmi.registry");
        var10058[9] = Builder.newExports(var4, "java.rmi");
        var35.exports(var10058);
        var35.opens(new Opens[0]);
        var2 = Set.of("java.rmi.server.RMIClassLoaderSpi");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("java.rmi", "sun.rmi.transport.tcp", "sun.rmi.server", "sun.rmi.registry.resources", "javax.rmi.ssl", "sun.rmi.runtime", "sun.rmi.server.resources", "java.rmi.server", "java.rmi.dgc", "sun.rmi.log", "com.sun.rmi.rmid", "sun.rmi.registry", "java.rmi.activation", "java.rmi.registry", "sun.rmi.transport");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[11] = var35.build(-1223388049);
        var35 = new Builder("java.management.rmi");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var17, "java.management"), Builder.newRequires(var17, "java.rmi"), Builder.newRequires(var16, "java.naming")});
        Exports[] var10063 = new Exports[]{Builder.newExports(var4, "javax.management.remote.rmi"), null, null};
        var2 = Set.of("java.management");
        var10063[1] = Builder.newExports(var4, "com.sun.jmx.remote.protocol.rmi", var2);
        var10063[2] = Builder.newExports(var4, "com.sun.jmx.remote.internal.rmi", var23);
        var35.exports(var10063);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("javax.management.remote.JMXConnectorServerProvider", List.of("com.sun.jmx.remote.protocol.rmi.ServerProvider")), Builder.newProvides("javax.management.remote.JMXConnectorProvider", List.of("com.sun.jmx.remote.protocol.rmi.ClientProvider"))});
        var2 = Set.of("com.sun.jmx.remote.protocol.rmi", "javax.management.remote.rmi", "com.sun.jmx.remote.internal.rmi");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[12] = var35.build(625883605);
        var35 = new Builder("java.net.http");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "java.net.http")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("jdk.internal.net.http.hpack", "jdk.internal.net.http.websocket", "jdk.internal.net.http.common", "java.net.http", "jdk.internal.net.http.frame", "jdk.internal.net.http");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[13] = var35.build(-39936448);
        var35 = new Builder("java.scripting");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "javax.script")});
        var35.opens(new Opens[0]);
        var2 = Set.of("javax.script.ScriptEngineFactory");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("javax.script", "com.sun.tools.script.shell");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[14] = var35.build(125947048);
        var35 = new Builder("java.security.jgss");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.naming")});
        Exports[] var10078 = new Exports[]{Builder.newExports(var4, "javax.security.auth.kerberos"), Builder.newExports(var4, "sun.security.krb5.internal", var25), null, null, null, null, null};
        Set var27 = Set.of("jdk.security.auth");
        var10078[2] = Builder.newExports(var4, "sun.security.krb5.internal.ktab", var27);
        var10078[3] = Builder.newExports(var4, "sun.security.jgss", var25);
        var10078[4] = Builder.newExports(var4, "sun.security.krb5", var27);
        var10078[5] = Builder.newExports(var4, "org.ietf.jgss");
        var10078[6] = Builder.newExports(var4, "sun.security.jgss.krb5", var27);
        var35.exports(var10078);
        var35.opens(new Opens[]{Builder.newOpens(var19, "sun.net.www.protocol.http.spnego", var21)});
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("sun.security.jgss.SunProvider"))});
        var2 = Set.of("sun.security.jgss.krb5", "sun.security.jgss", "sun.security.krb5.internal.tools", "sun.security.jgss.spi", "sun.security.jgss.wrapper", "sun.security.krb5.internal.rcache", "sun.security.krb5", "sun.security.krb5.internal.crypto", "sun.security.krb5.internal.crypto.dk", "sun.security.jgss.spnego", "sun.security.krb5.internal.ccache", "org.ietf.jgss", "sun.security.krb5.internal.util", "sun.security.krb5.internal", "javax.security.auth.kerberos", "sun.net.www.protocol.http.spnego", "sun.security.krb5.internal.ktab");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[15] = var35.build(-751455352);
        var35 = new Builder("java.transaction.xa");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "javax.transaction.xa")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("javax.transaction.xa");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[16] = var35.build(-556989049);
        var35 = new Builder("java.sql");
        var35.requires(new Requires[]{Builder.newRequires(var17, "java.logging"), Builder.newRequires(var17, "java.xml"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var17, "java.transaction.xa")});
        var35.exports(new Exports[]{Builder.newExports(var4, "javax.sql"), Builder.newExports(var4, "java.sql")});
        var35.opens(new Opens[0]);
        var2 = Set.of("java.sql.Driver");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("java.sql", "javax.sql");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[17] = var35.build(-1630277851);
        var35 = new Builder("java.sql.rowset");
        var35.requires(new Requires[]{Builder.newRequires(var17, "java.naming"), Builder.newRequires(var17, "java.sql"), Builder.newRequires(var17, "java.logging"), Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "javax.sql.rowset.spi"), Builder.newExports(var4, "javax.sql.rowset.serial"), Builder.newExports(var4, "javax.sql.rowset")});
        var35.opens(new Opens[0]);
        var2 = Set.of("javax.sql.rowset.RowSetFactory");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("javax.sql.rowset", "com.sun.rowset", "com.sun.rowset.providers", "javax.sql.rowset.spi", "javax.sql.rowset.serial", "com.sun.rowset.internal");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[18] = var35.build(2005703387);
        var35 = new Builder("java.xml.crypto");
        var35.requires(new Requires[]{Builder.newRequires(var17, "java.xml"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.logging")});
        var35.exports(new Exports[]{Builder.newExports(var4, "javax.xml.crypto.dsig.keyinfo"), Builder.newExports(var4, "javax.xml.crypto.dsig"), Builder.newExports(var4, "javax.xml.crypto.dsig.spec"), Builder.newExports(var4, "javax.xml.crypto"), Builder.newExports(var4, "javax.xml.crypto.dom"), Builder.newExports(var4, "javax.xml.crypto.dsig.dom")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("org.jcp.xml.dsig.internal.dom.XMLDSigRI"))});
        var2 = Set.of("com.sun.org.apache.xml.internal.security.keys.content.keyvalues", "com.sun.org.apache.xml.internal.security.keys.storage.implementations", "com.sun.org.apache.xml.internal.security.transforms.params", "com.sun.org.apache.xml.internal.security.algorithms", "com.sun.org.apache.xml.internal.security.keys.content", "javax.xml.crypto.dsig.dom", "com.sun.org.apache.xml.internal.security.transforms", "org.jcp.xml.dsig.internal.dom", "com.sun.org.apache.xml.internal.security.keys.keyresolver.implementations", "com.sun.org.apache.xml.internal.security.keys.storage", "com.sun.org.apache.xml.internal.security.signature", "com.sun.org.apache.xml.internal.security.utils.resolver.implementations", "javax.xml.crypto.dsig.keyinfo", "javax.xml.crypto.dom", "com.sun.org.apache.xml.internal.security.transforms.implementations", "com.sun.org.apache.xml.internal.security.utils", "javax.xml.crypto.dsig.spec", "com.sun.org.apache.xml.internal.security.c14n.helper", "com.sun.org" +
        ".apache.xml.internal.security.exceptions", "com.sun.org.apache.xml.internal.security", "com.sun.org.apache.xml.internal.security.keys.keyresolver", "com.sun.org.apache.xml.internal.security.signature.reference", "com.sun.org.apache.xml.internal.security.c14n.implementations", "com.sun.org.slf4j.internal", "org.jcp.xml.dsig.internal", "com.sun.org.apache.xml.internal.security.keys", "javax.xml.crypto", "com.sun.org.apache.xml.internal.security.utils.resolver", "com.sun.org.apache.xml.internal.security.keys.content.x509", "javax.xml.crypto.dsig", "com.sun.org.apache.xml.internal.security.c14n", "com.sun.org.apache.xml.internal.security.algorithms.implementations", "com.sun.org.apache.xml.internal.security.resource");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[19] = var35.build(-718255533);
        var35 = new Builder("java.smartcardio");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "javax.smartcardio")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("sun.security.smartcardio.SunPCSC"))});
        var2 = Set.of("javax.smartcardio", "sun.security.smartcardio");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[20] = var35.build(-43924178);
        var35 = new Builder("jdk.accessibility");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var17, "java.desktop")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.java.accessibility.util")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("javax.accessibility.AccessibilityProvider", List.of("com.sun.java.accessibility.internal.ProviderImpl"))});
        var2 = Set.of("com.sun.java.accessibility.util.internal", "com.sun.java.accessibility.util", "com.sun.java.accessibility.internal");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[21] = var35.build(1145339930);
        var35 = new Builder("jdk.management");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var17, "java.management")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.management")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("sun.management.spi.PlatformMBeanProvider", List.of("com.sun.management.internal.PlatformMBeanProviderImpl"))});
        var2 = Set.of("com.sun.management", "com.sun.management.internal");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[22] = var35.build(336515197);
        var35 = new Builder("jdk.unsupported");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "sun.misc"), Builder.newExports(var4, "com.sun.nio.file"), Builder.newExports(var4, "sun.reflect")});
        var35.opens(new Opens[]{Builder.newOpens(var19, "sun.misc"), Builder.newOpens(var19, "sun.reflect")});
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("com.sun.nio.file", "sun.reflect", "sun.misc");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[23] = var35.build(1369054529);
        var35 = new Builder("jdk.internal.jvmstat");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        Exports[] var10123 = new Exports[3];
        var2 = Set.of("jdk.jcmd", "jdk.jconsole", "jdk.attach", "jdk.jstatd");
        var10123[0] = Builder.newExports(var4, "sun.jvmstat.monitor", var2);
        var2 = Set.of("jdk.jstatd");
        var10123[1] = Builder.newExports(var4, "sun.jvmstat.perfdata.monitor", var2);
        var2 = Set.of("jdk.jcmd", "jdk.jstatd");
        var10123[2] = Builder.newExports(var4, "sun.jvmstat.monitor.event", var2);
        var35.exports(var10123);
        var35.opens(new Opens[0]);
        var2 = Set.of("sun.jvmstat.monitor.MonitoredHostService");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("sun.jvmstat.monitor.MonitoredHostService", List.of("sun.jvmstat.perfdata.monitor.protocol.file.MonitoredHostFileService", "sun.jvmstat.perfdata.monitor.protocol.local.MonitoredHostLocalService"))});
        var2 = Set.of("sun.jvmstat.perfdata.monitor.protocol.local", "sun.jvmstat", "sun.jvmstat.perfdata.monitor.v1_0", "sun.jvmstat.monitor.event", "sun.jvmstat.perfdata.monitor.v2_0", "sun.jvmstat.perfdata.monitor", "sun.jvmstat.perfdata.resources", "sun.jvmstat.monitor", "sun.jvmstat.perfdata.monitor.protocol.file");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[24] = var35.build(1496442191);
        var35 = new Builder("jdk.attach");
        var35.requires(new Requires[]{Builder.newRequires(var16, "jdk.internal.jvmstat"), Builder.newRequires(var14, "java.base")});
        Exports[] var10128 = new Exports[]{Builder.newExports(var4, "com.sun.tools.attach.spi"), Builder.newExports(var4, "com.sun.tools.attach"), null};
        var2 = Set.of("jdk.jcmd");
        var10128[2] = Builder.newExports(var4, "sun.tools.attach", var2);
        var35.exports(var10128);
        var35.opens(new Opens[0]);
        var2 = Set.of("com.sun.tools.attach.spi.AttachProvider");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("com.sun.tools.attach.spi.AttachProvider", List.of("sun.tools.attach.AttachProviderImpl"))});
        var2 = Set.of("sun.tools.attach", "com.sun.tools.attach", "com.sun.tools.attach.spi");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[25] = var35.build(-536432925);
        var35 = new Builder("jdk.charsets");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.nio.charset.spi.CharsetProvider", List.of("sun.nio.cs.ext.ExtendedCharsets"))});
        var2 = Set.of("sun.nio.cs.ext");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[26] = var35.build(-23653390);
        var35 = new Builder("jdk.compiler");
        var35.requires(new Requires[]{Builder.newRequires(var17, "java.compiler"), Builder.newRequires(var14, "java.base")});
        Exports[] var10138 = new Exports[18];
        Set var28 = Set.of("jdk.jshell", "jdk.scripting.nashorn.shell");
        var10138[0] = Builder.newExports(var4, "jdk.internal.shellsupport.doc", var28);
        Set var29 = Set.of("jdk.jdeps", "jdk.javadoc");
        var10138[1] = Builder.newExports(var4, "com.sun.tools.javac.platform", var29);
        var10138[2] = Builder.newExports(var4, "com.sun.source.util");
        Set var30 = Set.of("jdk.javadoc", "jdk.jshell");
        var10138[3] = Builder.newExports(var4, "com.sun.tools.javac.api", var30);
        var10138[4] = Builder.newExports(var4, "com.sun.tools.javac.file", var29);
        var10138[5] = Builder.newExports(var4, "com.sun.source.tree");
        Set var31 = Set.of("jdk.javadoc");
        var10138[6] = Builder.newExports(var4, "com.sun.tools.doclint", var31);
        var10138[7] = Builder.newExports(var4, "com.sun.tools.javac");
        Set var32 = Set.of("jdk.jshell");
        var10138[8] = Builder.newExports(var4, "com.sun.tools.javac.parser", var32);
        var10138[9] = Builder.newExports(var4, "com.sun.source.doctree");
        var10138[10] = Builder.newExports(var4, "com.sun.tools.javac.comp", var30);
        var10138[11] = Builder.newExports(var4, "com.sun.tools.javac.jvm", var31);
        var2 = Set.of("jdk.jdeps", "jdk.javadoc", "jdk.jshell");
        var10138[12] = Builder.newExports(var4, "com.sun.tools.javac.util", var2);
        var10138[13] = Builder.newExports(var4, "com.sun.tools.javac.tree", var30);
        var10138[14] = Builder.newExports(var4, "com.sun.tools.javac.main", var30);
        var10138[15] = Builder.newExports(var4, "com.sun.tools.javac.model", var31);
        var10138[16] = Builder.newExports(var4, "com.sun.tools.javac.code", var30);
        var10138[17] = Builder.newExports(var4, "com.sun.tools.javac.resources", var32);
        var35.exports(var10138);
        var35.opens(new Opens[0]);
        var2 = Set.of("com.sun.source.util.Plugin", "com.sun.tools.javac.platform.PlatformProvider", "javax.annotation.processing.Processor");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("javax.tools.JavaCompiler", List.of("com.sun.tools.javac.api.JavacTool")), Builder.newProvides("java.util.spi.ToolProvider", List.of("com.sun.tools.javac.main.JavacToolProvider")), Builder.newProvides("com.sun.tools.javac.platform.PlatformProvider", List.of("com.sun.tools.javac.platform.JDKPlatformProvider")), Builder.newProvides("javax.tools.Tool", List.of("com.sun.tools.javac.api.JavacTool"))});
        var2 = Set.of("com.sun.tools.javac.main", "com.sun.tools.javac.parser", "com.sun.tools.javac.file", "com.sun.source.tree", "com.sun.tools.doclint.resources", "com.sun.tools.javac.comp", "jdk.internal.shellsupport.doc.resources", "com.sun.tools.javac.resources", "sun.tools.serialver.resources", "com.sun.tools.sjavac.comp.dependencies", "com.sun.tools.sjavac.server.log", "com.sun.source.doctree", "com.sun.tools.javac.util", "jdk.internal.shellsupport.doc", "com.sun.tools.javac.tree", "com.sun.tools.sjavac.server", "com.sun.tools.javac.launcher", "com.sun.tools.sjavac.comp", "com.sun.tools.sjavac.pubapi", "com.sun.tools.javac.platform", "com.sun.tools.javac.processing", "com.sun.tools.javac.api", "com.sun.source.util", "com.sun.tools.doclint", "com.sun.tools.javac.jvm", "com.sun.tools.sjavac", "com.sun.tools.javac.model", "com.sun.tools.javac", "com.sun.tools.javac.code", "com.sun.tools.sjavac.options", "com.sun.tools.sjavac.client", "sun.tools.serialver");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[27] = var35.build(1962887374);
        var35 = new Builder("jdk.crypto.ec");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("sun.security.ec.SunEC"))});
        var2 = Set.of("sun.security.ec");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[28] = var35.build(-565474078);
        var35 = new Builder("jdk.crypto.cryptoki");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "jdk.crypto.ec")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("sun.security.pkcs11.SunPKCS11"))});
        var2 = Set.of("sun.security.pkcs11.wrapper", "sun.security.pkcs11");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[29] = var35.build(-847509122);
        var35 = new Builder("jdk.crypto.mscapi");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("sun.security.mscapi.SunMSCAPI"))});
        var2 = Set.of("sun.security.mscapi");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[30] = var35.build(-758446848);
        var35 = new Builder("jdk.dynalink");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.logging")});
        var35.exports(new Exports[]{Builder.newExports(var4, "jdk.dynalink.support"), Builder.newExports(var4, "jdk.dynalink.beans"), Builder.newExports(var4, "jdk.dynalink"), Builder.newExports(var4, "jdk.dynalink.linker.support"), Builder.newExports(var4, "jdk.dynalink.linker")});
        var35.opens(new Opens[0]);
        var2 = Set.of("jdk.dynalink.linker.GuardingDynamicLinkerExporter");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("jdk.dynalink.internal", "jdk.dynalink.support", "jdk.dynalink.beans", "jdk.dynalink", "jdk.dynalink.linker.support", "jdk.dynalink.linker");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[31] = var35.build(-1767538030);
        var35 = new Builder("jdk.internal.ed");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        Exports[] var10163 = new Exports[]{Builder.newExports(var4, "jdk.internal.editor.external", var28), null};
        var2 = Set.of("jdk.jshell", "jdk.scripting.nashorn.shell", "jdk.editpad");
        var10163[1] = Builder.newExports(var4, "jdk.internal.editor.spi", var2);
        var35.exports(var10163);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("jdk.internal.editor.spi", "jdk.internal.editor.external");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[32] = var35.build(-1717765571);
        var35 = new Builder("jdk.editpad");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "jdk.internal.ed"), Builder.newRequires(var16, "java.desktop")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("jdk.internal.editor.spi.BuildInEditorProvider", List.of("jdk.editpad.EditPadProvider"))});
        var2 = Set.of("jdk.editpad", "jdk.editpad.resources");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[33] = var35.build(432920917);
        var35 = new Builder("jdk.httpserver");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.net.httpserver.spi"), Builder.newExports(var4, "com.sun.net.httpserver")});
        var35.opens(new Opens[0]);
        var2 = Set.of("com.sun.net.httpserver.spi.HttpServerProvider");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("com.sun.net.httpserver.spi", "sun.net.httpserver", "com.sun.net.httpserver");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[34] = var35.build(-1142581553);
        var35 = new Builder("jdk.internal.le");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "jdk.internal.jline.internal", var28), Builder.newExports(var4, "jdk.internal.jline.console", var28), Builder.newExports(var4, "jdk.internal.jline.extra", var28), Builder.newExports(var4, "jdk.internal.jline.console.history", var28), Builder.newExports(var4, "jdk.internal.jline.console.completer", var28), Builder.newExports(var4, "jdk.internal.jline", var28)});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("jdk.internal.jline.console.history", "jdk.internal.jline", "jdk.internal.jline.console.internal", "jdk.internal.jline.internal", "jdk.internal.jline.console", "jdk.internal.jline.console.completer", "jdk.internal.jline.extra");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[35] = var35.build(1676755631);
        var35 = new Builder("jdk.internal.opt");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        Exports[] var10183 = new Exports[1];
        var2 = Set.of("jdk.jshell", "jdk.jlink");
        var10183[0] = Builder.newExports(var4, "jdk.internal.joptsimple", var2);
        var35.exports(var10183);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("jdk.internal.joptsimple.util", "jdk.internal.joptsimple.internal", "jdk.internal.joptsimple");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[36] = var35.build(205140406);
        var35 = new Builder("jdk.jartool");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.jarsigner"), Builder.newExports(var4, "jdk.security.jarsigner")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.util.spi.ToolProvider", List.of("sun.tools.jar.JarToolProvider"))});
        var2 = Set.of("sun.tools.jar.resources", "sun.tools.jar", "sun.security.tools.jarsigner", "jdk.security.jarsigner", "com.sun.jarsigner");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[37] = var35.build(-666555651);
        var35 = new Builder("jdk.javadoc");
        var35.requires(new Requires[]{Builder.newRequires(var17, "java.compiler"), Builder.newRequires(var16, "java.xml"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var17, "jdk.compiler")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.javadoc"), Builder.newExports(var4, "jdk.javadoc.doclet"), Builder.newExports(var4, "com.sun.tools.javadoc")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.util.spi.ToolProvider", List.of("jdk.javadoc.internal.tool.JavadocToolProvider")), Builder.newProvides("javax.tools.DocumentationTool", List.of("jdk.javadoc.internal.api.JavadocTool")), Builder.newProvides("javax.tools.Tool", List.of("jdk.javadoc.internal.api.JavadocTool"))});
        var2 = Set.of("jdk.javadoc.internal.doclets.toolkit", "com.sun.tools.javadoc", "jdk.javadoc.internal.doclets.formats.html.resources.jquery.jszip.dist", "jdk.javadoc.internal.doclets.toolkit.builders", "jdk.javadoc.internal.doclets.toolkit.taglets", "jdk.javadoc.internal.tool", "jdk.javadoc.internal.doclets.formats.html.markup", "com.sun.javadoc", "jdk.javadoc.internal.doclets.toolkit.util", "jdk.javadoc.internal.doclets.formats.html.resources.jquery", "com.sun.tools.doclets.standard", "com.sun.tools.javadoc.main", "jdk.javadoc.internal.doclets.toolkit.resources", "jdk.javadoc.internal.tool.resources", "com.sun.tools.javadoc.resources", "jdk.javadoc.doclet", "jdk.javadoc.internal.api", "jdk.javadoc.internal.doclets.formats.html.resources", "jdk.javadoc.internal.doclets.formats.html.resources.jquery.images", "jdk.javadoc.internal.doclets.formats.html.resources.jquery.external.jquery", "jdk.javadoc.internal.doclets.formats.html", "jdk.javadoc.internal.doclets.toolkit.util.links");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[38] = var35.build(921106953);
        var35 = new Builder("jdk.management.agent");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.management"), Builder.newRequires(var16, "java.management.rmi")});
        var35.exports(new Exports[]{Builder.newExports(var4, "jdk.internal.agent", var20)});
        var35.opens(new Opens[0]);
        var2 = Set.of("jdk.internal.agent.spi.AgentProvider");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("sun.management.jmxremote", "jdk.internal.agent.spi", "jdk.internal.agent", "jdk.internal.agent.resources", "sun.management.jdp");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[39] = var35.build(713192118);
        var35 = new Builder("jdk.jconsole");
        var35.requires(new Requires[]{Builder.newRequires(var16, "jdk.internal.jvmstat"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "jdk.management"), Builder.newRequires(var17, "java.management"), Builder.newRequires(var16, "java.management.rmi"), Builder.newRequires(var17, "java.desktop"), Builder.newRequires(var16, "jdk.attach"), Builder.newRequires(var16, "java.rmi"), Builder.newRequires(var16, "jdk.management.agent")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.tools.jconsole")});
        var35.opens(new Opens[0]);
        var2 = Set.of("com.sun.tools.jconsole.JConsolePlugin");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("sun.tools.jconsole.resources", "sun.tools.jconsole.inspector", "sun.tools.jconsole", "com.sun.tools.jconsole");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[40] = var35.build(527552963);
        var35 = new Builder("jdk.jdeps");
        var35.requires(new Requires[]{Builder.newRequires(var16, "jdk.compiler"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.compiler")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.tools.classfile", var8)});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.util.spi.ToolProvider", List.of("com.sun.tools.javap.Main$JavapToolProvider", "com.sun.tools.jdeps.Main$JDepsToolProvider"))});
        var2 = Set.of("com.sun.tools.classfile", "com.sun.tools.jdeprscan", "com.sun.tools.jdeps", "com.sun.tools.jdeps.resources", "com.sun.tools.jdeprscan.scan", "com.sun.tools.jdeprscan.resources", "com.sun.tools.javap.resources", "com.sun.tools.javap");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[41] = var35.build(-2108308533);
        var35 = new Builder("jdk.jdwp.agent");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of();
        var35.packages(var2);
        var35.version("11.0.1");
        var1[42] = var35.build(-604116781);
        var35 = new Builder("jdk.jdi");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "jdk.jdwp.agent"), Builder.newRequires(var16, "jdk.attach")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.jdi.connect.spi"), Builder.newExports(var4, "com.sun.jdi.event"), Builder.newExports(var4, "com.sun.jdi.request"), Builder.newExports(var4, "com.sun.jdi.connect"), Builder.newExports(var4, "com.sun.jdi")});
        var35.opens(new Opens[0]);
        var2 = Set.of("com.sun.jdi.connect.Connector", "com.sun.jdi.connect.spi.TransportService");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("com.sun.jdi.connect.Connector", List.of("com.sun.tools.jdi.ProcessAttachingConnector", "com.sun.tools.jdi.RawCommandLineLauncher", "com.sun.tools.jdi.SocketAttachingConnector", "com.sun.tools.jdi.SocketListeningConnector", "com.sun.tools.jdi.SunCommandLineLauncher", "com.sun.tools.jdi.SharedMemoryAttachingConnector", "com.sun.tools.jdi.SharedMemoryListeningConnector"))});
        var2 = Set.of("com.sun.tools.jdi", "com.sun.jdi.connect.spi", "com.sun.jdi.event", "com.sun.tools.jdi.resources", "com.sun.jdi", "com.sun.tools.example.debug.tty", "com.sun.jdi.request", "com.sun.jdi.connect", "com.sun.tools.example.debug.expr");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[43] = var35.build(984984553);
        var35 = new Builder("jdk.jfr");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        Exports[] var10223 = new Exports[]{Builder.newExports(var4, "jdk.jfr"), Builder.newExports(var4, "jdk.jfr.consumer"), null};
        var2 = Set.of("jdk.management.jfr");
        var10223[2] = Builder.newExports(var4, "jdk.jfr.internal.management", var2);
        var35.exports(var10223);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("jdk.jfr.internal.cmd", "jdk.jfr.internal.consumer", "jdk.jfr.internal.test", "jdk.jfr.internal.instrument", "jdk.jfr", "jdk.jfr.internal.handlers", "jdk.jfr.internal.management", "jdk.jfr.internal.settings", "jdk.jfr.internal", "jdk.jfr.internal.dcmd", "jdk.jfr.internal.jfc", "jdk.jfr.consumer", "jdk.jfr.events", "jdk.jfr.internal.types");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[44] = var35.build(-1985792052);
        var35 = new Builder("jdk.jlink");
        var35.requires(new Requires[]{Builder.newRequires(var16, "jdk.jdeps"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "jdk.internal.opt")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var2 = Set.of("jdk.tools.jlink.plugin.Plugin");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("jdk.tools.jlink.plugin.Plugin", List.of("jdk.tools.jlink.internal.plugins.StripDebugPlugin", "jdk.tools.jlink.internal.plugins.ExcludePlugin", "jdk.tools.jlink.internal.plugins.ExcludeFilesPlugin", "jdk.tools.jlink.internal.plugins.ExcludeJmodSectionPlugin", "jdk.tools.jlink.internal.plugins.LegalNoticeFilePlugin", "jdk.tools.jlink.internal.plugins.SystemModulesPlugin", "jdk.tools.jlink.internal.plugins.StripNativeCommandsPlugin", "jdk.tools.jlink.internal.plugins.OrderResourcesPlugin", "jdk.tools.jlink.internal.plugins.DefaultCompressPlugin", "jdk.tools.jlink.internal.plugins.ExcludeVMPlugin", "jdk.tools.jlink.internal.plugins.IncludeLocalesPlugin", "jdk.tools.jlink.internal.plugins.GenerateJLIClassesPlugin", "jdk.tools.jlink.internal.plugins.ReleaseInfoPlugin")), Builder.newProvides("java.util.spi.ToolProvider", List.of("jdk.tools.jmod.Main$JmodToolProvider", "jdk.tools.jlink.internal.Main$JlinkToolProvider"))});
        var2 = Set.of("jdk.tools.jlink.internal", "jdk.tools.jlink.internal.packager", "jdk.tools.jmod", "jdk.tools.jimage.resources", "jdk.tools.jlink.resources", "jdk.tools.jlink.internal.plugins", "jdk.tools.jlink.plugin", "jdk.tools.jimage", "jdk.tools.jmod.resources", "jdk.tools.jlink.builder");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[45] = var35.build(-569312359);
        var35 = new Builder("jdk.jshell");
        var35.requires(new Requires[]{Builder.newRequires(var17, "java.compiler"), Builder.newRequires(var16, "jdk.compiler"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "jdk.internal.ed"), Builder.newRequires(var16, "java.logging"), Builder.newRequires(var16, "jdk.internal.opt"), Builder.newRequires(var17, "jdk.jdi"), Builder.newRequires(var16, "jdk.internal.le"), Builder.newRequires(var17, "java.prefs")});
        var35.exports(new Exports[]{Builder.newExports(var4, "jdk.jshell.spi"), Builder.newExports(var4, "jdk.jshell.tool"), Builder.newExports(var4, "jdk.jshell"), Builder.newExports(var4, "jdk.jshell.execution")});
        var35.opens(new Opens[0]);
        var2 = Set.of("jdk.internal.editor.spi.BuildInEditorProvider", "jdk.jshell.spi.ExecutionControlProvider");
        var35.uses(var2);
        var35.provides(new Provides[]{Builder.newProvides("javax.tools.Tool", List.of("jdk.internal.jshell.tool.JShellToolProvider")), Builder.newProvides("jdk.jshell.spi.ExecutionControlProvider", List.of("jdk.jshell.execution.JdiExecutionControlProvider", "jdk.jshell.execution.LocalExecutionControlProvider", "jdk.jshell.execution.FailOverExecutionControlProvider"))});
        var2 = Set.of("jdk.internal.jshell.tool.resources", "jdk.jshell", "jdk.jshell.resources", "jdk.internal.jshell.debug", "jdk.jshell.execution", "jdk.jshell.spi", "jdk.jshell.tool.resources", "jdk.jshell.tool", "jdk.internal.jshell.tool");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[46] = var35.build(1485078955);
        var35 = new Builder("jdk.jsobject");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.desktop")});
        var35.exports(new Exports[]{Builder.newExports(var4, "netscape.javascript")});
        var35.opens(new Opens[0]);
        var2 = Set.of("jdk.internal.netscape.javascript.spi.JSObjectProvider");
        var35.uses(var2);
        var35.provides(new Provides[0]);
        var2 = Set.of("jdk.internal.netscape.javascript.spi", "netscape.javascript");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[47] = var35.build(-1673839156);
        var35 = new Builder("jdk.jstatd");
        var35.requires(new Requires[]{Builder.newRequires(var16, "jdk.internal.jvmstat"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.rmi")});
        Exports[] var10243 = new Exports[1];
        Set var33 = Set.of("java.rmi");
        var10243[0] = Builder.newExports(var4, "sun.jvmstat.monitor.remote", var33);
        var35.exports(var10243);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("sun.jvmstat.monitor.MonitoredHostService", List.of("sun.jvmstat.perfdata.monitor.protocol.rmi.MonitoredHostRmiService"))});
        var2 = Set.of("sun.jvmstat.perfdata.monitor.protocol.rmi", "sun.jvmstat.monitor.remote", "sun.tools.jstatd");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[48] = var35.build(872214599);
        var35 = new Builder("jdk.localedata");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("sun.util.resources.LocaleData$CommonResourceBundleProvider", List.of("sun.util.resources.provider.LocaleDataProvider")), Builder.newProvides("sun.util.locale.provider.LocaleDataMetaInfo", List.of("sun.util.resources.cldr.provider.CLDRLocaleDataMetaInfo", "sun.util.resources.provider.NonBaseLocaleDataMetaInfo")), Builder.newProvides("sun.util.resources.LocaleData$SupplementaryResourceBundleProvider", List.of("sun.util.resources.provider.SupplementaryLocaleDataProvider"))});
        var2 = Set.of("sun.text.resources.cldr.ext", "sun.util.resources.provider", "sun.util.resources.cldr.provider", "sun.util.resources.ext", "sun.text.resources.ext", "sun.util.resources.cldr.ext");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[49] = var35.build(-477112092);
        var35 = new Builder("jdk.management.jfr");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "jdk.management"), Builder.newRequires(var16, "jdk.jfr"), Builder.newRequires(var17, "java.management")});
        var35.exports(new Exports[]{Builder.newExports(var4, "jdk.management.jfr")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("sun.management.spi.PlatformMBeanProvider", List.of("jdk.management.jfr.internal.FlightRecorderMXBeanProvider"))});
        var2 = Set.of("jdk.management.jfr", "jdk.management.jfr.internal");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[50] = var35.build(-827653401);
        var35 = new Builder("jdk.naming.dns");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.naming")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.jndi.url.dns", var13)});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("javax.naming.spi.InitialContextFactory", List.of("com.sun.jndi.dns.DnsContextFactory"))});
        var2 = Set.of("com.sun.jndi.url.dns", "com.sun.jndi.dns");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[51] = var35.build(1758428188);
        var35 = new Builder("jdk.naming.rmi");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.rmi"), Builder.newRequires(var16, "java.naming")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.jndi.rmi.registry", var33), Builder.newExports(var4, "com.sun.jndi.url.rmi", var13)});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("javax.naming.spi.InitialContextFactory", List.of("com.sun.jndi.rmi.registry.RegistryContextFactory"))});
        var2 = Set.of("com.sun.jndi.rmi.registry", "com.sun.jndi.url.rmi");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[52] = var35.build(-1355938378);
        var35 = new Builder("jdk.net");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "jdk.nio"), Builder.newExports(var4, "jdk.net")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("jdk.net", "jdk.nio");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[53] = var35.build(-2839346);
        var35 = new Builder("jdk.scripting.nashorn");
        var35.requires(new Requires[]{Builder.newRequires(var16, "jdk.dynalink"), Builder.newRequires(var14, "java.base"), Builder.newRequires(var17, "java.scripting"), Builder.newRequires(var16, "java.logging")});
        Exports[] var10273 = new Exports[5];
        Set var34 = Set.of("jdk.scripting.nashorn.shell");
        var10273[0] = Builder.newExports(var4, "jdk.nashorn.tools", var34);
        var10273[1] = Builder.newExports(var4, "jdk.nashorn.api.scripting");
        var10273[2] = Builder.newExports(var4, "jdk.nashorn.internal.objects", var34);
        var10273[3] = Builder.newExports(var4, "jdk.nashorn.internal.runtime", var34);
        var10273[4] = Builder.newExports(var4, "jdk.nashorn.api.tree");
        var35.exports(var10273);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("javax.script.ScriptEngineFactory", List.of("jdk.nashorn.api.scripting.NashornScriptEngineFactory")), Builder.newProvides("jdk.dynalink.linker.GuardingDynamicLinkerExporter", List.of("jdk.nashorn.api.linker.NashornLinkerExporter"))});
        var2 = Set.of("jdk.nashorn.internal.runtime.resources", "jdk.nashorn.internal.runtime.regexp", "jdk.nashorn.api.scripting.resources", "jdk.nashorn.internal.runtime.regexp.joni.exception", "jdk.nashorn.internal.runtime.doubleconv", "jdk.nashorn.internal.scripts", "jdk.nashorn.api.linker", "jdk.nashorn.internal.ir.annotations", "jdk.nashorn.internal.codegen.types", "jdk.nashorn.internal.runtime.regexp.joni.encoding", "jdk.nashorn.internal.runtime.events", "jdk.nashorn.internal.runtime.regexp.joni.constants", "jdk.nashorn.internal.runtime.regexp.joni", "jdk.nashorn.api.tree", "jdk.nashorn.tools", "jdk.nashorn.internal.ir", "jdk.nashorn.internal.runtime", "jdk.nashorn.api.scripting", "jdk.nashorn.internal.ir.visitor", "jdk.nashorn.internal.runtime.logging", "jdk.nashorn.internal.runtime.linker", "jdk.nashorn.internal.parser", "jdk.nashorn.internal", "jdk.nashorn.internal.runtime.regexp.joni.ast", "jdk.nashorn.internal.ir.debug", "jdk.nashorn.internal.lookup",
         "jdk.nashorn.tools" + ".resources", "jdk.nashorn.internal.codegen", "jdk.nashorn.internal.objects", "jdk.nashorn.internal.objects.annotations", "jdk.nashorn.internal.runtime.arrays", "jdk.nashorn.internal.runtime.options", "jdk.nashorn.internal.runtime.resources.fx");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[54] = var35.build(-119658488);
        var35 = new Builder("jdk.sctp");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.nio.sctp")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("sun.nio.ch.sctp", "com.sun.nio.sctp");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[55] = var35.build(-1837191506);
        var35 = new Builder("jdk.security.auth");
        var35.requires(new Requires[]{Builder.newRequires(var17, "java.naming"), Builder.newRequires(var16, "java.security.jgss"), Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.security.auth.callback"), Builder.newExports(var4, "com.sun.security.auth.login"), Builder.newExports(var4, "com.sun.security.auth"), Builder.newExports(var4, "com.sun.security.auth.module")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("javax.security.auth.spi.LoginModule", List.of("com.sun.security.auth.module.Krb5LoginModule", "com.sun.security.auth.module.UnixLoginModule", "com.sun.security.auth.module.JndiLoginModule", "com.sun.security.auth.module.KeyStoreLoginModule", "com.sun.security.auth.module.LdapLoginModule", "com.sun.security.auth.module.NTLoginModule"))});
        var2 = Set.of("com.sun.security.auth.module", "com.sun.security.auth.callback", "com.sun.security.auth", "com.sun.security.auth.login");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[56] = var35.build(1726597976);
        var35 = new Builder("jdk.security.jgss");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var16, "java.logging"), Builder.newRequires(var17, "java.security.jgss"), Builder.newRequires(var16, "java.security.sasl")});
        var35.exports(new Exports[]{Builder.newExports(var4, "com.sun.security.jgss")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.security.Provider", List.of("com.sun.security.sasl.gsskerb.JdkSASL"))});
        var2 = Set.of("com.sun.security.sasl.gsskerb", "com.sun.security.jgss");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[57] = var35.build(2045430005);
        var35 = new Builder("jdk.unsupported.desktop");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base"), Builder.newRequires(var17, "java.desktop")});
        var35.exports(new Exports[]{Builder.newExports(var4, "jdk.swing.interop")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("sun.swing.InteropProvider", List.of("jdk.swing.interop.internal.InteropProviderImpl"))});
        var2 = Set.of("jdk.swing.interop", "jdk.swing.interop.internal");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[58] = var35.build(-940969549);
        var35 = new Builder("jdk.xml.dom");
        var35.requires(new Requires[]{Builder.newRequires(var17, "java.xml"), Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[]{Builder.newExports(var4, "org.w3c.dom.html"), Builder.newExports(var4, "org.w3c.dom.xpath"), Builder.newExports(var4, "org.w3c.dom.css"), Builder.newExports(var4, "org.w3c.dom.stylesheets")});
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[0]);
        var2 = Set.of("org.w3c.dom.xpath", "org.w3c.dom.css", "org.w3c.dom.html", "org.w3c.dom.stylesheets");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[59] = var35.build(857969997);
        var35 = new Builder("jdk.zipfs");
        var35.requires(new Requires[]{Builder.newRequires(var14, "java.base")});
        var35.exports(new Exports[0]);
        var35.opens(new Opens[0]);
        var35.uses(var22);
        var35.provides(new Provides[]{Builder.newProvides("java.nio.file.spi.FileSystemProvider", List.of("jdk.nio.zipfs.ZipFileSystemProvider"))});
        var2 = Set.of("jdk.nio.zipfs");
        var35.packages(var2);
        var35.version("11.0.1");
        var1[60] = var35.build(381254363);
        return var1;
    }
    
    public ModuleTarget[] moduleTargets() {
        ModuleTarget[] var1 = new ModuleTarget[61];
        var1[0] = new ModuleTarget("windows-amd64");
        return var1;
    }
    
    public ModuleHashes[] moduleHashes() {
        ModuleHashes[] var1 = new ModuleHashes[61];
        jdk.internal.module.ModuleHashes.Builder var2 = new jdk.internal.module.ModuleHashes.Builder("SHA-256", 89);
        var2.hashForModule("jdk.management.jfr", new byte[]{-127, 94, 127, 54, -92, -79, 9, -63, -114, -48, 49, -57, -127, -49, 91, -119, 49, 81, 4, 122, -25, 64, 21, 71, -49, 80, 32, 6, -83, -12, -46, 74});
        var2.hashForModule("java.rmi", new byte[]{0, 70, 73, -86, -28, 65, 106, -91, 108, 59, 34, -31, 29, -98, 26, 56, 115, 116, -114, -38, -39, -59, -18, -117, -1, -104, -15, 80, 26, -57, -6, -63});
        var2.hashForModule("jdk.jdi", new byte[]{5, 27, 32, -17, -115, -1, 6, 92, 57, 79, 10, 96, 65, 94, 87, -97, 21, -23, -107, -119, 74, -88, 80, 71, -28, -48, 117, 49, -75, -4, -121, 113});
        var2.hashForModule("jdk.charsets", new byte[]{11, 68, -39, -2, 114, 24, -107, -22, 44, 58, -120, -88, 85, -103, -5, 100, -91, 26, -14, -41, -87, -47, -97, 94, 15, 125, 50, -37, 46, -18, -34, -84});
        var2.hashForModule("jdk.pack", new byte[]{-63, 78, -73, 61, 45, 13, -115, -16, 73, -65, 110, -80, 8, -26, 66, -77, 116, -32, 67, -96, -89, 9, -20, 0, 50, -81, -52, 47, 40, 21, 111, -12});
        var2.hashForModule("java.xml", new byte[]{-86, 105, -44, 107, -91, 110, 41, -111, 16, -24, -86, -27, 12, -78, -63, -12, 92, -116, -128, 82, 34, 33, 85, -26, 97, 0, 93, 13, 4, 47, -43, 90});
        var2.hashForModule("jdk.xml.dom", new byte[]{-5, -2, 107, -35, 31, -66, -77, -17, -118, -1, 33, 5, -69, 56, 40, 11, 15, 10, 126, -65, 120, -107, 39, -116, 88, 115, 18, -82, 53, 107, 43, 83});
        var2.hashForModule("jdk.rmic", new byte[]{-104, -44, -102, 28, -122, -64, 25, 2, -68, 49, 98, -70, -26, -78, 121, 6, 37, 74, 89, 37, -41, -94, -50, 32, 12, 49, 116, 5, -2, 59, -12, -122});
        var2.hashForModule("java.datatransfer", new byte[]{120, 76, 29, 54, -58, -120, -97, 6, -44, -127, -34, 14, -35, -66, 71, -45, -65, -87, 127, -103, -66, -64, -45, 79, -40, 58, 87, -59, 55, 55, 113, -28});
        var2.hashForModule("jdk.jstatd", new byte[]{-19, -22, -96, 23, -10, -61, -78, 64, 120, -126, 4, 67, -111, -105, 31, 96, 16, -118, -41, 24, 13, 25, 91, -106, -122, 101, -20, -69, -50, -32, 58, -46});
        var2.hashForModule("jdk.httpserver", new byte[]{66, -68, -70, 33, -17, 5, -97, 84, -33, 2, -32, 39, 22, 46, 98, 47, 34, 18, 80, -91, -128, -39, 50, -51, -31, -31, -50, -96, 119, 17, -28, -81});
        var2.hashForModule("jdk.jcmd", new byte[]{-112, 114, -103, -12, 87, 44, 88, -15, -86, -19, 68, -21, 80, 115, -15, 125, -115, 36, -45, 17, 77, -55, 54, 66, 11, -32, -66, -59, 54, 82, 27, 36});
        var2.hashForModule("java.desktop", new byte[]{110, -8, 32, 96, 36, -49, 108, -111, 100, -84, -26, -21, -128, 50, 113, -76, 119, 47, 70, 41, -124, 90, -4, -121, -11, -123, -109, 106, 20, 71, -47, 31});
        var2.hashForModule("java.se", new byte[]{34, 83, -93, -49, 113, -107, -111, 87, -38, -57, 124, 53, 25, 122, 35, 16, -31, -106, 41, 13, 43, 33, -16, -96, -124, 90, 29, 43, -108, 51, 79, 120});
        var2.hashForModule("java.security.sasl", new byte[]{65, -5, -12, 75, 81, 115, 30, -50, -109, -69, 120, -67, 104, -126, 7, 121, -18, 50, 2, -74, 99, -28, 24, 74, 28, -22, -62, 70, 47, -97, -56, -69});
        var2.hashForModule("jdk.zipfs", new byte[]{9, 106, 24, 94, 111, -128, 86, -34, 5, -29, -85, 23, 16, 111, 22, -120, -94, -20, 20, 99, -58, -48, 64, -69, -13, 89, 112, -61, -52, 71, -57, 24});
        var2.hashForModule("jdk.crypto.ec", new byte[]{42, 69, 91, 1, 127, 75, 127, 23, 127, 55, -55, 59, 64, 27, 59, -44, -122, -91, 78, -123, -50, 86, -124, -98, 123, 121, -29, 120, 118, 12, -83, 30});
        var2.hashForModule("jdk.javadoc", new byte[]{116, 45, 104, 12, -128, 5, -76, -98, -11, -114, -98, 20, 28, 2, -73, 14, -113, 64, 44, -100, -121, 83, -77, -15, 0, -79, 56, 44, -107, 22, -71, -90});
        var2.hashForModule("jdk.management.agent", new byte[]{-118, -27, 62, -20, -94, 104, 102, 55, -1, 63, -112, 72, -107, 51, -27, 35, -92, 88, -80, -84, -3, 16, -41, -4, 86, -121, -27, -100, -44, 44, -1, 58});
        var2.hashForModule("jdk.jshell", new byte[]{-94, 76, 0, -30, -105, -72, -45, 56, 50, 108, 35, 7, -111, 65, 90, -17, 0, 115, 42, 50, -25, -5, -63, -28, 49, -39, -68, 55, 17, -62, -127, 9});
        var2.hashForModule("jdk.editpad", new byte[]{59, 112, 100, -59, -85, -38, 30, 28, 2, -91, -9, 86, 70, -45, -98, 43, -124, -3, -17, 56, 41, 109, -96, -105, 92, -47, 122, 17, -79, -4, 125, -67});
        var2.hashForModule("jdk.jsobject", new byte[]{8, 65, 40, 118, -1, 109, 110, -128, 50, -119, 18, 10, -109, -118, -11, 84, 34, -79, -47, 29, -102, -112, 55, 92, -53, 9, 84, -117, 73, -41, -104, 38});
        var2.hashForModule("java.sql.rowset", new byte[]{19, 42, -56, -80, 29, 112, 104, -63, -49, 76, 77, 74, -85, -30, -52, 66, -26, -13, 19, -77, -5, -52, 79, -55, 125, -77, -54, 91, -124, -37, -40, -120});
        var2.hashForModule("jdk.sctp", new byte[]{-90, 71, 79, -128, -55, -109, 125, 76, -47, -18, 92, -85, -55, -93, 94, 107, 9, -6, -14, 79, -51, 96, 33, -18, -70, 21, -17, -3, 14, -73, -11, -13});
        var2.hashForModule("jdk.jlink", new byte[]{-97, 61, -15, 40, 4, 49, 85, -124, -91, -90, 29, -30, 62, 110, -59, -58, 106, 105, -52, 89, 118, -48, -67, 44, 92, -64, -70, 77, -120, 95, -119, 79});
        var2.hashForModule("jdk.unsupported", new byte[]{-32, 11, -90, 119, 36, 50, 64, 75, -54, 64, -4, -84, 107, -60, 34, -98, 98, -5, 76, -112, -38, -87, 48, 27, 30, 9, -77, -113, -5, -109, -64, -75});
        var2.hashForModule("java.smartcardio", new byte[]{12, -5, 21, 61, -81, -95, 108, -37, -38, 60, 83, 30, 94, -72, -73, 113, 24, 70, -55, -35, 23, -94, 124, 53, 22, 1, -38, 122, 20, 9, -112, -72});
        var2.hashForModule("jdk.scripting.nashorn", new byte[]{103, 2, -87, 55, -56, 59, -18, -127, 95, 43, 76, 99, -94, 79, 123, 120, 91, 13, 101, -9, -26, 46, -107, 13, -15, -64, 59, -89, 58, -117, -25, -17});
        var2.hashForModule("jdk.scripting.nashorn.shell", new byte[]{7, 47, -126, -4, 69, 122, 32, 92, 127, -7, -13, 31, 0, -14, 58, 34, 51, -119, -55, -67, -25, 52, 90, -120, -94, 86, 58, -37, -5, 72, -57, 84});
        var2.hashForModule("java.security.jgss", new byte[]{-87, -39, 71, -6, 78, -120, -86, -83, -62, -74, 52, 38, 124, -99, -8, 50, 42, -100, -89, 60, -32, 67, 97, -118, -35, -119, 114, 114, 86, -108, -86, 78});
        var2.hashForModule("jdk.dynalink", new byte[]{30, 52, 111, 49, 117, 75, 46, 82, -46, -9, 14, 95, 97, 19, -106, -83, 41, 2, -63, 102, 118, -103, 11, 70, -119, -23, 94, 117, -54, -62, 57, 63});
        var2.hashForModule("jdk.unsupported.desktop", new byte[]{24, 42, -108, 50, -116, -44, -107, -54, -48, -17, -46, 104, -45, 9, -35, 106, -118, 71, -76, 89, -41, -50, 65, -83, 81, -98, -95, 14, -3, -25, -125, -36});
        var2.hashForModule("jdk.accessibility", new byte[]{-60, 70, 35, -108, 51, 127, 36, 38, 66, 36, -64, -24, 7, -1, -109, -98, 87, 31, 105, 81, -78, 28, 2, -113, -42, 114, 111, -5, 32, 105, 49, -69});
        var2.hashForModule("jdk.security.jgss", new byte[]{-16, -13, -49, 33, 60, 82, -112, -92, -30, 93, -38, 100, -24, 119, 96, -5, -57, -117, 67, -85, -42, -58, 95, 54, -126, -97, -74, -118, -81, 52, 17, -113});
        var2.hashForModule("java.sql", new byte[]{-55, 35, 97, 67, 34, 127, -99, 10, -48, -23, -44, 48, -32, -34, -101, -65, -64, 121, -73, -126, 99, 89, 0, -121, 108, -20, -32, 91, -121, -101, -116, -76});
        var2.hashForModule("jdk.hotspot.agent", new byte[]{-44, -55, 113, -124, 9, -102, 54, 69, -60, 97, -27, -40, -16, -98, 46, -47, -38, 83, -37, 98, -125, 70, 9, -18, -91, -65, 83, 43, 44, -73, 34, 110});
        var2.hashForModule("java.logging", new byte[]{-41, -76, 33, -46, -64, -19, -12, 89, -23, 87, 44, 58, -112, 16, 11, 6, 110, 116, 4, -43, -88, 11, -116, 127, -120, -12, 25, -38, -122, -27, 59, -112});
        var2.hashForModule("java.xml.crypto", new byte[]{44, -58, 2, -55, 61, 51, -100, -64, -104, -99, 111, 53, -107, -92, 122, -100, -119, -101, -47, 43, -71, 63, -75, 44, 20, 36, -13, -39, 36, 85, 11, 113});
        var2.hashForModule("java.transaction.xa", new byte[]{46, -104, -78, -49, -49, -13, -123, -10, -2, -47, -127, 121, -5, 51, -69, 122, 27, -18, 110, -56, 70, 46, 52, -76, -34, 4, -62, 96, 54, -10, -34, 36});
        var2.hashForModule("jdk.jfr", new byte[]{91, 37, -2, -29, 124, -40, -74, 26, 121, -71, 113, 93, 37, 71, -38, -95, 45, -118, 58, -87, -22, -13, 14, 104, 119, 103, 51, -71, -16, 68, -112, 57});
        var2.hashForModule("jdk.internal.vm.ci", new byte[]{21, -52, 66, 27, 122, 86, 103, 104, 99, -63, -6, -39, -40, 22, -65, 52, -46, 120, 91, 85, -124, 124, 1, -40, -117, -79, -61, -6, 108, 93, 42, 102});
        var2.hashForModule("jdk.crypto.cryptoki", new byte[]{36, -33, 54, 122, 22, 87, 115, 49, -54, 99, 107, 3, -115, -49, -125, 69, 104, -45, -108, -45, -29, 13, 90, -25, -88, 116, 90, -87, 71, -21, 122, 81});
        var2.hashForModule("jdk.net", new byte[]{-61, -125, -57, -46, -16, 50, -42, -76, 40, 23, 106, 101, 95, 15, 72, 97, 25, 125, 30, 56, 52, 97, 107, -68, -116, 100, 52, 46, 30, 111, 19, 9});
        var2.hashForModule("java.naming", new byte[]{98, -16, -46, -56, 108, 7, -102, -76, -96, -15, 0, -6, 127, 102, 71, -127, -84, 64, -4, -66, 105, 53, 97, 102, -87, 79, -92, 0, -2, -96, -38, -120});
        var2.hashForModule("jdk.internal.ed", new byte[]{51, 54, 53, -42, -64, -54, -123, 52, 20, -58, 115, -106, 70, -98, -81, 19, -96, 84, 41, 14, 36, -67, -125, 80, -116, -120, -47, -100, -79, -3, -63, -72});
        var2.hashForModule("java.prefs", new byte[]{-73, -26, 83, -53, -83, 46, -18, 7, -17, 94, -88, 38, 23, -128, 112, 28, -97, 89, 4, -112, -114, 48, -97, 125, 37, -35, -113, -108, 107, 45, -40, -75});
        var2.hashForModule("java.net.http", new byte[]{-4, 112, 58, 9, 113, 69, 66, -6, -47, -37, 79, 3, -51, 62, 62, 17, -108, 62, -37, -27, -34, 28, 15, -106, 29, 42, -27, 121, 24, 98, 73, 49});
        var2.hashForModule("jdk.compiler", new byte[]{-126, -102, -57, -36, -15, 68, 28, 34, -91, 82, -38, -33, -19, -126, 43, -111, 115, -68, 5, 12, -2, 101, -114, 104, -68, -30, 30, -72, -25, -28, -5, -128});
        var2.hashForModule("jdk.naming.rmi", new byte[]{18, 112, 99, -114, -75, 27, -111, 67, 15, -83, -58, -61, 68, -4, 96, -112, -118, -97, -16, 21, -29, -24, 85, 42, 61, -11, -105, -101, 110, 22, -46, 25});
        var2.hashForModule("jdk.internal.opt", new byte[]{34, -102, -18, -101, 49, 93, 75, -128, -29, 66, 121, -109, -104, 121, -33, -89, 80, -44, -80, -19, 28, 74, 120, -68, -13, -72, 78, 44, 113, 96, -95, 71});
        var2.hashForModule("jdk.jconsole", new byte[]{-84, 84, -116, -4, -60, -42, -63, 55, -103, 85, 69, 28, 71, 107, -64, 101, -14, 55, 19, 27, -109, 3, 81, -7, -99, 92, 11, 59, 119, -86, -27, 51});
        var2.hashForModule("jdk.attach", new byte[]{19, 3, 22, -44, -37, 91, -40, 108, -41, -100, -74, -30, -24, -13, -28, -46, 38, 75, 55, -78, 54, -71, -82, -35, 19, -21, -120, -38, -122, 58, -71, -42});
        var2.hashForModule("jdk.crypto.mscapi", new byte[]{-77, 120, 34, 96, -65, 28, -11, 40, -117, -29, 5, 77, -119, -108, 19, -57, 22, 104, -65, -30, -65, 41, -17, 33, 85, -68, -80, -25, 5, -38, -77, -88});
        var2.hashForModule("jdk.internal.le", new byte[]{69, -35, 45, -114, -49, 62, 86, 32, -16, -73, -128, -9, 8, -94, 117, -93, -47, -85, -89, 82, -52, -15, -7, -96, -9, 25, -21, 35, 29, 82, 89, -32});
        var2.hashForModule("java.management", new byte[]{53, 19, -44, 114, 38, 28, -106, 87, -3, 83, 31, 73, 69, 119, 63, -20, 89, 62, -42, 125, 76, 75, 69, -86, 47, 28, 50, -21, -37, 11, -5, 92});
        var2.hashForModule("jdk.jdwp.agent", new byte[]{-9, -48, -28, 53, -11, 61, -62, 81, 124, -23, -88, -7, -106, 121, 126, -121, -60, -84, -120, 89, 91, -87, -127, -95, 38, -25, -79, -94, -15, 115, -13, -58});
        var2.hashForModule("jdk.internal.jvmstat", new byte[]{31, 117, -66, 109, 5, -49, -109, 113, 42, -33, 116, 86, 98, 88, -66, 57, 8, -31, -46, -47, -5, -2, -57, 51, 43, 10, -124, 67, -127, 87, 65, -61});
        var2.hashForModule("java.instrument", new byte[]{99, -40, -68, 120, -37, 1, 14, -50, 100, -103, 21, 79, 125, -95, -5, 55, -85, -103, -4, 78, 56, -49, -109, 5, 46, 120, 104, 62, -82, -60, -56, -31});
        var2.hashForModule("jdk.management", new byte[]{84, 40, -24, 116, -49, 64, 7, -127, -12, -87, 7, -39, -81, -12, 102, 70, -79, 12, -124, -25, 119, -94, -10, -22, 73, 72, -29, -8, 39, -11, 71, 74});
        var2.hashForModule("jdk.security.auth", new byte[]{-113, -118, 112, 14, -21, 77, -72, -29, 109, -62, -74, 8, -115, 33, -49, 94, -22, -54, -105, -109, 68, -71, 81, 119, 35, 10, -109, -75, 64, 83, 25, -124});
        var2.hashForModule("java.scripting", new byte[]{4, -74, -80, 21, -46, -97, 126, 41, -15, -31, -85, 30, 55, -42, 127, 7, -20, -47, 86, 91, -115, -95, 12, 27, 97, -110, -47, -51, -113, 121, 69, -33});
        var2.hashForModule("jdk.jdeps", new byte[]{38, 17, 88, 95, -61, -89, -51, -25, 2, -70, 85, -16, 75, 119, -117, 125, 76, -2, 106, -21, -9, 82, -53, 80, 45, -54, -71, -40, -84, 66, -58, 18});
        var2.hashForModule("jdk.jartool", new byte[]{-110, 49, 33, 65, -57, -39, -39, -89, 108, -109, -73, 122, 87, 105, -11, 41, -35, -18, -34, 102, 78, 15, -120, -104, 94, 105, 84, -83, 34, 122, 65, -105});
        var2.hashForModule("java.management.rmi", new byte[]{-38, -62, -17, -50, 106, 62, 114, 68, -66, -121, 116, -105, -87, -103, 37, 89, 3, -82, -76, -111, -30, 48, 5, -124, -70, 43, -91, -29, -36, 122, -30, -65});
        var2.hashForModule("jdk.naming.dns", new byte[]{-71, 91, 9, 101, -50, -33, 111, -122, -22, -112, 123, 54, 90, -92, -2, 34, 100, -33, -76, -27, -102, -109, 51, -67, -64, 12, -10, -46, 125, -75, 90, 99});
        var2.hashForModule("jdk.localedata", new byte[]{36, -47, -2, -13, 31, 48, -82, -68, -41, -119, 66, -16, 47, -44, 20, -28, 122, -45, 111, -121, -32, -22, 106, 58, -23, 85, 70, 23, 125, -76, 50, 125});
        var1[0] = var2.build();
        return var1;
    }
    
    public ModuleResolution[] moduleResolutions() {
        ModuleResolution[] var1 = new ModuleResolution[61];
        return var1;
    }
    
    public Map moduleReads() {
        Set var1 = Set.of("java.naming", "java.base");
        Set var2 = Set.of("java.logging", "java.base");
        Set var3 = Set.of("java.base");
        Set var4 = Set.of("java.xml", "java.base");
        Set var5 = Set.of("java.desktop", "java.xml", "java.datatransfer", "java.base");
        return Map.ofEntries(Map.entry("java.rmi", var2), Map.entry("jdk.management.jfr", Set.of("jdk.management", "java.management", "jdk.jfr", "java.base")), Map.entry("jdk.jdi", Set.of("jdk.jdwp.agent", "jdk.attach", "java.base")), Map.entry("jdk.charsets", var3), Map.entry("java.xml", var3), Map.entry("jdk.xml.dom", var4), Map.entry("java.datatransfer", var3), Map.entry("jdk.jstatd", Set.of("java.rmi", "jdk.internal.jvmstat", "java.base")), Map.entry("jdk.httpserver", var3), Map.entry("java.desktop", Set.of("java.prefs", "java.xml", "java.datatransfer", "java.base")), Map.entry("java.security.sasl", var2), Map.entry("jdk.zipfs", var3), Map.entry("java.base", Set.of()), Map.entry("jdk.crypto.ec", var3), Map.entry("jdk.javadoc", Set.of("java.compiler", "java.xml", "jdk.compiler", "java.base")), Map.entry("jdk.management.agent", Set.of("java.rmi", "java.management", "java.management.rmi", "java.base")), Map.entry("jdk.jshell", Set.of("jdk.jdi", "java.compiler", "jdk.internal.ed",
        "java.prefs", "java.logging", "jdk.internal.le", "jdk.compiler", "jdk.internal.opt", "java.base")), Map.entry("jdk.editpad", Set.of("java.desktop", "jdk.internal.ed", "java.xml", "java.datatransfer", "java.base")), Map.entry("jdk.sctp", var3), Map.entry("jdk.jsobject", var5), Map.entry("java.sql.rowset", Set.of("java.sql", "java.naming", "java.transaction.xa", "java.logging", "java.xml", "java.base")), Map.entry("jdk.jlink", Set.of("jdk.jdeps", "jdk.internal.opt", "java.base")), Map.entry("java.smartcardio", var3), Map.entry("jdk.unsupported", var3), Map.entry("jdk.scripting.nashorn", Set.of("java.scripting", "jdk.dynalink", "java.logging", "java.base")), Map.entry("java.security.jgss", var1), Map.entry("java.compiler", var3), Map.entry("jdk.dynalink", var2), Map.entry("jdk.unsupported.desktop", var5), Map.entry("jdk.accessibility", var5), Map.entry("jdk.security.jgss", Set.of("java.security.jgss", "java.logging", "java.security.sasl", "java.base")), Map.entry("java.sql",
         Set.of("java.transaction.xa", "java.logging", "java.xml", "java.base")), Map.entry("java.logging", var3), Map.entry("java.transaction.xa", var3), Map.entry("java.xml.crypto", Set.of("java.logging", "java.xml", "java.base")), Map.entry("jdk.jfr", var3), Map.entry("jdk.crypto.cryptoki", Set.of("java.base", "jdk.crypto.ec")), Map.entry("jdk.net", var3), Map.entry("java.naming", Set.of("java.security.sasl", "java.base")), Map.entry("jdk.internal.ed", var3), Map.entry("java.prefs", var4), Map.entry("java.net.http", var3), Map.entry("jdk.compiler", Set.of("java.compiler", "java.base")), Map.entry("jdk.internal.opt", var3), Map.entry("jdk.naming.rmi", Set.of("java.rmi", "java.naming", "java.base")), Map.entry("jdk.jconsole", Set.of("java.rmi", "jdk.management", "jdk.management.agent", "java.desktop", "java.management", "java.xml", "jdk.attach", "java.datatransfer", "java.management.rmi", "jdk.internal.jvmstat", "java.base")), Map.entry("jdk.attach", Set.of("jdk.internal.jvmstat",
         "java.base")), Map.entry("jdk.crypto.mscapi", var3), Map.entry("jdk.internal.le", var3), Map.entry("java.management", var3), Map.entry("jdk.jdwp.agent", var3), Map.entry("jdk.internal.jvmstat", var3), Map.entry("java.instrument", var3), Map.entry("jdk.management", Set.of("java.management", "java.base")), Map.entry("jdk.security.auth", Set.of("java.security.jgss", "java.naming", "java.base")), Map.entry("java.scripting", var3), Map.entry("jdk.jdeps", Set.of("java.compiler", "jdk.compiler", "java.base")), Map.entry("jdk.jartool", var3), Map.entry("java.management.rmi", Set.of("java.rmi", "java.naming", "java.management", "java.base")), Map.entry("jdk.naming.dns", var1), Map.entry("jdk.localedata", var3));
    }
    
    public Map concealedPackagesToOpen() {
        return Map.ofEntries(Map.entry("java.rmi", Set.of("sun.rmi.transport.tcp", "sun.rmi.server", "sun.rmi.registry", "sun.rmi.runtime", "sun.rmi.log", "com.sun.rmi.rmid", "sun.rmi.transport")), Map.entry("jdk.jdi", Set.of("com.sun.tools.jdi", "com.sun.tools.jdi.resources", "com.sun.tools.example.debug.tty", "com.sun.tools.example.debug.expr")), Map.entry("jdk.charsets", Set.of("sun.nio.cs.ext")), Map.entry("java.logging", Set.of("sun.net.www.protocol.http.logging", "sun.util.logging.resources")), Map.entry("java.xml.crypto", Set.of("com.sun.org.apache.xml.internal.security.keys.content.keyvalues", "com.sun.org.apache.xml.internal.security.keys.storage.implementations", "com.sun.org.apache.xml.internal.security.transforms.params", "com.sun.org.apache.xml.internal.security.algorithms", "com.sun.org.apache.xml.internal.security.keys.content", "com.sun.org.apache.xml.internal.security.transforms", "org.jcp.xml.dsig.internal.dom", "com.sun.org.apache.xml.internal.security.keys" +
        ".keyresolver.implementations", "com.sun.org.apache.xml.internal.security.keys.storage", "com.sun.org.apache.xml.internal.security.signature", "com.sun.org.apache.xml.internal.security.utils.resolver.implementations", "com.sun.org.apache.xml.internal.security.transforms.implementations", "com.sun.org.apache.xml.internal.security.utils", "com.sun.org.apache.xml.internal.security.c14n.helper", "com.sun.org.apache.xml.internal.security.exceptions", "com.sun.org.apache.xml.internal.security", "com.sun.org.apache.xml.internal.security.keys.keyresolver", "com.sun.org.apache.xml.internal.security.signature.reference", "com.sun.org.apache.xml.internal.security.c14n.implementations", "org.jcp.xml.dsig.internal", "com.sun.org.apache.xml.internal.security.keys", "com.sun.org.apache.xml.internal.security.utils.resolver", "com.sun.org.apache.xml.internal.security.keys.content.x509", "com.sun.org.apache.xml.internal.security.c14n", "com.sun.org.apache.xml.internal.security.algorithms" +
        ".implementations")), Map.entry("java.xml", Set.of("com.sun.org.apache.xml.internal.dtm.ref.sax2dtm", "com.sun.org.apache.bcel.internal.generic", "com.sun.org.apache.xalan.internal.lib", "com.sun.org.apache.xalan.internal.xsltc.trax", "com.sun.org.apache.xerces.internal.impl.dv", "com.sun.xml.internal.stream.writers", "com.sun.org.apache.xerces.internal.xs.datatypes", "com.sun.org.apache.xerces.internal.impl.validation", "com.sun.org.apache.xerces.internal.impl.xs.util", "com.sun.org.apache.xerces.internal.jaxp.validation", "com.sun.org.apache.xpath.internal.compiler", "com.sun.org.apache.xpath.internal.functions", "com.sun.org.apache.xml.internal.dtm.ref.dom2dtm", "com.sun.org.apache.xalan.internal", "com.sun.org.apache.xerces.internal.xni.grammars", "com.sun.org.apache.xml.internal.utils", "com.sun.org.apache.xerces.internal.impl.io", "com.sun.org.apache.xerces.internal.impl", "com.sun.org.apache.xerces.internal.impl.xpath",
         "com.sun.org.apache.xerces.internal.impl.xpath" + ".regex", "com.sun.org.apache.xalan.internal.xsltc", "com.sun.org.apache.xerces.internal.impl.xs.identity", "com.sun.org.apache.xalan.internal.templates", "com.sun.xml.internal.stream.util", "com.sun.org.apache.xalan.internal.xsltc.runtime.output", "com.sun.org.apache.xerces.internal.parsers", "com.sun.org.apache.xerces.internal.xpointer", "com.sun.org.apache.xpath.internal.objects", "com.sun.org.apache.xalan.internal.xsltc.dom", "com.sun.org.apache.bcel.internal.classfile", "com.sun.org.apache.xml.internal.serializer", "com.sun.org.apache.xerces.internal.impl.dv.dtd", "com.sun.org.apache.xml.internal.utils.res", "com.sun.xml.internal.stream", "com.sun.org.apache.xerces.internal.impl.msg", "com.sun.xml.internal.stream.events", "com.sun.org.apache.xerces.internal.utils", "com.sun.org.apache.xml.internal.res", "com.sun.org.apache.xerces.internal.impl.dv.xs", "com.sun.org.apache.xerces.internal.impl.xs", "com.sun.org.apache" +
         ".xerces.internal.xni", "com.sun.java_cup.internal" + ".runtime", "com.sun.org.apache.xalan.internal.extensions", "com.sun.org.apache.xpath.internal.patterns", "com.sun.org.apache.xpath.internal.operations", "com.sun.org.apache.xpath.internal", "com.sun.xml.internal.stream.dtd.nonvalidating", "com.sun.org.apache.xerces.internal.dom", "com.sun.org.apache.xalan.internal.xsltc.runtime", "com.sun.org.apache.xerces.internal.xni.parser", "com.sun.org.apache.xerces.internal.impl.xs.traversers", "com.sun.org.apache.xalan.internal.xsltc.util", "com.sun.org.apache.xpath.internal.axes", "com.sun.org.apache.xml.internal.serialize", "com.sun.xml.internal.stream.dtd", "com.sun.org.apache.xerces.internal.impl.dv.util", "com.sun.org.apache.xerces.internal.impl.dtd.models", "com.sun.org.apache.xalan.internal.utils", "com.sun.org.apache.xerces.internal.jaxp", "com.sun.org.apache.xpath.internal.res", "com.sun.org.apache.xml.internal.dtm.ref", "com.sun.org.apache.xpath.internal.jaxp", "com" +
         ".sun.org.apache.xerces.internal.impl.xs.opti", "com.sun" + ".org.apache.xerces.internal.jaxp.datatype", "com.sun.org.apache.xerces.internal.xinclude", "com.sun.org.apache.xalan.internal.res", "com.sun.org.apache.bcel.internal.util", "com.sun.org.apache.xalan.internal.xsltc.compiler", "com.sun.org.apache.xerces.internal.dom.events", "com.sun.org.apache.xml.internal.serializer.utils", "com.sun.org.apache.xml.internal.dtm", "com.sun.org.apache.xalan.internal.xsltc.compiler.util", "com.sun.org.apache.xerces.internal.impl.xs.models", "com.sun.org.apache.xerces.internal.xs", "com.sun.org.apache.bcel.internal", "com.sun.org.apache.xerces.internal.impl.dtd", "com.sun.org.apache.xerces.internal.util")), Map.entry("jdk.jfr", Set.of("jdk.jfr.events")), Map.entry("jdk.jstatd", Set.of("sun.jvmstat.perfdata.monitor.protocol.rmi", "sun.jvmstat.monitor.remote", "sun.tools.jstatd")), Map.entry("jdk.httpserver", Set.of("sun.net.httpserver")), Map.entry("jdk.crypto.cryptoki", Set.of("sun" +
         ".security.pkcs11.wrapper", "sun.security.pkcs11")), Map.entry("java.naming", Set.of("com.sun.jndi.ldap.sasl", "com.sun.jndi.url.ldap", "sun.security.provider.certpath.ldap", "com.sun.jndi.ldap", "com.sun.jndi.toolkit.url", "com.sun.naming.internal", "com.sun.jndi.ldap.pool", "com.sun.jndi.toolkit.dir", "com.sun.jndi.ldap.ext", "com.sun.jndi.toolkit.ctx", "com.sun.jndi.url.ldaps")), Map.entry("java.desktop", Set.of("com.sun.beans.decoder", "com.sun.java.swing.plaf.windows.resources", "com.sun.imageio.plugins.bmp", "com.sun.java.swing.plaf.windows", "com.sun.swing.internal.plaf.metal.resources", "com.sun.beans", "com.sun.imageio.plugins.wbmp", "sun.awt.image", "sun.awt.geom", "sun.java2d", "com.sun.beans.finder", "sun.awt.windows", "sun.swing.table", "java.awt.dnd.peer", "sun.awt.event", "sun.swing.plaf.synth", "sun.swing.plaf.windows", "java.awt.peer", "sun.java2d.pipe", "sun.java2d.pipe.hw", "sun.java2d.d3d", "sun.awt.datatransfer", "sun.java2d.windows", "sun.swing" +
         ".icon", "com.sun.java.swing.plaf.motif.resources", "com" + ".sun.imageio.plugins.gif", "com.sun.imageio.spi", "com.sun.java.swing", "com.sun.beans.util", "com.sun.swing.internal.plaf.basic.resources", "sun.awt.im", "sun.print.resources", "sun.java2d.cmm.lcms", "sun.awt.util", "sun.awt", "sun.java2d.loops", "com.sun.imageio.plugins.common", "sun.awt.resources", "com.sun.accessibility.internal.resources", "sun.awt.shell", "com.sun.imageio.plugins.jpeg", "com.sun.swing.internal.plaf.synth.resources", "sun.java2d.cmm", "com.sun.awt", "com.sun.imageio.plugins.png", "sun.applet", "sun.swing.plaf", "sun.swing.text.html", "com.sun.imageio.stream", "sun.swing.text", "sun.awt.dnd", "sun.java2d.opengl", "sun.print", "com.sun.beans.infos", "sun.font", "sun.swing", "com.sun.beans.editors", "com.sun.java.swing.plaf.motif", "com.sun.media.sound")), Map.entry("jdk.compiler", Set.of("com.sun.tools.javac.tree", "com.sun.tools.javac.main", "com.sun.tools.javac.parser", "com.sun.tools" +
         ".javac.processing", "com.sun.tools.javac.file", "com.sun.tools" + ".javac.api", "com.sun.tools.doclint", "com.sun.tools.doclint.resources", "com.sun.tools.javac.jvm", "com.sun.tools.javac.model", "com.sun.tools.javac.comp", "com.sun.tools.javac.code", "com.sun.tools.javac.resources", "sun.tools.serialver", "com.sun.tools.javac.util")), Map.entry("java.security.sasl", Set.of("com.sun.security.sasl.ntlm", "com.sun.security.sasl", "com.sun.security.sasl.util", "com.sun.security.sasl.digest")), Map.entry("jdk.naming.rmi", Set.of("com.sun.jndi.rmi.registry", "com.sun.jndi.url.rmi")), Map.entry("jdk.jconsole", Set.of("sun.tools.jconsole.inspector", "sun.tools.jconsole")), Map.entry("jdk.attach", Set.of("sun.tools.attach")), Map.entry("java.base", Set.of("sun.security.ssl", "sun.reflect.annotation", "sun.reflect.generics.tree", "sun.reflect.generics.scope", "sun.security.validator", "sun.net.ftp", "sun.net.www.protocol.http", "sun.util.logging", "com.sun.net.ssl", "sun" +
         ".security.provider.certpath", "sun.security.tools", "sun.net.www" + ".content.text", "sun.net.www.protocol.https", "sun.security.provider.certpath.ssl", "sun.invoke", "sun.reflect.generics.parser", "jdk.internal.util.xml.impl", "sun.reflect.generics.reflectiveObjects", "com.sun.security.cert.internal.x509", "sun.net.ftp.impl", "sun.security.provider", "sun.invoke.util", "sun.security.pkcs12", "jdk.internal.org.xml.sax.helpers", "sun.security.pkcs10", "com.sun.crypto.provider", "com.sun.net.ssl.internal.ssl", "sun.net.www.protocol.file", "sun.security.pkcs", "sun.net.smtp", "jdk.internal.org.objectweb.asm.commons", "sun.net.www.protocol.mailto", "sun.security.internal.spec", "sun.security.x509", "com.sun.net.ssl.internal.www.protocol.https", "sun.net.sdp", "sun.net.idn", "sun.reflect.generics.factory", "jdk.internal.util.xml", "jdk.internal.org.objectweb.asm.signature", "sun.util", "sun.security.rsa", "sun.util.locale.provider", "sun.invoke.empty", "sun.net.www" +
         ".protocol.ftp", "sun.security.jca", "sun.util.spi", "sun.security" + ".timestamp", "sun.security.tools.keytool", "sun.security.util", "jdk.internal.org.objectweb.asm.tree.analysis", "sun.security.internal.interfaces", "sun.util.cldr", "sun.net", "sun.util.resources", "sun.nio", "sun.text.normalizer", "sun.launcher", "sun.security.action", "sun.net.www", "jdk.internal.org.xml.sax", "sun.launcher.resources", "jdk.internal.org.objectweb.asm.util", "sun.net.spi", "sun.net.www.http", "sun.net.dns", "sun.text", "sun.util.locale", "sun.nio.fs", "sun.reflect.generics.repository", "sun.text.resources", "sun.net.util", "com.sun.security.ntlm", "sun.net.www.protocol.jar", "sun.reflect.generics.visitor", "sun.util.calendar", "sun.io", "sun.net.www.protocol.http.ntlm", "jdk.internal.org.objectweb.asm.tree", "sun.reflect.misc", "sun.nio.ch", "jdk.internal.org.objectweb.asm", "sun.nio.cs", "sun.text.bidi", "com.sun.java.util.jar.pack", "sun.usagetracker")), Map.entry("jdk.crypto" + ".ec"
         , Set.of("sun.security.ec")), Map.entry("jdk.javadoc", Set.of("com" + ".sun.tools.javadoc.resources", "com.sun.tools.doclets.standard")), Map.entry("jdk.management.agent", Set.of("sun.management.jmxremote", "sun.management.jdp")), Map.entry("jdk.crypto.mscapi", Set.of("sun.security.mscapi")), Map.entry("jdk.sctp", Set.of("sun.nio.ch.sctp")), Map.entry("java.sql.rowset", Set.of("com.sun.rowset", "com.sun.rowset.providers", "com.sun.rowset.internal")), Map.entry("java.management", Set.of("com.sun.jmx.remote.internal", "com.sun.jmx.remote.security", "sun.management", "sun.management.counter", "sun.management.counter.perf", "com.sun.jmx.defaults", "com.sun.jmx.remote.util", "com.sun.jmx.interceptor", "com.sun.jmx.mbeanserver")), Map.entry("java.smartcardio", Set.of("sun.security.smartcardio")), Map.entry("jdk.scripting.nashorn", Set.of("jdk.nashorn.internal.runtime.regexp", "jdk.nashorn.internal.runtime.regexp.joni.exception", "jdk.nashorn.internal.scripts",
          "jdk" + ".nashorn" + ".internal.ir.annotations", "jdk.nashorn.internal.codegen.types", "jdk.nashorn.internal.runtime.regexp.joni.encoding", "jdk.nashorn.internal.runtime.events", "jdk.nashorn.internal.runtime.regexp.joni.constants", "jdk.nashorn.internal.runtime.regexp.joni", "jdk.nashorn.tools", "jdk.nashorn.internal.ir", "jdk.nashorn.internal.runtime", "jdk.nashorn.internal.ir.visitor", "jdk.nashorn.internal.runtime.logging", "jdk.nashorn.internal.runtime.linker", "jdk.nashorn.internal.parser", "jdk.nashorn.internal", "jdk.nashorn.internal.runtime.regexp.joni.ast", "jdk.nashorn.internal.ir.debug", "jdk.nashorn.internal.lookup", "jdk.nashorn.internal.codegen", "jdk.nashorn.internal.objects", "jdk.nashorn.internal.objects.annotations", "jdk.nashorn.internal.runtime.arrays", "jdk.nashorn.internal.runtime.options")), Map.entry("jdk.internal.jvmstat", Set.of("sun.jvmstat.perfdata.monitor.protocol.local", "sun.jvmstat.perfdata.monitor.v1_0", "sun.jvmstat.monitor.event",
           "sun" + ".jvmstat.perfdata" + ".monitor.v2_0", "sun.jvmstat.perfdata.monitor", "sun.jvmstat" + ".monitor", "sun.jvmstat.perfdata.monitor.protocol.file")), Map.entry("java.instrument", Set.of("sun.instrument")), Map.entry("java.security.jgss", Set.of("sun.security.jgss.krb5", "sun.security.jgss", "sun.security.krb5.internal.tools", "sun.security.jgss.spi", "sun.security.jgss.wrapper", "sun.security.krb5.internal.rcache", "sun.security.krb5", "sun.security.krb5.internal.crypto", "sun.security.krb5.internal.crypto.dk", "sun.security.jgss.spnego", "sun.security.krb5.internal.ccache", "sun.security.krb5.internal.util", "sun.security.krb5.internal", "sun.net.www.protocol.http.spnego", "sun.security.krb5.internal.ktab")), Map.entry("java.scripting", Set.of("com.sun.tools.script.shell")), Map.entry("jdk.jdeps", Set.of("com.sun.tools.classfile", "com.sun.tools.jdeps", "com.sun.tools.jdeps.resources", "com.sun.tools.javap.resources", "com.sun.tools.javap")), Map.entry("jdk.jartool"
           , Set.of("sun.tools.jar" + ".resources", "sun.tools.jar", "sun.security.tools.jarsigner")), Map.entry("java.management.rmi", Set.of("com.sun.jmx.remote.protocol.rmi")), Map.entry("jdk.security.jgss", Set.of("com.sun.security.sasl.gsskerb")), Map.entry("jdk.naming.dns", Set.of("com.sun.jndi.url.dns", "com.sun.jndi.dns")));
    }
    
    public Map exportedPackagesToOpen() {
        return Map.ofEntries(Map.entry("java.sql", Set.of("java.sql", "javax.sql")), Map.entry("java.rmi", Set.of("java.rmi", "javax.rmi.ssl", "java.rmi.server", "java.rmi.activation", "java.rmi.registry", "java.rmi.dgc")), Map.entry("jdk.jdi", Set.of("com.sun.jdi.connect.spi", "com.sun.jdi.event", "com.sun.jdi", "com.sun.jdi.request", "com.sun.jdi.connect")), Map.entry("java.xml.crypto", Set.of("javax.xml.crypto.dsig.keyinfo", "javax.xml.crypto", "javax.xml.crypto.dsig.dom", "javax.xml.crypto.dom", "javax.xml.crypto.dsig", "javax.xml.crypto.dsig.spec")), Map.entry("java.transaction.xa", Set.of("javax.transaction.xa")), Map.entry("java.logging", Set.of("java.util.logging")), Map.entry("jdk.xml.dom", Set.of("org.w3c.dom.xpath", "org.w3c.dom.css", "org.w3c.dom.html", "org.w3c.dom.stylesheets")), Map.entry("java.xml", Set.of("javax.xml", "org.xml.sax.ext", "org.xml.sax.helpers", "javax.xml.validation", "org.w3c.dom", "javax.xml.transform.sax", "org.w3c.dom.ls", "javax.xml.stream",
        "javax.xml.transform.stax", "javax.xml.parsers", "javax.xml.transform.dom", "javax.xml.transform", "javax.xml.xpath", "org.w3c.dom.traversal", "org.w3c.dom.views", "org.w3c.dom.events", "javax.xml.namespace", "javax.xml.transform.stream", "javax.xml.datatype", "org.xml.sax", "javax.xml.stream.util", "javax.xml.stream.events", "org.w3c.dom.ranges", "org.w3c.dom.bootstrap")), Map.entry("java.datatransfer", Set.of("java.awt.datatransfer")), Map.entry("jdk.httpserver", Set.of("com.sun.net.httpserver.spi", "com.sun.net.httpserver")), Map.entry("jdk.net", Set.of("jdk.net")), Map.entry("java.naming", Set.of("javax.naming.directory", "javax.naming.ldap", "javax.naming.spi", "javax.naming", "javax.naming.event")), Map.entry("java.desktop", Set.of("java.applet", "javax.swing.colorchooser", "java.awt.image", "java.beans", "javax.swing.table", "javax.imageio.plugins.jpeg", "javax.print.event", "javax.imageio.spi", "javax.imageio.metadata", "javax.sound.midi", "javax.accessibility",
        "javax.imageio.stream", "java.awt.font", "javax.sound.midi.spi", "javax.swing.filechooser", "javax.imageio.plugins.bmp", "java.awt.im.spi", "java.beans.beancontext", "javax.sound.sampled.spi", "java.awt.dnd", "java.awt.geom", "javax.print.attribute.standard", "javax.imageio", "java.awt.im", "javax.swing.event", "javax.swing.text", "javax.sound.sampled", "java.awt.color", "javax.swing.text.html.parser", "javax.swing.plaf.synth", "java.awt", "javax.swing.text.rtf", "java.awt.print", "javax.swing.undo", "javax.swing.plaf", "javax.swing.text.html", "javax.swing.plaf.nimbus", "javax.swing.plaf.multi", "java.awt.event", "javax.imageio.event", "javax.swing.plaf.basic", "javax.print", "javax.swing.border", "javax.swing.plaf.metal", "javax.swing.tree", "java.awt.image.renderable", "javax.print.attribute", "javax.swing")), Map.entry("java.prefs", Set.of("java.util.prefs")), Map.entry("jdk.compiler", Set.of("com.sun.source.util", "com.sun.source.tree", "com.sun.tools.javac",
         "com.sun" + ".source.doctree")), Map.entry("java.security.sasl", Set.of("javax.security.sasl")), Map.entry("jdk.jconsole", Set.of("com.sun.tools.jconsole")), Map.entry("jdk.attach", Set.of("com.sun.tools.attach", "com.sun.tools.attach.spi")), Map.entry("java.base", Set.of("java.text.spi", "java.util.spi", "java.nio", "java.security.cert", "java.util.zip", "java.nio.file", "java.security.spec", "java.nio.file.spi", "java.lang.ref", "java.time", "java.net", "java.util.regex", "javax.security.auth.callback", "java.security.interfaces", "java.lang.reflect", "java.security", "java.time.format", "java.util.concurrent", "javax.security.auth.spi", "java.util.concurrent.locks", "java.lang", "java.util.function", "javax.net", "javax.crypto", "java.util", "javax.security.auth.x500", "java.security.acl", "java.util.stream", "java.lang.annotation", "java.nio.channels", "java.time.temporal", "java.nio.charset", "java.time.chrono", "java.time.zone", "java.lang.invoke", "javax.security" +
         ".auth", "java" + ".math", "javax.security.cert", "java.util.concurrent.atomic", "javax.crypto.spec", "java.text", "java.io", "java.nio.channels.spi", "java.util.jar", "javax.crypto.interfaces", "javax.net.ssl", "java.nio.charset.spi", "javax.security.auth.login", "java.nio.file.attribute")), Map.entry("jdk.javadoc", Set.of("com.sun.tools.javadoc", "com.sun.javadoc")), Map.entry("jdk.jsobject", Set.of("netscape.javascript")), Map.entry("java.sql.rowset", Set.of("javax.sql.rowset", "javax.sql.rowset.spi", "javax.sql.rowset.serial")), Map.entry("java.management", Set.of("javax.management.modelmbean", "java.lang.management", "javax.management", "javax.management.monitor", "javax.management.timer", "javax.management.loading", "javax.management.openmbean", "javax.management.remote", "javax.management.relation")), Map.entry("jdk.sctp", Set.of("com.sun.nio.sctp")), Map.entry("java.smartcardio", Set.of("javax.smartcardio")), Map.entry("jdk.unsupported", Set.of("com.sun.nio.file")),
          Map.entry("jdk" + ".scripting.nashorn", Set.of("jdk.nashorn.api.scripting")), Map.entry("java.instrument", Set.of("java.lang.instrument")), Map.entry("java.security.jgss", Set.of("org.ietf.jgss", "javax.security.auth.kerberos")), Map.entry("jdk.management", Set.of("com.sun.management")), Map.entry("java.compiler", Set.of("javax.annotation.processing", "javax.lang.model.util", "javax.lang.model", "javax.tools", "javax.lang.model.type", "javax.lang.model.element")), Map.entry("jdk.security.auth", Set.of("com.sun.security.auth.module", "com.sun.security.auth.callback", "com.sun.security.auth", "com.sun.security.auth.login")), Map.entry("java.scripting", Set.of("javax.script")), Map.entry("jdk.accessibility", Set.of("com.sun.java.accessibility.util")), Map.entry("jdk.jartool", Set.of("com.sun.jarsigner")), Map.entry("java.management.rmi", Set.of("javax.management.remote.rmi")), Map.entry("jdk.security.jgss", Set.of("com.sun.security.jgss")));
    }
}
