!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
ALLOC	Makefile	/^	echo MALLOC=$(MALLOC) >> .make-settings$/;"	m
ARN	Makefile	/^	echo WARN=$(WARN) >> .make-settings$/;"	m
BINCOLOR	Makefile	/^BINCOLOR="\\033[37;1m"$/;"	m
CCCOLOR	Makefile	/^CCCOLOR="\\033[34m"$/;"	m
DEBUG	Makefile	/^DEBUG=-g -ggdb$/;"	m
DEPENDENCY_TARGETS	Makefile	/^DEPENDENCY_TARGETS=hiredis linenoise lua geohash-int$/;"	m
DFLAGS	Makefile	/^	echo LDFLAGS=$(LDFLAGS) >> .make-settings$/;"	m
EDIS_CFLAGS	Makefile	/^	echo REDIS_CFLAGS=$(REDIS_CFLAGS) >> .make-settings$/;"	m
EDIS_LDFLAGS	Makefile	/^	echo REDIS_LDFLAGS=$(REDIS_LDFLAGS) >> .make-settings$/;"	m
ENDCOLOR	Makefile	/^ENDCOLOR="\\033[0m"$/;"	m
FINAL_CFLAGS	Makefile	/^FINAL_CFLAGS=$(STD) $(WARN) $(OPT) $(DEBUG) $(CFLAGS) $(REDIS_CFLAGS) -I..\/deps\/geohash-int$/;"	m
FINAL_LDFLAGS	Makefile	/^FINAL_LDFLAGS=$(LDFLAGS) $(REDIS_LDFLAGS) $(DEBUG)$/;"	m
FINAL_LIBS	Makefile	/^FINAL_LIBS=-lm$/;"	m
FLAGS	Makefile	/^	echo CFLAGS=$(CFLAGS) >> .make-settings$/;"	m
INSTALL	Makefile	/^	INSTALL=cp -pf$/;"	m
INSTALL	Makefile	/^INSTALL=install$/;"	m
INSTALL_BIN	Makefile	/^INSTALL_BIN=$(PREFIX)\/bin$/;"	m
LINKCOLOR	Makefile	/^LINKCOLOR="\\033[34;1m"$/;"	m
MAKECOLOR	Makefile	/^MAKECOLOR="\\033[32;1m"$/;"	m
MALLOC	Makefile	/^	MALLOC=jemalloc$/;"	m
MALLOC	Makefile	/^	MALLOC=libc$/;"	m
MALLOC	Makefile	/^	MALLOC=tcmalloc$/;"	m
MALLOC	Makefile	/^	MALLOC=tcmalloc_minimal$/;"	m
OPT	Makefile	/^OPT=$(OPTIMIZATION)$/;"	m
OPTIMIZATION	Makefile	/^OPTIMIZATION?=-O2$/;"	m
PREFIX	Makefile	/^PREFIX?=\/usr\/local$/;"	m
PT	Makefile	/^	echo OPT=$(OPT) >> .make-settings$/;"	m
QUIET_CC	Makefile	/^QUIET_CC = @printf '    %b %b\\n' $(CCCOLOR)CC$(ENDCOLOR) $(SRCCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
QUIET_INSTALL	Makefile	/^QUIET_INSTALL = @printf '    %b %b\\n' $(LINKCOLOR)INSTALL$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
QUIET_LINK	Makefile	/^QUIET_LINK = @printf '    %b %b\\n' $(LINKCOLOR)LINK$(ENDCOLOR) $(BINCOLOR)$@$(ENDCOLOR) 1>&2;$/;"	m
REDIS_BENCHMARK_NAME	Makefile	/^REDIS_BENCHMARK_NAME=redis-benchmark$/;"	m
REDIS_BENCHMARK_OBJ	Makefile	/^REDIS_BENCHMARK_OBJ=ae.o anet.o redis-benchmark.o adlist.o zmalloc.o redis-benchmark.o$/;"	m
REDIS_CC	Makefile	/^REDIS_CC=$(QUIET_CC)$(CC) $(FINAL_CFLAGS)$/;"	m
REDIS_CHECK_AOF_NAME	Makefile	/^REDIS_CHECK_AOF_NAME=redis-check-aof$/;"	m
REDIS_CHECK_AOF_OBJ	Makefile	/^REDIS_CHECK_AOF_OBJ=redis-check-aof.o$/;"	m
REDIS_CHECK_RDB_NAME	Makefile	/^REDIS_CHECK_RDB_NAME=redis-check-rdb$/;"	m
REDIS_CLI_NAME	Makefile	/^REDIS_CLI_NAME=redis-cli$/;"	m
REDIS_CLI_OBJ	Makefile	/^REDIS_CLI_OBJ=anet.o adlist.o redis-cli.o zmalloc.o release.o anet.o ae.o crc64.o$/;"	m
REDIS_GEOHASH_OBJ	Makefile	/^REDIS_GEOHASH_OBJ=..\/deps\/geohash-int\/geohash.o ..\/deps\/geohash-int\/geohash_helper.o$/;"	m
REDIS_INSTALL	Makefile	/^REDIS_INSTALL=$(QUIET_INSTALL)$(INSTALL)$/;"	m
REDIS_LD	Makefile	/^REDIS_LD=$(QUIET_LINK)$(CC) $(FINAL_LDFLAGS)$/;"	m
REDIS_SENTINEL_NAME	Makefile	/^REDIS_SENTINEL_NAME=redis-sentinel$/;"	m
REDIS_SERVER_NAME	Makefile	/^REDIS_SERVER_NAME=redis-server$/;"	m
REDIS_SERVER_OBJ	Makefile	/^REDIS_SERVER_OBJ=adlist.o quicklist.o ae.o anet.o dict.o server.o sds.o zmalloc.o lzf_c.o lzf_d.o pqsort.o zipmap.o sha1.o ziplist.o release.o networking.o util.o object.o db.o replication.o rdb.o t_string.o t_list.o t_set.o t_zset.o t_hash.o config.o aof.o pubsub.o multi.o debug.o sort.o intset.o syncio.o cluster.o crc16.o endianconv.o slowlog.o scripting.o bio.o rio.o rand.o memtest.o crc64.o bitops.o sentinel.o notify.o setproctitle.o blocked.o hyperloglog.o latency.o sparkline.o redis-check-rdb.o geo.o$/;"	m
REV_FINAL_CFLAGS	Makefile	/^	echo PREV_FINAL_CFLAGS=$(FINAL_CFLAGS) >> .make-settings$/;"	m
REV_FINAL_LDFLAGS	Makefile	/^	echo PREV_FINAL_LDFLAGS=$(FINAL_LDFLAGS) >> .make-settings$/;"	m
SRCCOLOR	Makefile	/^SRCCOLOR="\\033[33m"$/;"	m
STD	Makefile	/^STD=-std=c99 -pedantic -DREDIS_STATIC=''$/;"	m
TD	Makefile	/^	echo STD=$(STD) >> .make-settings$/;"	m
WARN	Makefile	/^WARN=-Wall -W$/;"	m
release_hdr	Makefile	/^release_hdr := $(shell sh -c '.\/mkreleasehdr.sh')$/;"	m
uname_S	Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
listAddNodeHead	adlist.c	/^list *listAddNodeHead(list *list, void *value)$/;"	f
listAddNodeTail	adlist.c	/^list *listAddNodeTail(list *list, void *value)$/;"	f
listCreate	adlist.c	/^list *listCreate(void)$/;"	f
listDelNode	adlist.c	/^void listDelNode(list *list, listNode *node)$/;"	f
listDup	adlist.c	/^list *listDup(list *orig)$/;"	f
listGetIterator	adlist.c	/^listIter *listGetIterator(list *list, int direction)$/;"	f
listIndex	adlist.c	/^listNode *listIndex(list *list, long index) {$/;"	f
listInsertNode	adlist.c	/^list *listInsertNode(list *list, listNode *old_node, void *value, int after) {$/;"	f
listNext	adlist.c	/^listNode *listNext(listIter *iter)$/;"	f
listRelease	adlist.c	/^void listRelease(list *list)$/;"	f
listReleaseIterator	adlist.c	/^void listReleaseIterator(listIter *iter) {$/;"	f
listRewind	adlist.c	/^void listRewind(list *list, listIter *li) {$/;"	f
listRewindTail	adlist.c	/^void listRewindTail(list *list, listIter *li) {$/;"	f
listRotate	adlist.c	/^void listRotate(list *list) {$/;"	f
listSearchKey	adlist.c	/^listNode *listSearchKey(list *list, void *key)$/;"	f
AL_START_HEAD	adlist.h	90;"	d
AL_START_TAIL	adlist.h	91;"	d
__ADLIST_H__	adlist.h	32;"	d
direction	adlist.h	/^    int direction;$/;"	m	struct:listIter
dup	adlist.h	/^    void *(*dup)(void *ptr);$/;"	m	struct:list
free	adlist.h	/^    void (*free)(void *ptr);$/;"	m	struct:list
head	adlist.h	/^    listNode *head;$/;"	m	struct:list
len	adlist.h	/^    unsigned long len;$/;"	m	struct:list
list	adlist.h	/^typedef struct list {$/;"	s
list	adlist.h	/^} list;$/;"	t	typeref:struct:list
listFirst	adlist.h	58;"	d
listGetDupMethod	adlist.h	68;"	d
listGetFree	adlist.h	69;"	d
listGetMatchMethod	adlist.h	70;"	d
listIter	adlist.h	/^typedef struct listIter {$/;"	s
listIter	adlist.h	/^} listIter;$/;"	t	typeref:struct:listIter
listLast	adlist.h	59;"	d
listLength	adlist.h	57;"	d
listNextNode	adlist.h	61;"	d
listNode	adlist.h	/^typedef struct listNode {$/;"	s
listNode	adlist.h	/^} listNode;$/;"	t	typeref:struct:listNode
listNodeValue	adlist.h	62;"	d
listPrevNode	adlist.h	60;"	d
listSetDupMethod	adlist.h	64;"	d
listSetFreeMethod	adlist.h	65;"	d
listSetMatchMethod	adlist.h	66;"	d
match	adlist.h	/^    int (*match)(void *ptr, void *key);$/;"	m	struct:list
next	adlist.h	/^    listNode *next;$/;"	m	struct:listIter
next	adlist.h	/^    struct listNode *next;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
prev	adlist.h	/^    struct listNode *prev;$/;"	m	struct:listNode	typeref:struct:listNode::listNode
tail	adlist.h	/^    listNode *tail;$/;"	m	struct:list
value	adlist.h	/^    void *value;$/;"	m	struct:listNode
aeAddMillisecondsToNow	ae.c	/^static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {$/;"	f	file:
aeCreateEventLoop	ae.c	/^aeEventLoop *aeCreateEventLoop(int setsize) {$/;"	f
aeCreateFileEvent	ae.c	/^int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,$/;"	f
aeCreateTimeEvent	ae.c	/^long long aeCreateTimeEvent(aeEventLoop *eventLoop, long long milliseconds,$/;"	f
aeDeleteEventLoop	ae.c	/^void aeDeleteEventLoop(aeEventLoop *eventLoop) {$/;"	f
aeDeleteFileEvent	ae.c	/^void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)$/;"	f
aeDeleteTimeEvent	ae.c	/^int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)$/;"	f
aeGetApiName	ae.c	/^char *aeGetApiName(void) {$/;"	f
aeGetFileEvents	ae.c	/^int aeGetFileEvents(aeEventLoop *eventLoop, int fd) {$/;"	f
aeGetSetSize	ae.c	/^int aeGetSetSize(aeEventLoop *eventLoop) {$/;"	f
aeGetTime	ae.c	/^static void aeGetTime(long *seconds, long *milliseconds)$/;"	f	file:
aeMain	ae.c	/^void aeMain(aeEventLoop *eventLoop) {$/;"	f
aeProcessEvents	ae.c	/^int aeProcessEvents(aeEventLoop *eventLoop, int flags)$/;"	f
aeResizeSetSize	ae.c	/^int aeResizeSetSize(aeEventLoop *eventLoop, int setsize) {$/;"	f
aeSearchNearestTimer	ae.c	/^static aeTimeEvent *aeSearchNearestTimer(aeEventLoop *eventLoop)$/;"	f	file:
aeSetBeforeSleepProc	ae.c	/^void aeSetBeforeSleepProc(aeEventLoop *eventLoop, aeBeforeSleepProc *beforesleep) {$/;"	f
aeStop	ae.c	/^void aeStop(aeEventLoop *eventLoop) {$/;"	f
aeWait	ae.c	/^int aeWait(int fd, int mask, long long milliseconds) {$/;"	f
processTimeEvents	ae.c	/^static int processTimeEvents(aeEventLoop *eventLoop) {$/;"	f	file:
AE_ALL_EVENTS	ae.h	47;"	d
AE_DELETED_EVENT_ID	ae.h	51;"	d
AE_DONT_WAIT	ae.h	48;"	d
AE_ERR	ae.h	39;"	d
AE_FILE_EVENTS	ae.h	45;"	d
AE_NOMORE	ae.h	50;"	d
AE_NONE	ae.h	41;"	d
AE_NOTUSED	ae.h	54;"	d
AE_OK	ae.h	38;"	d
AE_READABLE	ae.h	42;"	d
AE_TIME_EVENTS	ae.h	46;"	d
AE_WRITABLE	ae.h	43;"	d
__AE_H__	ae.h	34;"	d
aeBeforeSleepProc	ae.h	/^typedef void aeBeforeSleepProc(struct aeEventLoop *eventLoop);$/;"	t
aeEventFinalizerProc	ae.h	/^typedef void aeEventFinalizerProc(struct aeEventLoop *eventLoop, void *clientData);$/;"	t
aeEventLoop	ae.h	/^typedef struct aeEventLoop {$/;"	s
aeEventLoop	ae.h	/^} aeEventLoop;$/;"	t	typeref:struct:aeEventLoop
aeFileEvent	ae.h	/^typedef struct aeFileEvent {$/;"	s
aeFileEvent	ae.h	/^} aeFileEvent;$/;"	t	typeref:struct:aeFileEvent
aeFileProc	ae.h	/^typedef void aeFileProc(struct aeEventLoop *eventLoop, int fd, void *clientData, int mask);$/;"	t
aeFiredEvent	ae.h	/^typedef struct aeFiredEvent {$/;"	s
aeFiredEvent	ae.h	/^} aeFiredEvent;$/;"	t	typeref:struct:aeFiredEvent
aeTimeEvent	ae.h	/^typedef struct aeTimeEvent {$/;"	s
aeTimeEvent	ae.h	/^} aeTimeEvent;$/;"	t	typeref:struct:aeTimeEvent
aeTimeProc	ae.h	/^typedef int aeTimeProc(struct aeEventLoop *eventLoop, long long id, void *clientData);$/;"	t
apidata	ae.h	/^    void *apidata; \/* This is used for polling API specific data *\/$/;"	m	struct:aeEventLoop
beforesleep	ae.h	/^    aeBeforeSleepProc *beforesleep;$/;"	m	struct:aeEventLoop
clientData	ae.h	/^    void *clientData;$/;"	m	struct:aeFileEvent
clientData	ae.h	/^    void *clientData;$/;"	m	struct:aeTimeEvent
events	ae.h	/^    aeFileEvent *events; \/* Registered events *\/$/;"	m	struct:aeEventLoop
fd	ae.h	/^    int fd;$/;"	m	struct:aeFiredEvent
finalizerProc	ae.h	/^    aeEventFinalizerProc *finalizerProc;$/;"	m	struct:aeTimeEvent
fired	ae.h	/^    aeFiredEvent *fired; \/* Fired events *\/$/;"	m	struct:aeEventLoop
id	ae.h	/^    long long id; \/* time event identifier. *\/$/;"	m	struct:aeTimeEvent
lastTime	ae.h	/^    time_t lastTime;     \/* Used to detect system clock skew *\/$/;"	m	struct:aeEventLoop
mask	ae.h	/^    int mask; \/* one of AE_(READABLE|WRITABLE) *\/$/;"	m	struct:aeFileEvent
mask	ae.h	/^    int mask;$/;"	m	struct:aeFiredEvent
maxfd	ae.h	/^    int maxfd;   \/* highest file descriptor currently registered *\/$/;"	m	struct:aeEventLoop
next	ae.h	/^    struct aeTimeEvent *next;$/;"	m	struct:aeTimeEvent	typeref:struct:aeTimeEvent::aeTimeEvent
rfileProc	ae.h	/^    aeFileProc *rfileProc;$/;"	m	struct:aeFileEvent
setsize	ae.h	/^    int setsize; \/* max number of file descriptors tracked *\/$/;"	m	struct:aeEventLoop
stop	ae.h	/^    int stop;$/;"	m	struct:aeEventLoop
timeEventHead	ae.h	/^    aeTimeEvent *timeEventHead;$/;"	m	struct:aeEventLoop
timeEventNextId	ae.h	/^    long long timeEventNextId;$/;"	m	struct:aeEventLoop
timeProc	ae.h	/^    aeTimeProc *timeProc;$/;"	m	struct:aeTimeEvent
wfileProc	ae.h	/^    aeFileProc *wfileProc;$/;"	m	struct:aeFileEvent
when_ms	ae.h	/^    long when_ms; \/* milliseconds *\/$/;"	m	struct:aeTimeEvent
when_sec	ae.h	/^    long when_sec; \/* seconds *\/$/;"	m	struct:aeTimeEvent
aeApiAddEvent	ae_epoll.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiCreate	ae_epoll.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiDelEvent	ae_epoll.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {$/;"	f	file:
aeApiFree	ae_epoll.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiName	ae_epoll.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiPoll	ae_epoll.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiResize	ae_epoll.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiState	ae_epoll.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_epoll.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
epfd	ae_epoll.c	/^    int epfd;$/;"	m	struct:aeApiState	file:
events	ae_epoll.c	/^    struct epoll_event *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::epoll_event	file:
MAX_EVENT_BATCHSZ	ae_evport.c	66;"	d	file:
aeApiAddEvent	ae_evport.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiAssociate	ae_evport.c	/^static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {$/;"	f	file:
aeApiCreate	ae_evport.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiDelEvent	ae_evport.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiFree	ae_evport.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiLookupPending	ae_evport.c	/^static int aeApiLookupPending(aeApiState *state, int fd) {$/;"	f	file:
aeApiName	ae_evport.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiPoll	ae_evport.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiResize	ae_evport.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiState	ae_evport.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_evport.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
evport_debug	ae_evport.c	/^static int evport_debug = 0;$/;"	v	file:
npending	ae_evport.c	/^    int     npending;                           \/* # of pending fds *\/$/;"	m	struct:aeApiState	file:
pending_fds	ae_evport.c	/^    int     pending_fds[MAX_EVENT_BATCHSZ];     \/* pending fds *\/$/;"	m	struct:aeApiState	file:
pending_masks	ae_evport.c	/^    int     pending_masks[MAX_EVENT_BATCHSZ];   \/* pending fds' masks *\/$/;"	m	struct:aeApiState	file:
portfd	ae_evport.c	/^    int     portfd;                             \/* event port *\/$/;"	m	struct:aeApiState	file:
aeApiAddEvent	ae_kqueue.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiCreate	ae_kqueue.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiDelEvent	ae_kqueue.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiFree	ae_kqueue.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiName	ae_kqueue.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiPoll	ae_kqueue.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiResize	ae_kqueue.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiState	ae_kqueue.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_kqueue.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
events	ae_kqueue.c	/^    struct kevent *events;$/;"	m	struct:aeApiState	typeref:struct:aeApiState::kevent	file:
kqfd	ae_kqueue.c	/^    int kqfd;$/;"	m	struct:aeApiState	file:
_rfds	ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:
_wfds	ae_select.c	/^    fd_set _rfds, _wfds;$/;"	m	struct:aeApiState	file:
aeApiAddEvent	ae_select.c	/^static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiCreate	ae_select.c	/^static int aeApiCreate(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiDelEvent	ae_select.c	/^static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {$/;"	f	file:
aeApiFree	ae_select.c	/^static void aeApiFree(aeEventLoop *eventLoop) {$/;"	f	file:
aeApiName	ae_select.c	/^static char *aeApiName(void) {$/;"	f	file:
aeApiPoll	ae_select.c	/^static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {$/;"	f	file:
aeApiResize	ae_select.c	/^static int aeApiResize(aeEventLoop *eventLoop, int setsize) {$/;"	f	file:
aeApiState	ae_select.c	/^typedef struct aeApiState {$/;"	s	file:
aeApiState	ae_select.c	/^} aeApiState;$/;"	t	typeref:struct:aeApiState	file:
rfds	ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:
wfds	ae_select.c	/^    fd_set rfds, wfds;$/;"	m	struct:aeApiState	file:
ANET_CONNECT_BE_BINDING	anet.c	267;"	d	file:
ANET_CONNECT_NONBLOCK	anet.c	266;"	d	file:
ANET_CONNECT_NONE	anet.c	265;"	d	file:
_anetTcpServer	anet.c	/^static int _anetTcpServer(char *err, int port, char *bindaddr, int af, int backlog)$/;"	f	file:
anetBlock	anet.c	/^int anetBlock(char *err, int fd) {$/;"	f
anetCreateSocket	anet.c	/^static int anetCreateSocket(char *err, int domain) {$/;"	f	file:
anetDisableTcpNoDelay	anet.c	/^int anetDisableTcpNoDelay(char *err, int fd)$/;"	f
anetEnableTcpNoDelay	anet.c	/^int anetEnableTcpNoDelay(char *err, int fd)$/;"	f
anetFormatAddr	anet.c	/^int anetFormatAddr(char *buf, size_t buf_len, char *ip, int port) {$/;"	f
anetFormatPeer	anet.c	/^int anetFormatPeer(int fd, char *buf, size_t buf_len) {$/;"	f
anetFormatSock	anet.c	/^int anetFormatSock(int fd, char *fmt, size_t fmt_len) {$/;"	f
anetGenericAccept	anet.c	/^static int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {$/;"	f	file:
anetGenericResolve	anet.c	/^int anetGenericResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len,$/;"	f
anetKeepAlive	anet.c	/^int anetKeepAlive(char *err, int fd, int interval)$/;"	f
anetListen	anet.c	/^static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {$/;"	f	file:
anetNonBlock	anet.c	/^int anetNonBlock(char *err, int fd) {$/;"	f
anetPeerToString	anet.c	/^int anetPeerToString(int fd, char *ip, size_t ip_len, int *port) {$/;"	f
anetRead	anet.c	/^int anetRead(int fd, char *buf, int count)$/;"	f
anetResolve	anet.c	/^int anetResolve(char *err, char *host, char *ipbuf, size_t ipbuf_len) {$/;"	f
anetResolveIP	anet.c	/^int anetResolveIP(char *err, char *host, char *ipbuf, size_t ipbuf_len) {$/;"	f
anetSendTimeout	anet.c	/^int anetSendTimeout(char *err, int fd, long long ms) {$/;"	f
anetSetBlock	anet.c	/^int anetSetBlock(char *err, int fd, int non_block) {$/;"	f
anetSetError	anet.c	/^static void anetSetError(char *err, const char *fmt, ...)$/;"	f	file:
anetSetReuseAddr	anet.c	/^static int anetSetReuseAddr(char *err, int fd) {$/;"	f	file:
anetSetSendBuffer	anet.c	/^int anetSetSendBuffer(char *err, int fd, int buffsize)$/;"	f
anetSetTcpNoDelay	anet.c	/^static int anetSetTcpNoDelay(char *err, int fd, int val)$/;"	f	file:
anetSockName	anet.c	/^int anetSockName(int fd, char *ip, size_t ip_len, int *port) {$/;"	f
anetTcp6Server	anet.c	/^int anetTcp6Server(char *err, int port, char *bindaddr, int backlog)$/;"	f
anetTcpAccept	anet.c	/^int anetTcpAccept(char *err, int s, char *ip, size_t ip_len, int *port) {$/;"	f
anetTcpConnect	anet.c	/^int anetTcpConnect(char *err, char *addr, int port)$/;"	f
anetTcpGenericConnect	anet.c	/^static int anetTcpGenericConnect(char *err, char *addr, int port,$/;"	f	file:
anetTcpKeepAlive	anet.c	/^int anetTcpKeepAlive(char *err, int fd)$/;"	f
anetTcpNonBlockBestEffortBindConnect	anet.c	/^int anetTcpNonBlockBestEffortBindConnect(char *err, char *addr, int port,$/;"	f
anetTcpNonBlockBindConnect	anet.c	/^int anetTcpNonBlockBindConnect(char *err, char *addr, int port,$/;"	f
anetTcpNonBlockConnect	anet.c	/^int anetTcpNonBlockConnect(char *err, char *addr, int port)$/;"	f
anetTcpServer	anet.c	/^int anetTcpServer(char *err, int port, char *bindaddr, int backlog)$/;"	f
anetUnixAccept	anet.c	/^int anetUnixAccept(char *err, int s) {$/;"	f
anetUnixConnect	anet.c	/^int anetUnixConnect(char *err, char *path)$/;"	f
anetUnixGenericConnect	anet.c	/^int anetUnixGenericConnect(char *err, char *path, int flags)$/;"	f
anetUnixNonBlockConnect	anet.c	/^int anetUnixNonBlockConnect(char *err, char *path)$/;"	f
anetUnixServer	anet.c	/^int anetUnixServer(char *err, char *path, mode_t perm, int backlog)$/;"	f
anetV6Only	anet.c	/^static int anetV6Only(char *err, int s) {$/;"	f	file:
anetWrite	anet.c	/^int anetWrite(int fd, char *buf, int count)$/;"	f
AF_LOCAL	anet.h	45;"	d
ANET_ERR	anet.h	37;"	d
ANET_ERR_LEN	anet.h	38;"	d
ANET_H	anet.h	32;"	d
ANET_IP_ONLY	anet.h	42;"	d
ANET_NONE	anet.h	41;"	d
ANET_OK	anet.h	36;"	d
ip_len	anet.h	49;"	d
AOF_RW_BUF_BLOCK_SIZE	aof.c	60;"	d	file:
AOF_WRITE_LOG_ERROR_RATE	aof.c	286;"	d	file:
aofChildPipeReadable	aof.c	/^void aofChildPipeReadable(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
aofChildWriteDiffData	aof.c	/^void aofChildWriteDiffData(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
aofClosePipes	aof.c	/^void aofClosePipes(void) {$/;"	f
aofCreatePipes	aof.c	/^int aofCreatePipes(void) {$/;"	f
aofReadDiffFromParent	aof.c	/^ssize_t aofReadDiffFromParent(void) {$/;"	f
aofRemoveTempFile	aof.c	/^void aofRemoveTempFile(pid_t childpid) {$/;"	f
aofRewriteBufferAppend	aof.c	/^void aofRewriteBufferAppend(unsigned char *s, unsigned long len) {$/;"	f
aofRewriteBufferReset	aof.c	/^void aofRewriteBufferReset(void) {$/;"	f
aofRewriteBufferSize	aof.c	/^unsigned long aofRewriteBufferSize(void) {$/;"	f
aofRewriteBufferWrite	aof.c	/^ssize_t aofRewriteBufferWrite(int fd) {$/;"	f
aofUpdateCurrentSize	aof.c	/^void aofUpdateCurrentSize(void) {$/;"	f
aof_background_fsync	aof.c	/^void aof_background_fsync(int fd) {$/;"	f
aofrwblock	aof.c	/^typedef struct aofrwblock {$/;"	s	file:
aofrwblock	aof.c	/^} aofrwblock;$/;"	t	typeref:struct:aofrwblock	file:
backgroundRewriteDoneHandler	aof.c	/^void backgroundRewriteDoneHandler(int exitcode, int bysignal) {$/;"	f
bgrewriteaofCommand	aof.c	/^void bgrewriteaofCommand(client *c) {$/;"	f
buf	aof.c	/^    char buf[AOF_RW_BUF_BLOCK_SIZE];$/;"	m	struct:aofrwblock	file:
catAppendOnlyExpireAtCommand	aof.c	/^sds catAppendOnlyExpireAtCommand(sds buf, struct redisCommand *cmd, robj *key, robj *seconds) {$/;"	f
catAppendOnlyGenericCommand	aof.c	/^sds catAppendOnlyGenericCommand(sds dst, int argc, robj **argv) {$/;"	f
createFakeClient	aof.c	/^struct client *createFakeClient(void) {$/;"	f
feedAppendOnlyFile	aof.c	/^void feedAppendOnlyFile(struct redisCommand *cmd, int dictid, robj **argv, int argc) {$/;"	f
flushAppendOnlyFile	aof.c	/^void flushAppendOnlyFile(int force) {$/;"	f
free	aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:
freeFakeClient	aof.c	/^void freeFakeClient(struct client *c) {$/;"	f
freeFakeClientArgv	aof.c	/^void freeFakeClientArgv(struct client *c) {$/;"	f
loadAppendOnlyFile	aof.c	/^int loadAppendOnlyFile(char *filename) {$/;"	f
rewriteAppendOnlyFile	aof.c	/^int rewriteAppendOnlyFile(char *filename) {$/;"	f
rewriteAppendOnlyFileBackground	aof.c	/^int rewriteAppendOnlyFileBackground(void) {$/;"	f
rewriteHashObject	aof.c	/^int rewriteHashObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteListObject	aof.c	/^int rewriteListObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteSetObject	aof.c	/^int rewriteSetObject(rio *r, robj *key, robj *o) {$/;"	f
rewriteSortedSetObject	aof.c	/^int rewriteSortedSetObject(rio *r, robj *key, robj *o) {$/;"	f
rioWriteBulkObject	aof.c	/^int rioWriteBulkObject(rio *r, robj *obj) {$/;"	f
rioWriteHashIteratorCursor	aof.c	/^static int rioWriteHashIteratorCursor(rio *r, hashTypeIterator *hi, int what) {$/;"	f	file:
startAppendOnly	aof.c	/^int startAppendOnly(void) {$/;"	f
stopAppendOnly	aof.c	/^void stopAppendOnly(void) {$/;"	f
used	aof.c	/^    unsigned long used, free;$/;"	m	struct:aofrwblock	file:
ascii_logo	asciilogo.h	/^char *ascii_logo =$/;"	v
REDIS_THREAD_STACK_SIZE	bio.c	89;"	d	file:
arg1	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:
arg2	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:
arg3	bio.c	/^    void *arg1, *arg2, *arg3;$/;"	m	struct:bio_job	file:
bioCreateBackgroundJob	bio.c	/^void bioCreateBackgroundJob(int type, void *arg1, void *arg2, void *arg3) {$/;"	f
bioInit	bio.c	/^void bioInit(void) {$/;"	f
bioKillThreads	bio.c	/^void bioKillThreads(void) {$/;"	f
bioPendingJobsOfType	bio.c	/^unsigned long long bioPendingJobsOfType(int type) {$/;"	f
bioProcessBackgroundJobs	bio.c	/^void *bioProcessBackgroundJobs(void *arg) {$/;"	f
bio_condvar	bio.c	/^static pthread_cond_t bio_condvar[BIO_NUM_OPS];$/;"	v	file:
bio_job	bio.c	/^struct bio_job {$/;"	s	file:
bio_jobs	bio.c	/^static list *bio_jobs[BIO_NUM_OPS];$/;"	v	file:
bio_mutex	bio.c	/^static pthread_mutex_t bio_mutex[BIO_NUM_OPS];$/;"	v	file:
bio_pending	bio.c	/^static unsigned long long bio_pending[BIO_NUM_OPS];$/;"	v	file:
bio_threads	bio.c	/^static pthread_t bio_threads[BIO_NUM_OPS];$/;"	v	file:
time	bio.c	/^    time_t time; \/* Time at which the job was created. *\/$/;"	m	struct:bio_job	file:
BIO_AOF_FSYNC	bio.h	40;"	d
BIO_CLOSE_FILE	bio.h	39;"	d
BIO_NUM_OPS	bio.h	41;"	d
BFOVERFLOW_FAIL	bitops.c	279;"	d	file:
BFOVERFLOW_SAT	bitops.c	278;"	d	file:
BFOVERFLOW_WRAP	bitops.c	277;"	d	file:
BITFIELDOP_GET	bitops.c	393;"	d	file:
BITFIELDOP_INCRBY	bitops.c	395;"	d	file:
BITFIELDOP_SET	bitops.c	394;"	d	file:
BITOP_AND	bitops.c	388;"	d	file:
BITOP_NOT	bitops.c	391;"	d	file:
BITOP_OR	bitops.c	389;"	d	file:
BITOP_XOR	bitops.c	390;"	d	file:
bitcountCommand	bitops.c	/^void bitcountCommand(client *c) {$/;"	f
bitfieldCommand	bitops.c	/^void bitfieldCommand(client *c) {$/;"	f
bitfieldOp	bitops.c	/^struct bitfieldOp {$/;"	s	file:
bitopCommand	bitops.c	/^void bitopCommand(client *c) {$/;"	f
bitposCommand	bitops.c	/^void bitposCommand(client *c) {$/;"	f
bits	bitops.c	/^    int bits;           \/* Integer bitfield bits width. *\/$/;"	m	struct:bitfieldOp	file:
checkSignedBitfieldOverflow	bitops.c	/^int checkSignedBitfieldOverflow(int64_t value, int64_t incr, uint64_t bits, int owtype, int64_t *limit) {$/;"	f
checkUnsignedBitfieldOverflow	bitops.c	/^int checkUnsignedBitfieldOverflow(uint64_t value, int64_t incr, uint64_t bits, int owtype, uint64_t *limit) {$/;"	f
getBitOffsetFromArgument	bitops.c	/^int getBitOffsetFromArgument(client *c, robj *o, size_t *offset, int hash, int bits) {$/;"	f
getBitfieldTypeFromArgument	bitops.c	/^int getBitfieldTypeFromArgument(client *c, robj *o, int *sign, int *bits) {$/;"	f
getObjectReadOnlyString	bitops.c	/^unsigned char *getObjectReadOnlyString(robj *o, long *len, char *llbuf) {$/;"	f
getSignedBitfield	bitops.c	/^int64_t getSignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits) {$/;"	f
getUnsignedBitfield	bitops.c	/^uint64_t getUnsignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits) {$/;"	f
getbitCommand	bitops.c	/^void getbitCommand(client *c) {$/;"	f
i64	bitops.c	/^    int64_t i64;        \/* Increment amount (INCRBY) or SET value *\/$/;"	m	struct:bitfieldOp	file:
lookupStringForBitCommand	bitops.c	/^robj *lookupStringForBitCommand(client *c, size_t maxbit) {$/;"	f
offset	bitops.c	/^    uint64_t offset;    \/* Bitfield offset. *\/$/;"	m	struct:bitfieldOp	file:
opcode	bitops.c	/^    int opcode;         \/* Operation id. *\/$/;"	m	struct:bitfieldOp	file:
owtype	bitops.c	/^    int owtype;         \/* Overflow type to use. *\/$/;"	m	struct:bitfieldOp	file:
printBits	bitops.c	/^void printBits(unsigned char *p, unsigned long count) {$/;"	f
redisBitpos	bitops.c	/^long redisBitpos(void *s, unsigned long count, int bit) {$/;"	f
redisPopcount	bitops.c	/^size_t redisPopcount(void *s, long count) {$/;"	f
setSignedBitfield	bitops.c	/^void setSignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits, int64_t value) {$/;"	f
setUnsignedBitfield	bitops.c	/^void setUnsignedBitfield(unsigned char *p, uint64_t offset, uint64_t bits, uint64_t value) {$/;"	f
setbitCommand	bitops.c	/^void setbitCommand(client *c) {$/;"	f
sign	bitops.c	/^    int sign;           \/* True if signed, otherwise unsigned op. *\/$/;"	m	struct:bitfieldOp	file:
blockClient	blocked.c	/^void blockClient(client *c, int btype) {$/;"	f
disconnectAllBlockedClients	blocked.c	/^void disconnectAllBlockedClients(void) {$/;"	f
getTimeoutFromObjectOrReply	blocked.c	/^int getTimeoutFromObjectOrReply(client *c, robj *object, mstime_t *timeout, int unit) {$/;"	f
processUnblockedClients	blocked.c	/^void processUnblockedClients(void) {$/;"	f
replyToBlockedClientTimedOut	blocked.c	/^void replyToBlockedClientTimedOut(client *c) {$/;"	f
unblockClient	blocked.c	/^void unblockClient(client *c) {$/;"	f
CLUSTER_BLACKLIST_TTL	cluster.c	1074;"	d	file:
CLUSTER_BROADCAST_ALL	cluster.c	2307;"	d	file:
CLUSTER_BROADCAST_LOCAL_SLAVES	cluster.c	2308;"	d	file:
CLUSTER_MAX_REJOIN_DELAY	cluster.c	3466;"	d	file:
CLUSTER_MIN_REJOIN_DELAY	cluster.c	3467;"	d	file:
CLUSTER_WRITABLE_DELAY	cluster.c	3468;"	d	file:
MAX_CLUSTER_ACCEPTS_PER_CALL	cluster.c	573;"	d	file:
MIGRATE_SOCKET_CACHE_ITEMS	cluster.c	4534;"	d	file:
MIGRATE_SOCKET_CACHE_TTL	cluster.c	4535;"	d	file:
askingCommand	cluster.c	/^void askingCommand(client *c) {$/;"	f
bitmapClearBit	cluster.c	/^void bitmapClearBit(unsigned char *bitmap, int pos) {$/;"	f
bitmapSetBit	cluster.c	/^void bitmapSetBit(unsigned char *bitmap, int pos) {$/;"	f
bitmapTestBit	cluster.c	/^int bitmapTestBit(unsigned char *bitmap, int pos) {$/;"	f
clearNodeFailureIfNeeded	cluster.c	/^void clearNodeFailureIfNeeded(clusterNode *node) {$/;"	f
clusterAcceptHandler	cluster.c	/^void clusterAcceptHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
clusterAddNode	cluster.c	/^int clusterAddNode(clusterNode *node) {$/;"	f
clusterAddSlot	cluster.c	/^int clusterAddSlot(clusterNode *n, int slot) {$/;"	f
clusterBeforeSleep	cluster.c	/^void clusterBeforeSleep(void) {$/;"	f
clusterBlacklistAddNode	cluster.c	/^void clusterBlacklistAddNode(clusterNode *node) {$/;"	f
clusterBlacklistCleanup	cluster.c	/^void clusterBlacklistCleanup(void) {$/;"	f
clusterBlacklistExists	cluster.c	/^int clusterBlacklistExists(char *nodeid) {$/;"	f
clusterBroadcastMessage	cluster.c	/^void clusterBroadcastMessage(void *buf, size_t len) {$/;"	f
clusterBroadcastPong	cluster.c	/^void clusterBroadcastPong(int target) {$/;"	f
clusterBuildMessageHdr	cluster.c	/^void clusterBuildMessageHdr(clusterMsg *hdr, int type) {$/;"	f
clusterBumpConfigEpochWithoutConsensus	cluster.c	/^int clusterBumpConfigEpochWithoutConsensus(void) {$/;"	f
clusterCloseAllSlots	cluster.c	/^void clusterCloseAllSlots(void) {$/;"	f
clusterCommand	cluster.c	/^void clusterCommand(client *c) {$/;"	f
clusterCountNonFailingSlaves	cluster.c	/^int clusterCountNonFailingSlaves(clusterNode *n) {$/;"	f
clusterCron	cluster.c	/^void clusterCron(void) {$/;"	f
clusterDelNode	cluster.c	/^void clusterDelNode(clusterNode *delnode) {$/;"	f
clusterDelNodeSlots	cluster.c	/^int clusterDelNodeSlots(clusterNode *node) {$/;"	f
clusterDelSlot	cluster.c	/^int clusterDelSlot(int slot) {$/;"	f
clusterDoBeforeSleep	cluster.c	/^void clusterDoBeforeSleep(int flags) {$/;"	f
clusterFailoverReplaceYourMaster	cluster.c	/^void clusterFailoverReplaceYourMaster(void) {$/;"	f
clusterGenNodeDescription	cluster.c	/^sds clusterGenNodeDescription(clusterNode *node) {$/;"	f
clusterGenNodesDescription	cluster.c	/^sds clusterGenNodesDescription(int filter) {$/;"	f
clusterGetMaxEpoch	cluster.c	/^uint64_t clusterGetMaxEpoch(void) {$/;"	f
clusterGetSlaveRank	cluster.c	/^int clusterGetSlaveRank(void) {$/;"	f
clusterHandleConfigEpochCollision	cluster.c	/^void clusterHandleConfigEpochCollision(clusterNode *sender) {$/;"	f
clusterHandleManualFailover	cluster.c	/^void clusterHandleManualFailover(void) {$/;"	f
clusterHandleSlaveFailover	cluster.c	/^void clusterHandleSlaveFailover(void) {$/;"	f
clusterHandleSlaveMigration	cluster.c	/^void clusterHandleSlaveMigration(int max_slaves) {$/;"	f
clusterHandshakeInProgress	cluster.c	/^int clusterHandshakeInProgress(char *ip, int port) {$/;"	f
clusterInit	cluster.c	/^void clusterInit(void) {$/;"	f
clusterLoadConfig	cluster.c	/^int clusterLoadConfig(char *filename) {$/;"	f
clusterLockConfig	cluster.c	/^int clusterLockConfig(char *filename) {$/;"	f
clusterLogCantFailover	cluster.c	/^void clusterLogCantFailover(int reason) {$/;"	f
clusterLookupNode	cluster.c	/^clusterNode *clusterLookupNode(char *name) {$/;"	f
clusterMastersHaveSlaves	cluster.c	/^int clusterMastersHaveSlaves(void) {$/;"	f
clusterNodeAddFailureReport	cluster.c	/^int clusterNodeAddFailureReport(clusterNode *failing, clusterNode *sender) {$/;"	f
clusterNodeAddSlave	cluster.c	/^int clusterNodeAddSlave(clusterNode *master, clusterNode *slave) {$/;"	f
clusterNodeCleanupFailureReports	cluster.c	/^void clusterNodeCleanupFailureReports(clusterNode *node) {$/;"	f
clusterNodeClearSlotBit	cluster.c	/^int clusterNodeClearSlotBit(clusterNode *n, int slot) {$/;"	f
clusterNodeDelFailureReport	cluster.c	/^int clusterNodeDelFailureReport(clusterNode *node, clusterNode *sender) {$/;"	f
clusterNodeFailureReportsCount	cluster.c	/^int clusterNodeFailureReportsCount(clusterNode *node) {$/;"	f
clusterNodeGetSlotBit	cluster.c	/^int clusterNodeGetSlotBit(clusterNode *n, int slot) {$/;"	f
clusterNodeRemoveSlave	cluster.c	/^int clusterNodeRemoveSlave(clusterNode *master, clusterNode *slave) {$/;"	f
clusterNodeSetSlotBit	cluster.c	/^int clusterNodeSetSlotBit(clusterNode *n, int slot) {$/;"	f
clusterProcessGossipSection	cluster.c	/^void clusterProcessGossipSection(clusterMsg *hdr, clusterLink *link) {$/;"	f
clusterProcessPacket	cluster.c	/^int clusterProcessPacket(clusterLink *link) {$/;"	f
clusterPropagatePublish	cluster.c	/^void clusterPropagatePublish(robj *channel, robj *message) {$/;"	f
clusterReadHandler	cluster.c	/^void clusterReadHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
clusterRedirectBlockedClientIfNeeded	cluster.c	/^int clusterRedirectBlockedClientIfNeeded(client *c) {$/;"	f
clusterRedirectClient	cluster.c	/^void clusterRedirectClient(client *c, clusterNode *n, int hashslot, int error_code) {$/;"	f
clusterRenameNode	cluster.c	/^void clusterRenameNode(clusterNode *node, char *newname) {$/;"	f
clusterReplyMultiBulkSlots	cluster.c	/^void clusterReplyMultiBulkSlots(client *c) {$/;"	f
clusterRequestFailoverAuth	cluster.c	/^void clusterRequestFailoverAuth(void) {$/;"	f
clusterReset	cluster.c	/^void clusterReset(int hard) {$/;"	f
clusterSaveConfig	cluster.c	/^int clusterSaveConfig(int do_fsync) {$/;"	f
clusterSaveConfigOrDie	cluster.c	/^void clusterSaveConfigOrDie(int do_fsync) {$/;"	f
clusterSendFail	cluster.c	/^void clusterSendFail(char *nodename) {$/;"	f
clusterSendFailoverAuth	cluster.c	/^void clusterSendFailoverAuth(clusterNode *node) {$/;"	f
clusterSendFailoverAuthIfNeeded	cluster.c	/^void clusterSendFailoverAuthIfNeeded(clusterNode *node, clusterMsg *request) {$/;"	f
clusterSendMFStart	cluster.c	/^void clusterSendMFStart(clusterNode *node) {$/;"	f
clusterSendMessage	cluster.c	/^void clusterSendMessage(clusterLink *link, unsigned char *msg, size_t msglen) {$/;"	f
clusterSendPing	cluster.c	/^void clusterSendPing(clusterLink *link, int type) {$/;"	f
clusterSendPublish	cluster.c	/^void clusterSendPublish(clusterLink *link, robj *channel, robj *message) {$/;"	f
clusterSendUpdate	cluster.c	/^void clusterSendUpdate(clusterLink *link, clusterNode *node) {$/;"	f
clusterSetMaster	cluster.c	/^void clusterSetMaster(clusterNode *n) {$/;"	f
clusterSetNodeAsMaster	cluster.c	/^void clusterSetNodeAsMaster(clusterNode *n) {$/;"	f
clusterStartHandshake	cluster.c	/^int clusterStartHandshake(char *ip, int port) {$/;"	f
clusterUpdateSlotsConfigWith	cluster.c	/^void clusterUpdateSlotsConfigWith(clusterNode *sender, uint64_t senderConfigEpoch, unsigned char *slots) {$/;"	f
clusterUpdateState	cluster.c	/^void clusterUpdateState(void) {$/;"	f
clusterWriteHandler	cluster.c	/^void clusterWriteHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
createClusterLink	cluster.c	/^clusterLink *createClusterLink(clusterNode *node) {$/;"	f
createClusterNode	cluster.c	/^clusterNode *createClusterNode(char *nodename, int flags) {$/;"	f
createDumpPayload	cluster.c	/^void createDumpPayload(rio *payload, robj *o) {$/;"	f
dumpCommand	cluster.c	/^void dumpCommand(client *c) {$/;"	f
fd	cluster.c	/^    int fd;$/;"	m	struct:migrateCachedSocket	file:
flag	cluster.c	/^    uint16_t flag;$/;"	m	struct:redisNodeFlags	file:
freeClusterLink	cluster.c	/^void freeClusterLink(clusterLink *link) {$/;"	f
freeClusterNode	cluster.c	/^void freeClusterNode(clusterNode *n) {$/;"	f
getNodeByQuery	cluster.c	/^clusterNode *getNodeByQuery(client *c, struct redisCommand *cmd, robj **argv, int argc, int *hashslot, int *error_code) {$/;"	f
getSlotOrReply	cluster.c	/^int getSlotOrReply(client *c, robj *o) {$/;"	f
handleLinkIOError	cluster.c	/^void handleLinkIOError(clusterLink *link) {$/;"	f
keyHashSlot	cluster.c	/^unsigned int keyHashSlot(char *key, int keylen) {$/;"	f
last_dbid	cluster.c	/^    long last_dbid;$/;"	m	struct:migrateCachedSocket	file:
last_use_time	cluster.c	/^    time_t last_use_time;$/;"	m	struct:migrateCachedSocket	file:
manualFailoverCheckTimeout	cluster.c	/^void manualFailoverCheckTimeout(void) {$/;"	f
markNodeAsFailingIfNeeded	cluster.c	/^void markNodeAsFailingIfNeeded(clusterNode *node) {$/;"	f
migrateCachedSocket	cluster.c	/^typedef struct migrateCachedSocket {$/;"	s	file:
migrateCachedSocket	cluster.c	/^} migrateCachedSocket;$/;"	t	typeref:struct:migrateCachedSocket	file:
migrateCloseSocket	cluster.c	/^void migrateCloseSocket(robj *host, robj *port) {$/;"	f
migrateCloseTimedoutSockets	cluster.c	/^void migrateCloseTimedoutSockets(void) {$/;"	f
migrateCommand	cluster.c	/^void migrateCommand(client *c) {$/;"	f
migrateGetSocket	cluster.c	/^migrateCachedSocket* migrateGetSocket(client *c, robj *host, robj *port, long timeout) {$/;"	f
myself	cluster.c	/^clusterNode *myself = NULL;$/;"	v
name	cluster.c	/^    char *name;$/;"	m	struct:redisNodeFlags	file:
nodeIp2String	cluster.c	/^void nodeIp2String(char *buf, clusterLink *link) {$/;"	f
nodeUpdateAddressIfNeeded	cluster.c	/^int nodeUpdateAddressIfNeeded(clusterNode *node, clusterLink *link, int port) {$/;"	f
readonlyCommand	cluster.c	/^void readonlyCommand(client *c) {$/;"	f
readwriteCommand	cluster.c	/^void readwriteCommand(client *c) {$/;"	f
redisNodeFlags	cluster.c	/^struct redisNodeFlags {$/;"	s	file:
redisNodeFlagsTable	cluster.c	/^static struct redisNodeFlags redisNodeFlagsTable[] = {$/;"	v	typeref:struct:redisNodeFlags	file:
representClusterNodeFlags	cluster.c	/^sds representClusterNodeFlags(sds ci, uint16_t flags) {$/;"	f
resetManualFailover	cluster.c	/^void resetManualFailover(void) {$/;"	f
restoreCommand	cluster.c	/^void restoreCommand(client *c) {$/;"	f
verifyClusterConfigWithData	cluster.c	/^int verifyClusterConfigWithData(void) {$/;"	f
verifyDumpPayload	cluster.c	/^int verifyDumpPayload(unsigned char *p, size_t len) {$/;"	f
CLUSTERMSG_FLAG0_FORCEACK	cluster.h	253;"	d
CLUSTERMSG_FLAG0_PAUSED	cluster.h	252;"	d
CLUSTERMSG_MIN_LEN	cluster.h	248;"	d
CLUSTERMSG_TYPE_FAIL	cluster.h	159;"	d
CLUSTERMSG_TYPE_FAILOVER_AUTH_ACK	cluster.h	162;"	d
CLUSTERMSG_TYPE_FAILOVER_AUTH_REQUEST	cluster.h	161;"	d
CLUSTERMSG_TYPE_MEET	cluster.h	158;"	d
CLUSTERMSG_TYPE_MFSTART	cluster.h	164;"	d
CLUSTERMSG_TYPE_PING	cluster.h	156;"	d
CLUSTERMSG_TYPE_PONG	cluster.h	157;"	d
CLUSTERMSG_TYPE_PUBLISH	cluster.h	160;"	d
CLUSTERMSG_TYPE_UPDATE	cluster.h	163;"	d
CLUSTER_CANT_FAILOVER_DATA_AGE	cluster.h	70;"	d
CLUSTER_CANT_FAILOVER_EXPIRED	cluster.h	72;"	d
CLUSTER_CANT_FAILOVER_NONE	cluster.h	69;"	d
CLUSTER_CANT_FAILOVER_RELOG_PERIOD	cluster.h	74;"	d
CLUSTER_CANT_FAILOVER_WAITING_DELAY	cluster.h	71;"	d
CLUSTER_CANT_FAILOVER_WAITING_VOTES	cluster.h	73;"	d
CLUSTER_DEFAULT_MIGRATION_BARRIER	cluster.h	23;"	d
CLUSTER_DEFAULT_NODE_TIMEOUT	cluster.h	16;"	d
CLUSTER_DEFAULT_REQUIRE_FULL_COVERAGE	cluster.h	18;"	d
CLUSTER_DEFAULT_SLAVE_VALIDITY	cluster.h	17;"	d
CLUSTER_FAIL	cluster.h	10;"	d
CLUSTER_FAILOVER_DELAY	cluster.h	22;"	d
CLUSTER_FAIL_REPORT_VALIDITY_MULT	cluster.h	19;"	d
CLUSTER_FAIL_UNDO_TIME_ADD	cluster.h	21;"	d
CLUSTER_FAIL_UNDO_TIME_MULT	cluster.h	20;"	d
CLUSTER_MF_PAUSE_MULT	cluster.h	25;"	d
CLUSTER_MF_TIMEOUT	cluster.h	24;"	d
CLUSTER_NAMELEN	cluster.h	11;"	d
CLUSTER_NODE_FAIL	cluster.h	52;"	d
CLUSTER_NODE_HANDSHAKE	cluster.h	54;"	d
CLUSTER_NODE_MASTER	cluster.h	49;"	d
CLUSTER_NODE_MEET	cluster.h	56;"	d
CLUSTER_NODE_MIGRATE_TO	cluster.h	57;"	d
CLUSTER_NODE_MYSELF	cluster.h	53;"	d
CLUSTER_NODE_NOADDR	cluster.h	55;"	d
CLUSTER_NODE_NULL_NAME	cluster.h	58;"	d
CLUSTER_NODE_PFAIL	cluster.h	51;"	d
CLUSTER_NODE_SLAVE	cluster.h	50;"	d
CLUSTER_OK	cluster.h	9;"	d
CLUSTER_PORT_INCR	cluster.h	12;"	d
CLUSTER_PROTO_VER	cluster.h	222;"	d
CLUSTER_REDIR_ASK	cluster.h	32;"	d
CLUSTER_REDIR_CROSS_SLOT	cluster.h	30;"	d
CLUSTER_REDIR_DOWN_STATE	cluster.h	34;"	d
CLUSTER_REDIR_DOWN_UNBOUND	cluster.h	35;"	d
CLUSTER_REDIR_MOVED	cluster.h	33;"	d
CLUSTER_REDIR_NONE	cluster.h	29;"	d
CLUSTER_REDIR_UNSTABLE	cluster.h	31;"	d
CLUSTER_SLAVE_MIGRATION_DELAY	cluster.h	26;"	d
CLUSTER_SLOTS	cluster.h	8;"	d
CLUSTER_TODO_FSYNC_CONFIG	cluster.h	148;"	d
CLUSTER_TODO_HANDLE_FAILOVER	cluster.h	145;"	d
CLUSTER_TODO_SAVE_CONFIG	cluster.h	147;"	d
CLUSTER_TODO_UPDATE_STATE	cluster.h	146;"	d
__CLUSTER_H	cluster.h	2;"	d
about	cluster.h	/^        clusterMsgDataFail about;$/;"	m	struct:clusterMsgData::__anon13
bulk_data	cluster.h	/^    unsigned char bulk_data[8];$/;"	m	struct:__anon10
cant_failover_reason	cluster.h	/^    int cant_failover_reason;   \/* Why a slave is currently not able to$/;"	m	struct:clusterState
channel_len	cluster.h	/^    uint32_t channel_len;$/;"	m	struct:__anon10
clusterLink	cluster.h	/^typedef struct clusterLink {$/;"	s
clusterLink	cluster.h	/^} clusterLink;$/;"	t	typeref:struct:clusterLink
clusterMsg	cluster.h	/^} clusterMsg;$/;"	t	typeref:struct:__anon16
clusterMsgData	cluster.h	/^union clusterMsgData {$/;"	u
clusterMsgDataFail	cluster.h	/^} clusterMsgDataFail;$/;"	t	typeref:struct:__anon9
clusterMsgDataGossip	cluster.h	/^} clusterMsgDataGossip;$/;"	t	typeref:struct:__anon8
clusterMsgDataPublish	cluster.h	/^} clusterMsgDataPublish;$/;"	t	typeref:struct:__anon10
clusterMsgDataUpdate	cluster.h	/^} clusterMsgDataUpdate;$/;"	t	typeref:struct:__anon11
clusterNode	cluster.h	/^typedef struct clusterNode {$/;"	s
clusterNode	cluster.h	/^} clusterNode;$/;"	t	typeref:struct:clusterNode
clusterNodeFailReport	cluster.h	/^typedef struct clusterNodeFailReport {$/;"	s
clusterNodeFailReport	cluster.h	/^} clusterNodeFailReport;$/;"	t	typeref:struct:clusterNodeFailReport
clusterState	cluster.h	/^typedef struct clusterState {$/;"	s
clusterState	cluster.h	/^} clusterState;$/;"	t	typeref:struct:clusterState
configEpoch	cluster.h	/^    uint64_t configEpoch;   \/* The config epoch if it's a master, or the last$/;"	m	struct:__anon16
configEpoch	cluster.h	/^    uint64_t configEpoch; \/* Config epoch of the specified instance. *\/$/;"	m	struct:__anon11
configEpoch	cluster.h	/^    uint64_t configEpoch; \/* Last configEpoch observed for this node *\/$/;"	m	struct:clusterNode
count	cluster.h	/^    uint16_t count;     \/* Only used for some kind of messages. *\/$/;"	m	struct:__anon16
ctime	cluster.h	/^    mstime_t ctime;             \/* Link creation time *\/$/;"	m	struct:clusterLink
ctime	cluster.h	/^    mstime_t ctime; \/* Node object creation time. *\/$/;"	m	struct:clusterNode
currentEpoch	cluster.h	/^    uint64_t currentEpoch;  \/* The epoch accordingly to the sending node. *\/$/;"	m	struct:__anon16
currentEpoch	cluster.h	/^    uint64_t currentEpoch;$/;"	m	struct:clusterState
data	cluster.h	/^    union clusterMsgData data;$/;"	m	struct:__anon16	typeref:union:__anon16::clusterMsgData
fail	cluster.h	/^    } fail;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon13
fail_reports	cluster.h	/^    list *fail_reports;         \/* List of nodes signaling this as failing *\/$/;"	m	struct:clusterNode
fail_time	cluster.h	/^    mstime_t fail_time;      \/* Unix time when FAIL flag was set *\/$/;"	m	struct:clusterNode
failover_auth_count	cluster.h	/^    int failover_auth_count;    \/* Number of votes received so far. *\/$/;"	m	struct:clusterState
failover_auth_epoch	cluster.h	/^    uint64_t failover_auth_epoch; \/* Epoch of the current election. *\/$/;"	m	struct:clusterState
failover_auth_rank	cluster.h	/^    int failover_auth_rank;     \/* This slave rank for current auth request. *\/$/;"	m	struct:clusterState
failover_auth_sent	cluster.h	/^    int failover_auth_sent;     \/* True if we already asked for votes. *\/$/;"	m	struct:clusterState
failover_auth_time	cluster.h	/^    mstime_t failover_auth_time; \/* Time of previous or next election. *\/$/;"	m	struct:clusterState
fd	cluster.h	/^    int fd;                     \/* TCP socket file descriptor *\/$/;"	m	struct:clusterLink
flags	cluster.h	/^    int flags;      \/* CLUSTER_NODE_... *\/$/;"	m	struct:clusterNode
flags	cluster.h	/^    uint16_t flags;             \/* node->flags copy *\/$/;"	m	struct:__anon8
flags	cluster.h	/^    uint16_t flags;     \/* Sender node flags *\/$/;"	m	struct:__anon16
gossip	cluster.h	/^        clusterMsgDataGossip gossip[1];$/;"	m	struct:clusterMsgData::__anon12
importing_slots_from	cluster.h	/^    clusterNode *importing_slots_from[CLUSTER_SLOTS];$/;"	m	struct:clusterState
ip	cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* IP address last time it was seen *\/$/;"	m	struct:__anon8
ip	cluster.h	/^    char ip[NET_IP_STR_LEN];  \/* Latest known IP address of this node *\/$/;"	m	struct:clusterNode
lastVoteEpoch	cluster.h	/^    uint64_t lastVoteEpoch;     \/* Epoch of the last vote granted. *\/$/;"	m	struct:clusterState
link	cluster.h	/^    clusterLink *link;          \/* TCP\/IP link with this node *\/$/;"	m	struct:clusterNode
message_len	cluster.h	/^    uint32_t message_len;$/;"	m	struct:__anon10
mf_can_start	cluster.h	/^    int mf_can_start;           \/* If non-zero signal that the manual failover$/;"	m	struct:clusterState
mf_end	cluster.h	/^    mstime_t mf_end;            \/* Manual failover time limit (ms unixtime).$/;"	m	struct:clusterState
mf_master_offset	cluster.h	/^    long long mf_master_offset; \/* Master offset the slave needs to start MF$/;"	m	struct:clusterState
mf_slave	cluster.h	/^    clusterNode *mf_slave;      \/* Slave performing the manual failover. *\/$/;"	m	struct:clusterState
mflags	cluster.h	/^    unsigned char mflags[3]; \/* Message flags: CLUSTERMSG_FLAG[012]_... *\/$/;"	m	struct:__anon16
migrating_slots_to	cluster.h	/^    clusterNode *migrating_slots_to[CLUSTER_SLOTS];$/;"	m	struct:clusterState
msg	cluster.h	/^        clusterMsgDataPublish msg;$/;"	m	struct:clusterMsgData::__anon14
myself	cluster.h	/^    clusterNode *myself;  \/* This node *\/$/;"	m	struct:clusterState
myslots	cluster.h	/^    unsigned char myslots[CLUSTER_SLOTS\/8];$/;"	m	struct:__anon16
name	cluster.h	/^    char name[CLUSTER_NAMELEN]; \/* Node name, hex string, sha1-size *\/$/;"	m	struct:clusterNode
node	cluster.h	/^    struct clusterNode *node;   \/* Node related to this link if any, or NULL *\/$/;"	m	struct:clusterLink	typeref:struct:clusterLink::clusterNode
node	cluster.h	/^    struct clusterNode *node;  \/* Node reporting the failure condition. *\/$/;"	m	struct:clusterNodeFailReport	typeref:struct:clusterNodeFailReport::clusterNode
nodeFailed	cluster.h	66;"	d
nodeHasAddr	cluster.h	63;"	d
nodeInHandshake	cluster.h	62;"	d
nodeIsMaster	cluster.h	60;"	d
nodeIsSlave	cluster.h	61;"	d
nodeTimedOut	cluster.h	65;"	d
nodeWithoutAddr	cluster.h	64;"	d
nodecfg	cluster.h	/^        clusterMsgDataUpdate nodecfg;$/;"	m	struct:clusterMsgData::__anon15
nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN]; \/* Name of the slots owner. *\/$/;"	m	struct:__anon11
nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon8
nodename	cluster.h	/^    char nodename[CLUSTER_NAMELEN];$/;"	m	struct:__anon9
nodes	cluster.h	/^    dict *nodes;          \/* Hash table of name -> clusterNode structures *\/$/;"	m	struct:clusterState
nodes_black_list	cluster.h	/^    dict *nodes_black_list; \/* Nodes we don't re-add for a few seconds. *\/$/;"	m	struct:clusterState
notused0	cluster.h	/^    uint16_t notused0;  \/* 2 bytes not used. *\/$/;"	m	struct:__anon16
notused1	cluster.h	/^    char notused1[32];  \/* 32 bytes reserved for future usage. *\/$/;"	m	struct:__anon16
notused1	cluster.h	/^    uint16_t notused1;          \/* Some room for future improvements. *\/$/;"	m	struct:__anon8
notused2	cluster.h	/^    uint32_t notused2;$/;"	m	struct:__anon8
numslaves	cluster.h	/^    int numslaves;  \/* Number of slave nodes, if this is a master *\/$/;"	m	struct:clusterNode
numslots	cluster.h	/^    int numslots;   \/* Number of slots handled by this node *\/$/;"	m	struct:clusterNode
offset	cluster.h	/^    uint64_t offset;    \/* Master replication offset if node is a master or$/;"	m	struct:__anon16
orphaned_time	cluster.h	/^    mstime_t orphaned_time;     \/* Starting time of orphaned master condition *\/$/;"	m	struct:clusterNode
ping	cluster.h	/^    } ping;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon12
ping_sent	cluster.h	/^    mstime_t ping_sent;      \/* Unix time we sent latest ping *\/$/;"	m	struct:clusterNode
ping_sent	cluster.h	/^    uint32_t ping_sent;$/;"	m	struct:__anon8
pong_received	cluster.h	/^    mstime_t pong_received;  \/* Unix time we received the pong *\/$/;"	m	struct:clusterNode
pong_received	cluster.h	/^    uint32_t pong_received;$/;"	m	struct:__anon8
port	cluster.h	/^    int port;                   \/* Latest known port of this node *\/$/;"	m	struct:clusterNode
port	cluster.h	/^    uint16_t port;              \/* port last time it was seen *\/$/;"	m	struct:__anon8
port	cluster.h	/^    uint16_t port;      \/* Sender TCP base port *\/$/;"	m	struct:__anon16
publish	cluster.h	/^    } publish;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon14
rcvbuf	cluster.h	/^    sds rcvbuf;                 \/* Packet reception buffer *\/$/;"	m	struct:clusterLink
repl_offset	cluster.h	/^    long long repl_offset;      \/* Last known repl offset for this node. *\/$/;"	m	struct:clusterNode
repl_offset_time	cluster.h	/^    mstime_t repl_offset_time;  \/* Unix time we received offset for this node *\/$/;"	m	struct:clusterNode
sender	cluster.h	/^    char sender[CLUSTER_NAMELEN]; \/* Name of the sender node *\/$/;"	m	struct:__anon16
sig	cluster.h	/^    char sig[4];        \/* Siganture "RCmb" (Redis Cluster message bus). *\/$/;"	m	struct:__anon16
size	cluster.h	/^    int size;             \/* Num of master nodes with at least one slot *\/$/;"	m	struct:clusterState
slaveof	cluster.h	/^    char slaveof[CLUSTER_NAMELEN];$/;"	m	struct:__anon16
slaveof	cluster.h	/^    struct clusterNode *slaveof; \/* pointer to the master node. Note that it$/;"	m	struct:clusterNode	typeref:struct:clusterNode::clusterNode
slaves	cluster.h	/^    struct clusterNode **slaves; \/* pointers to slave nodes *\/$/;"	m	struct:clusterNode	typeref:struct:clusterNode::clusterNode
slots	cluster.h	/^    clusterNode *slots[CLUSTER_SLOTS];$/;"	m	struct:clusterState
slots	cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* Slots bitmap. *\/$/;"	m	struct:__anon11
slots	cluster.h	/^    unsigned char slots[CLUSTER_SLOTS\/8]; \/* slots handled by this node *\/$/;"	m	struct:clusterNode
slots_to_keys	cluster.h	/^    zskiplist *slots_to_keys;$/;"	m	struct:clusterState
sndbuf	cluster.h	/^    sds sndbuf;                 \/* Packet send buffer *\/$/;"	m	struct:clusterLink
state	cluster.h	/^    int state;            \/* CLUSTER_OK, CLUSTER_FAIL, ... *\/$/;"	m	struct:clusterState
state	cluster.h	/^    unsigned char state; \/* Cluster state from the POV of the sender *\/$/;"	m	struct:__anon16
stats_bus_messages_received	cluster.h	/^    long long stats_bus_messages_received; \/* Num of msg rcvd via cluster bus.*\/$/;"	m	struct:clusterState
stats_bus_messages_sent	cluster.h	/^    long long stats_bus_messages_sent;  \/* Num of msg sent via cluster bus. *\/$/;"	m	struct:clusterState
time	cluster.h	/^    mstime_t time;             \/* Time of the last report from this node. *\/$/;"	m	struct:clusterNodeFailReport
todo_before_sleep	cluster.h	/^    int todo_before_sleep; \/* Things to do in clusterBeforeSleep(). *\/$/;"	m	struct:clusterState
totlen	cluster.h	/^    uint32_t totlen;    \/* Total length of this message *\/$/;"	m	struct:__anon16
type	cluster.h	/^    uint16_t type;      \/* Message type *\/$/;"	m	struct:__anon16
update	cluster.h	/^    } update;$/;"	m	union:clusterMsgData	typeref:struct:clusterMsgData::__anon15
ver	cluster.h	/^    uint16_t ver;       \/* Protocol version, currently set to 0. *\/$/;"	m	struct:__anon16
voted_time	cluster.h	/^    mstime_t voted_time;     \/* Last time we voted for a slave of this master *\/$/;"	m	struct:clusterNode
REDIS_CONFIG_REWRITE_SIGNATURE	config.c	1252;"	d	file:
aof_fsync_enum	config.c	/^configEnum aof_fsync_enum[] = {$/;"	v
appendServerSaveParams	config.c	/^void appendServerSaveParams(time_t seconds, int changes) {$/;"	f
clientBufferLimitsDefaults	config.c	/^clientBufferLimitsConfig clientBufferLimitsDefaults[CLIENT_TYPE_OBUF_COUNT] = {$/;"	v
configEnum	config.c	/^typedef struct configEnum {$/;"	s	file:
configEnum	config.c	/^} configEnum;$/;"	t	typeref:struct:configEnum	file:
configEnumGetName	config.c	/^const char *configEnumGetName(configEnum *ce, int val) {$/;"	f
configEnumGetNameOrUnknown	config.c	/^const char *configEnumGetNameOrUnknown(configEnum *ce, int val) {$/;"	f
configEnumGetValue	config.c	/^int configEnumGetValue(configEnum *ce, char *name) {$/;"	f
configSetCommand	config.c	/^void configSetCommand(client *c) {$/;"	f
config_get_bool_field	config.c	1028;"	d	file:
config_get_enum_field	config.c	1045;"	d	file:
config_get_numerical_field	config.c	1036;"	d	file:
config_get_string_field	config.c	1020;"	d	file:
config_set_bool_field	config.c	688;"	d	file:
config_set_else	config.c	716;"	d	file:
config_set_enum_field	config.c	707;"	d	file:
config_set_memory_field	config.c	701;"	d	file:
config_set_numerical_field	config.c	694;"	d	file:
config_set_special_field	config.c	713;"	d	file:
evictPolicyToString	config.c	/^const char *evictPolicyToString(void) {$/;"	f
loadServerConfig	config.c	/^void loadServerConfig(char *filename, char *options) {$/;"	f
loadServerConfigFromString	config.c	/^void loadServerConfigFromString(char *config) {$/;"	f
loglevel_enum	config.c	/^configEnum loglevel_enum[] = {$/;"	v
maxmemory_policy_enum	config.c	/^configEnum maxmemory_policy_enum[] = {$/;"	v
name	config.c	/^    const char *name;$/;"	m	struct:configEnum	file:
resetServerSaveParams	config.c	/^void resetServerSaveParams(void) {$/;"	f
supervised_mode_enum	config.c	/^configEnum supervised_mode_enum[] = {$/;"	v
syslog_facility_enum	config.c	/^configEnum syslog_facility_enum[] = {$/;"	v
val	config.c	/^    const int val;$/;"	m	struct:configEnum	file:
yesnotoi	config.c	/^int yesnotoi(char *s) {$/;"	f
BIG_ENDIAN	config.h	142;"	d
BIG_ENDIAN	config.h	176;"	d
BYTE_ORDER	config.h	149;"	d
BYTE_ORDER	config.h	159;"	d
BYTE_ORDER	config.h	179;"	d
BYTE_ORDER	config.h	181;"	d
GNUC_VERSION	config.h	198;"	d
HAVE_ATOMIC	config.h	200;"	d
HAVE_ATOMIC	config.h	204;"	d
HAVE_BACKTRACE	config.h	66;"	d
HAVE_EPOLL	config.h	76;"	d
HAVE_EVPORT	config.h	86;"	d
HAVE_KQUEUE	config.h	80;"	d
HAVE_MSG_NOSIGNAL	config.h	71;"	d
HAVE_PROC_MAPS	config.h	54;"	d
HAVE_PROC_SMAPS	config.h	55;"	d
HAVE_PROC_SOMAXCONN	config.h	56;"	d
HAVE_PROC_STAT	config.h	53;"	d
HAVE_SYNC_FILE_RANGE	config.h	102;"	d
HAVE_SYNC_FILE_RANGE	config.h	106;"	d
HAVE_TASKINFO	config.h	61;"	d
INIT_SETPROCTITLE_REPLACEMENT	config.h	126;"	d
LITTLE_ENDIAN	config.h	141;"	d
LITTLE_ENDIAN	config.h	173;"	d
PDP_ENDIAN	config.h	143;"	d
USE_SETPROCTITLE	config.h	121;"	d
USE_SETPROCTITLE	config.h	125;"	d
__CONFIG_H	config.h	31;"	d
aof_fsync	config.h	92;"	d
aof_fsync	config.h	94;"	d
rdb_fsync_range	config.h	112;"	d
rdb_fsync_range	config.h	114;"	d
redis_fstat	config.h	44;"	d
redis_fstat	config.h	47;"	d
redis_stat	config.h	45;"	d
redis_stat	config.h	48;"	d
crc16	crc16.c	/^uint16_t crc16(const char *buf, int len) {$/;"	f
crc16tab	crc16.c	/^static const uint16_t crc16tab[256]= {$/;"	v	file:
UNUSED	crc64.c	187;"	d	file:
crc64	crc64.c	/^uint64_t crc64(uint64_t crc, const unsigned char *s, uint64_t l) {$/;"	f
crc64Test	crc64.c	/^int crc64Test(int argc, char *argv[]) {$/;"	f
crc64_tab	crc64.c	/^static const uint64_t crc64_tab[256] = {$/;"	v	file:
CRC64_H	crc64.h	2;"	d
countKeysInSlot	db.c	/^unsigned int countKeysInSlot(unsigned int hashslot) {$/;"	f
dbAdd	db.c	/^void dbAdd(redisDb *db, robj *key, robj *val) {$/;"	f
dbDelete	db.c	/^int dbDelete(redisDb *db, robj *key) {$/;"	f
dbExists	db.c	/^int dbExists(redisDb *db, robj *key) {$/;"	f
dbOverwrite	db.c	/^void dbOverwrite(redisDb *db, robj *key, robj *val) {$/;"	f
dbRandomKey	db.c	/^robj *dbRandomKey(redisDb *db) {$/;"	f
dbUnshareStringValue	db.c	/^robj *dbUnshareStringValue(redisDb *db, robj *key, robj *o) {$/;"	f
dbsizeCommand	db.c	/^void dbsizeCommand(client *c) {$/;"	f
delCommand	db.c	/^void delCommand(client *c) {$/;"	f
delKeysInSlot	db.c	/^unsigned int delKeysInSlot(unsigned int hashslot) {$/;"	f
emptyDb	db.c	/^long long emptyDb(void(callback)(void*)) {$/;"	f
evalGetKeys	db.c	/^int *evalGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
existsCommand	db.c	/^void existsCommand(client *c) {$/;"	f
expireCommand	db.c	/^void expireCommand(client *c) {$/;"	f
expireGenericCommand	db.c	/^void expireGenericCommand(client *c, long long basetime, int unit) {$/;"	f
expireIfNeeded	db.c	/^int expireIfNeeded(redisDb *db, robj *key) {$/;"	f
expireatCommand	db.c	/^void expireatCommand(client *c) {$/;"	f
flushallCommand	db.c	/^void flushallCommand(client *c) {$/;"	f
flushdbCommand	db.c	/^void flushdbCommand(client *c) {$/;"	f
getExpire	db.c	/^long long getExpire(redisDb *db, robj *key) {$/;"	f
getKeysFreeResult	db.c	/^void getKeysFreeResult(int *result) {$/;"	f
getKeysFromCommand	db.c	/^int *getKeysFromCommand(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
getKeysInSlot	db.c	/^unsigned int getKeysInSlot(unsigned int hashslot, robj **keys, unsigned int count) {$/;"	f
getKeysUsingCommandTable	db.c	/^int *getKeysUsingCommandTable(struct redisCommand *cmd,robj **argv, int argc, int *numkeys) {$/;"	f
keysCommand	db.c	/^void keysCommand(client *c) {$/;"	f
lastsaveCommand	db.c	/^void lastsaveCommand(client *c) {$/;"	f
lookupKey	db.c	/^robj *lookupKey(redisDb *db, robj *key, int flags) {$/;"	f
lookupKeyRead	db.c	/^robj *lookupKeyRead(redisDb *db, robj *key) {$/;"	f
lookupKeyReadOrReply	db.c	/^robj *lookupKeyReadOrReply(client *c, robj *key, robj *reply) {$/;"	f
lookupKeyReadWithFlags	db.c	/^robj *lookupKeyReadWithFlags(redisDb *db, robj *key, int flags) {$/;"	f
lookupKeyWrite	db.c	/^robj *lookupKeyWrite(redisDb *db, robj *key) {$/;"	f
lookupKeyWriteOrReply	db.c	/^robj *lookupKeyWriteOrReply(client *c, robj *key, robj *reply) {$/;"	f
migrateGetKeys	db.c	/^int *migrateGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
moveCommand	db.c	/^void moveCommand(client *c) {$/;"	f
parseScanCursorOrReply	db.c	/^int parseScanCursorOrReply(client *c, robj *o, unsigned long *cursor) {$/;"	f
persistCommand	db.c	/^void persistCommand(client *c) {$/;"	f
pexpireCommand	db.c	/^void pexpireCommand(client *c) {$/;"	f
pexpireatCommand	db.c	/^void pexpireatCommand(client *c) {$/;"	f
propagateExpire	db.c	/^void propagateExpire(redisDb *db, robj *key) {$/;"	f
pttlCommand	db.c	/^void pttlCommand(client *c) {$/;"	f
randomkeyCommand	db.c	/^void randomkeyCommand(client *c) {$/;"	f
removeExpire	db.c	/^int removeExpire(redisDb *db, robj *key) {$/;"	f
renameCommand	db.c	/^void renameCommand(client *c) {$/;"	f
renameGenericCommand	db.c	/^void renameGenericCommand(client *c, int nx) {$/;"	f
renamenxCommand	db.c	/^void renamenxCommand(client *c) {$/;"	f
scanCallback	db.c	/^void scanCallback(void *privdata, const dictEntry *de) {$/;"	f
scanCommand	db.c	/^void scanCommand(client *c) {$/;"	f
scanGenericCommand	db.c	/^void scanGenericCommand(client *c, robj *o, unsigned long cursor) {$/;"	f
selectCommand	db.c	/^void selectCommand(client *c) {$/;"	f
selectDb	db.c	/^int selectDb(client *c, int id) {$/;"	f
setExpire	db.c	/^void setExpire(redisDb *db, robj *key, long long when) {$/;"	f
setKey	db.c	/^void setKey(redisDb *db, robj *key, robj *val) {$/;"	f
shutdownCommand	db.c	/^void shutdownCommand(client *c) {$/;"	f
signalFlushedDb	db.c	/^void signalFlushedDb(int dbid) {$/;"	f
signalModifiedKey	db.c	/^void signalModifiedKey(redisDb *db, robj *key) {$/;"	f
slotToKeyAdd	db.c	/^void slotToKeyAdd(robj *key) {$/;"	f
slotToKeyDel	db.c	/^void slotToKeyDel(robj *key) {$/;"	f
slotToKeyFlush	db.c	/^void slotToKeyFlush(void) {$/;"	f
sortGetKeys	db.c	/^int *sortGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
touchCommand	db.c	/^void touchCommand(client *c) {$/;"	f
ttlCommand	db.c	/^void ttlCommand(client *c) {$/;"	f
ttlGenericCommand	db.c	/^void ttlGenericCommand(client *c, int output_ms) {$/;"	f
typeCommand	db.c	/^void typeCommand(client *c) {$/;"	f
zunionInterGetKeys	db.c	/^int *zunionInterGetKeys(struct redisCommand *cmd, robj **argv, int argc, int *numkeys) {$/;"	f
MEMTEST_MAX_REGIONS	debug.c	914;"	d	file:
SA_ONSTACK	debug.c	48;"	d	file:
_serverAssert	debug.c	/^void _serverAssert(char *estr, char *file, int line) {$/;"	f
_serverAssertPrintClientInfo	debug.c	/^void _serverAssertPrintClientInfo(client *c) {$/;"	f
_serverAssertPrintObject	debug.c	/^void _serverAssertPrintObject(robj *o) {$/;"	f
_serverAssertWithInfo	debug.c	/^void _serverAssertWithInfo(client *c, robj *o, char *estr, char *file, int line) {$/;"	f
_serverPanic	debug.c	/^void _serverPanic(char *msg, char *file, int line) {$/;"	f
bugReportStart	debug.c	/^void bugReportStart(void) {$/;"	f
closeDirectLogFiledes	debug.c	/^void closeDirectLogFiledes(int fd) {$/;"	f
computeDatasetDigest	debug.c	/^void computeDatasetDigest(unsigned char *final) {$/;"	f
debugCommand	debug.c	/^void debugCommand(client *c) {$/;"	f
disableWatchdog	debug.c	/^void disableWatchdog(void) {$/;"	f
dumpX86Calls	debug.c	/^void dumpX86Calls(void *addr, size_t len) {$/;"	f
enableWatchdog	debug.c	/^void enableWatchdog(int period) {$/;"	f
getMcontextEip	debug.c	/^static void *getMcontextEip(ucontext_t *uc) {$/;"	f	file:
inputCatSds	debug.c	/^void inputCatSds(void *result, const char *str) {$/;"	f
logCurrentClient	debug.c	/^void logCurrentClient(void) {$/;"	f
logRegisters	debug.c	/^void logRegisters(ucontext_t *uc) {$/;"	f
logStackContent	debug.c	/^void logStackContent(void **sp) {$/;"	f
logStackTrace	debug.c	/^void logStackTrace(ucontext_t *uc) {$/;"	f
memtest_test_linux_anonymous_maps	debug.c	/^int memtest_test_linux_anonymous_maps(void) {$/;"	f
mixDigest	debug.c	/^void mixDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f
mixObjectDigest	debug.c	/^void mixObjectDigest(unsigned char *digest, robj *o) {$/;"	f
openDirectLogFiledes	debug.c	/^int openDirectLogFiledes(void) {$/;"	f
serverLogHexDump	debug.c	/^void serverLogHexDump(int level, char *descr, void *value, size_t len) {$/;"	f
serverLogObjectDebugInfo	debug.c	/^void serverLogObjectDebugInfo(robj *o) {$/;"	f
sigsegvHandler	debug.c	/^void sigsegvHandler(int sig, siginfo_t *info, void *secret) {$/;"	f
watchdogScheduleSignal	debug.c	/^void watchdogScheduleSignal(int period) {$/;"	f
watchdogSignalHandler	debug.c	/^void watchdogSignalHandler(int sig, siginfo_t *info, void *secret) {$/;"	f
xorDigest	debug.c	/^void xorDigest(unsigned char *digest, void *ptr, size_t len) {$/;"	f
xorObjectDigest	debug.c	/^void xorObjectDigest(unsigned char *digest, robj *o) {$/;"	f
D	debugmacro.h	34;"	d
DICT_STATS_VECTLEN	dict.c	1007;"	d	file:
_dictClear	dict.c	/^int _dictClear(dict *d, dictht *ht, void(callback)(void *)) {$/;"	f
_dictExpandIfNeeded	dict.c	/^static int _dictExpandIfNeeded(dict *d)$/;"	f	file:
_dictGetStatsHt	dict.c	/^size_t _dictGetStatsHt(char *buf, size_t bufsize, dictht *ht, int tableid) {$/;"	f
_dictInit	dict.c	/^int _dictInit(dict *d, dictType *type,$/;"	f
_dictKeyIndex	dict.c	/^static int _dictKeyIndex(dict *d, const void *key)$/;"	f	file:
_dictNextPower	dict.c	/^static unsigned long _dictNextPower(unsigned long size)$/;"	f	file:
_dictRehashStep	dict.c	/^static void _dictRehashStep(dict *d) {$/;"	f	file:
_dictReset	dict.c	/^static void _dictReset(dictht *ht)$/;"	f	file:
dictAdd	dict.c	/^int dictAdd(dict *d, void *key, void *val)$/;"	f
dictAddRaw	dict.c	/^dictEntry *dictAddRaw(dict *d, void *key)$/;"	f
dictCreate	dict.c	/^dict *dictCreate(dictType *type,$/;"	f
dictDelete	dict.c	/^int dictDelete(dict *ht, const void *key) {$/;"	f
dictDeleteNoFree	dict.c	/^int dictDeleteNoFree(dict *ht, const void *key) {$/;"	f
dictDisableResize	dict.c	/^void dictDisableResize(void) {$/;"	f
dictEmpty	dict.c	/^void dictEmpty(dict *d, void(callback)(void*)) {$/;"	f
dictEnableResize	dict.c	/^void dictEnableResize(void) {$/;"	f
dictExpand	dict.c	/^int dictExpand(dict *d, unsigned long size)$/;"	f
dictFetchValue	dict.c	/^void *dictFetchValue(dict *d, const void *key) {$/;"	f
dictFind	dict.c	/^dictEntry *dictFind(dict *d, const void *key)$/;"	f
dictFingerprint	dict.c	/^long long dictFingerprint(dict *d) {$/;"	f
dictGenCaseHashFunction	dict.c	/^unsigned int dictGenCaseHashFunction(const unsigned char *buf, int len) {$/;"	f
dictGenHashFunction	dict.c	/^unsigned int dictGenHashFunction(const void *key, int len) {$/;"	f
dictGenericDelete	dict.c	/^static int dictGenericDelete(dict *d, const void *key, int nofree)$/;"	f	file:
dictGetHashFunctionSeed	dict.c	/^uint32_t dictGetHashFunctionSeed(void) {$/;"	f
dictGetIterator	dict.c	/^dictIterator *dictGetIterator(dict *d)$/;"	f
dictGetRandomKey	dict.c	/^dictEntry *dictGetRandomKey(dict *d)$/;"	f
dictGetSafeIterator	dict.c	/^dictIterator *dictGetSafeIterator(dict *d) {$/;"	f
dictGetSomeKeys	dict.c	/^unsigned int dictGetSomeKeys(dict *d, dictEntry **des, unsigned int count) {$/;"	f
dictGetStats	dict.c	/^void dictGetStats(char *buf, size_t bufsize, dict *d) {$/;"	f
dictIntHashFunction	dict.c	/^unsigned int dictIntHashFunction(unsigned int key)$/;"	f
dictNext	dict.c	/^dictEntry *dictNext(dictIterator *iter)$/;"	f
dictRehash	dict.c	/^int dictRehash(dict *d, int n) {$/;"	f
dictRehashMilliseconds	dict.c	/^int dictRehashMilliseconds(dict *d, int ms) {$/;"	f
dictRelease	dict.c	/^void dictRelease(dict *d)$/;"	f
dictReleaseIterator	dict.c	/^void dictReleaseIterator(dictIterator *iter)$/;"	f
dictReplace	dict.c	/^int dictReplace(dict *d, void *key, void *val)$/;"	f
dictReplaceRaw	dict.c	/^dictEntry *dictReplaceRaw(dict *d, void *key) {$/;"	f
dictResize	dict.c	/^int dictResize(dict *d)$/;"	f
dictScan	dict.c	/^unsigned long dictScan(dict *d,$/;"	f
dictSetHashFunctionSeed	dict.c	/^void dictSetHashFunctionSeed(uint32_t seed) {$/;"	f
dict_can_resize	dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_force_resize_ratio	dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_hash_function_seed	dict.c	/^static uint32_t dict_hash_function_seed = 5381;$/;"	v	file:
rev	dict.c	/^static unsigned long rev(unsigned long v) {$/;"	f	file:
timeInMilliseconds	dict.c	/^long long timeInMilliseconds(void) {$/;"	f
DICT_ERR	dict.h	42;"	d
DICT_HT_INITIAL_SIZE	dict.h	100;"	d
DICT_NOTUSED	dict.h	45;"	d
DICT_OK	dict.h	41;"	d
__DICT_H	dict.h	39;"	d
d	dict.h	/^        double d;$/;"	m	union:dictEntry::__anon18
d	dict.h	/^    dict *d;$/;"	m	struct:dictIterator
dict	dict.h	/^typedef struct dict {$/;"	s
dict	dict.h	/^} dict;$/;"	t	typeref:struct:dict
dictCompareKeys	dict.h	134;"	d
dictEntry	dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictFreeKey	dict.h	123;"	d
dictFreeVal	dict.h	103;"	d
dictGetDoubleVal	dict.h	144;"	d
dictGetKey	dict.h	140;"	d
dictGetSignedIntegerVal	dict.h	142;"	d
dictGetUnsignedIntegerVal	dict.h	143;"	d
dictGetVal	dict.h	141;"	d
dictHashKey	dict.h	139;"	d
dictIsRehashing	dict.h	147;"	d
dictIterator	dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictScanFunction	dict.h	/^typedef void (dictScanFunction)(void *privdata, const dictEntry *de);$/;"	t
dictSetDoubleVal	dict.h	120;"	d
dictSetKey	dict.h	127;"	d
dictSetSignedIntegerVal	dict.h	114;"	d
dictSetUnsignedIntegerVal	dict.h	117;"	d
dictSetVal	dict.h	107;"	d
dictSize	dict.h	146;"	d
dictSlots	dict.h	145;"	d
dictType	dict.h	/^typedef struct dictType {$/;"	s
dictType	dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dictht	dict.h	/^typedef struct dictht {$/;"	s
dictht	dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
entry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
fingerprint	dict.h	/^    long long fingerprint;$/;"	m	struct:dictIterator
hashFunction	dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
ht	dict.h	/^    dictht ht[2];$/;"	m	struct:dict
index	dict.h	/^    long index;$/;"	m	struct:dictIterator
iterators	dict.h	/^    int iterators; \/* number of iterators currently running *\/$/;"	m	struct:dict
key	dict.h	/^    void *key;$/;"	m	struct:dictEntry
keyCompare	dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
next	dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
nextEntry	dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict
rehashidx	dict.h	/^    long rehashidx; \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict
s64	dict.h	/^        int64_t s64;$/;"	m	union:dictEntry::__anon18
safe	dict.h	/^    int table, safe;$/;"	m	struct:dictIterator
size	dict.h	/^    unsigned long size;$/;"	m	struct:dictht
sizemask	dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht
table	dict.h	/^    dictEntry **table;$/;"	m	struct:dictht
table	dict.h	/^    int table, safe;$/;"	m	struct:dictIterator
type	dict.h	/^    dictType *type;$/;"	m	struct:dict
u64	dict.h	/^        uint64_t u64;$/;"	m	union:dictEntry::__anon18
used	dict.h	/^    unsigned long used;$/;"	m	struct:dictht
v	dict.h	/^    } v;$/;"	m	struct:dictEntry	typeref:union:dictEntry::__anon18
val	dict.h	/^        void *val;$/;"	m	union:dictEntry::__anon18
valDestructor	dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
UNUSED	endianconv.c	107;"	d	file:
endianconvTest	endianconv.c	/^int endianconvTest(int argc, char *argv[]) {$/;"	f
intrev16	endianconv.c	/^uint16_t intrev16(uint16_t v) {$/;"	f
intrev32	endianconv.c	/^uint32_t intrev32(uint32_t v) {$/;"	f
intrev64	endianconv.c	/^uint64_t intrev64(uint64_t v) {$/;"	f
memrev16	endianconv.c	/^void memrev16(void *p) {$/;"	f
memrev32	endianconv.c	/^void memrev32(void *p) {$/;"	f
memrev64	endianconv.c	/^void memrev64(void *p) {$/;"	f
__ENDIANCONV_H	endianconv.h	34;"	d
htonu64	endianconv.h	67;"	d
htonu64	endianconv.h	70;"	d
intrev16ifbe	endianconv.h	52;"	d
intrev16ifbe	endianconv.h	59;"	d
intrev32ifbe	endianconv.h	53;"	d
intrev32ifbe	endianconv.h	60;"	d
intrev64ifbe	endianconv.h	54;"	d
intrev64ifbe	endianconv.h	61;"	d
memrev16ifbe	endianconv.h	49;"	d
memrev16ifbe	endianconv.h	56;"	d
memrev32ifbe	endianconv.h	50;"	d
memrev32ifbe	endianconv.h	57;"	d
memrev64ifbe	endianconv.h	51;"	d
memrev64ifbe	endianconv.h	58;"	d
ntohu64	endianconv.h	68;"	d
ntohu64	endianconv.h	71;"	d
_ALL_SOURCE	fmacros.h	41;"	d
_BSD_SOURCE	fmacros.h	33;"	d
_DEFAULT_SOURCE	fmacros.h	37;"	d
_FILE_OFFSET_BITS	fmacros.h	59;"	d
_GNU_SOURCE	fmacros.h	36;"	d
_LARGEFILE_SOURCE	fmacros.h	58;"	d
_POSIX_C_SOURCE	fmacros.h	55;"	d
_REDIS_FMACRO_H	fmacros.h	31;"	d
_XOPEN_SOURCE	fmacros.h	45;"	d
_XOPEN_SOURCE	fmacros.h	51;"	d
RADIUS_COORDS	geo.c	457;"	d	file:
RADIUS_MEMBER	geo.c	458;"	d	file:
SORT_ASC	geo.c	454;"	d	file:
SORT_DESC	geo.c	455;"	d	file:
SORT_NONE	geo.c	453;"	d	file:
addReplyDoubleDistance	geo.c	/^void addReplyDoubleDistance(client *c, double d) {$/;"	f
decodeGeohash	geo.c	/^int decodeGeohash(double bits, double *xy) {$/;"	f
extractDistanceOrReply	geo.c	/^double extractDistanceOrReply(client *c, robj **argv,$/;"	f
extractLongLatOrReply	geo.c	/^int extractLongLatOrReply(client *c, robj **argv, double *xy) {$/;"	f
extractUnitOrReply	geo.c	/^double extractUnitOrReply(client *c, robj *unit) {$/;"	f
geoAppendIfWithinRadius	geo.c	/^int geoAppendIfWithinRadius(geoArray *ga, double lon, double lat, double radius, double score, sds member) {$/;"	f
geoArrayAppend	geo.c	/^geoPoint *geoArrayAppend(geoArray *ga) {$/;"	f
geoArrayCreate	geo.c	/^geoArray *geoArrayCreate(void) {$/;"	f
geoArrayFree	geo.c	/^void geoArrayFree(geoArray *ga) {$/;"	f
geoGetPointsInRange	geo.c	/^int geoGetPointsInRange(robj *zobj, double min, double max, double lon, double lat, double radius, geoArray *ga) {$/;"	f
geoaddCommand	geo.c	/^void geoaddCommand(client *c) {$/;"	f
geodistCommand	geo.c	/^void geodistCommand(client *c) {$/;"	f
geohashCommand	geo.c	/^void geohashCommand(client *c) {$/;"	f
geoposCommand	geo.c	/^void geoposCommand(client *c) {$/;"	f
georadiusByMemberCommand	geo.c	/^void georadiusByMemberCommand(client *c) {$/;"	f
georadiusCommand	geo.c	/^void georadiusCommand(client *c) {$/;"	f
georadiusGeneric	geo.c	/^void georadiusGeneric(client *c, int type) {$/;"	f
longLatFromMember	geo.c	/^int longLatFromMember(robj *zobj, robj *member, double *xy) {$/;"	f
membersOfAllNeighbors	geo.c	/^int membersOfAllNeighbors(robj *zobj, GeoHashRadius n, double lon, double lat, double radius, geoArray *ga) {$/;"	f
membersOfGeoHashBox	geo.c	/^int membersOfGeoHashBox(robj *zobj, GeoHashBits hash, geoArray *ga, double lon, double lat, double radius) {$/;"	f
scoresOfGeoHashBox	geo.c	/^void scoresOfGeoHashBox(GeoHashBits hash, GeoHashFix52Bits *min, GeoHashFix52Bits *max) {$/;"	f
sort_gp_asc	geo.c	/^static int sort_gp_asc(const void *a, const void *b) {$/;"	f	file:
sort_gp_desc	geo.c	/^static int sort_gp_desc(const void *a, const void *b) {$/;"	f	file:
__GEO_H__	geo.h	2;"	d
array	geo.h	/^    struct geoPoint *array;$/;"	m	struct:geoArray	typeref:struct:geoArray::geoPoint
buckets	geo.h	/^    size_t buckets;$/;"	m	struct:geoArray
dist	geo.h	/^    double dist;$/;"	m	struct:geoPoint
geoArray	geo.h	/^typedef struct geoArray {$/;"	s
geoArray	geo.h	/^} geoArray;$/;"	t	typeref:struct:geoArray
geoPoint	geo.h	/^typedef struct geoPoint {$/;"	s
geoPoint	geo.h	/^} geoPoint;$/;"	t	typeref:struct:geoPoint
latitude	geo.h	/^    double latitude;$/;"	m	struct:geoPoint
longitude	geo.h	/^    double longitude;$/;"	m	struct:geoPoint
member	geo.h	/^    char *member;$/;"	m	struct:geoPoint
score	geo.h	/^    double score;$/;"	m	struct:geoPoint
used	geo.h	/^    size_t used;$/;"	m	struct:geoArray
__REDIS_HELP_H	help.h	4;"	d
commandGroups	help.h	/^static char *commandGroups[] = {$/;"	v
commandHelp	help.h	/^struct commandHelp {$/;"	s
commandHelp	help.h	/^} commandHelp[] = {$/;"	v	typeref:struct:commandHelp
group	help.h	/^  int group;$/;"	m	struct:commandHelp
name	help.h	/^  char *name;$/;"	m	struct:commandHelp
params	help.h	/^  char *params;$/;"	m	struct:commandHelp
since	help.h	/^  char *since;$/;"	m	struct:commandHelp
summary	help.h	/^  char *summary;$/;"	m	struct:commandHelp
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
HLL_BITS	hyperloglog.c	197;"	d	file:
HLL_DENSE	hyperloglog.c	201;"	d	file:
HLL_DENSE_GET_REGISTER	hyperloglog.c	337;"	d	file:
HLL_DENSE_SET_REGISTER	hyperloglog.c	349;"	d	file:
HLL_DENSE_SIZE	hyperloglog.c	200;"	d	file:
HLL_HDR_SIZE	hyperloglog.c	199;"	d	file:
HLL_INVALIDATE_CACHE	hyperloglog.c	191;"	d	file:
HLL_MAX_ENCODING	hyperloglog.c	204;"	d	file:
HLL_P	hyperloglog.c	194;"	d	file:
HLL_P_MASK	hyperloglog.c	196;"	d	file:
HLL_RAW	hyperloglog.c	203;"	d	file:
HLL_REGISTERS	hyperloglog.c	195;"	d	file:
HLL_REGISTER_MAX	hyperloglog.c	198;"	d	file:
HLL_SPARSE	hyperloglog.c	202;"	d	file:
HLL_SPARSE_IS_VAL	hyperloglog.c	367;"	d	file:
HLL_SPARSE_IS_XZERO	hyperloglog.c	366;"	d	file:
HLL_SPARSE_IS_ZERO	hyperloglog.c	365;"	d	file:
HLL_SPARSE_VAL_BIT	hyperloglog.c	364;"	d	file:
HLL_SPARSE_VAL_LEN	hyperloglog.c	371;"	d	file:
HLL_SPARSE_VAL_MAX_LEN	hyperloglog.c	373;"	d	file:
HLL_SPARSE_VAL_MAX_VALUE	hyperloglog.c	372;"	d	file:
HLL_SPARSE_VAL_SET	hyperloglog.c	376;"	d	file:
HLL_SPARSE_VAL_VALUE	hyperloglog.c	370;"	d	file:
HLL_SPARSE_XZERO_BIT	hyperloglog.c	363;"	d	file:
HLL_SPARSE_XZERO_LEN	hyperloglog.c	369;"	d	file:
HLL_SPARSE_XZERO_MAX_LEN	hyperloglog.c	375;"	d	file:
HLL_SPARSE_XZERO_SET	hyperloglog.c	382;"	d	file:
HLL_SPARSE_ZERO_LEN	hyperloglog.c	368;"	d	file:
HLL_SPARSE_ZERO_MAX_LEN	hyperloglog.c	374;"	d	file:
HLL_SPARSE_ZERO_SET	hyperloglog.c	379;"	d	file:
HLL_TEST_CYCLES	hyperloglog.c	1350;"	d	file:
HLL_VALID_CACHE	hyperloglog.c	192;"	d	file:
MurmurHash64A	hyperloglog.c	/^uint64_t MurmurHash64A (const void * key, int len, unsigned int seed) {$/;"	f
card	hyperloglog.c	/^    uint8_t card[8];    \/* Cached cardinality, little endian. *\/$/;"	m	struct:hllhdr	file:
createHLLObject	hyperloglog.c	/^robj *createHLLObject(void) {$/;"	f
encoding	hyperloglog.c	/^    uint8_t encoding;   \/* HLL_DENSE or HLL_SPARSE. *\/$/;"	m	struct:hllhdr	file:
hllAdd	hyperloglog.c	/^int hllAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f
hllCount	hyperloglog.c	/^uint64_t hllCount(struct hllhdr *hdr, int *invalid) {$/;"	f
hllDenseAdd	hyperloglog.c	/^int hllDenseAdd(uint8_t *registers, unsigned char *ele, size_t elesize) {$/;"	f
hllDenseSum	hyperloglog.c	/^double hllDenseSum(uint8_t *registers, double *PE, int *ezp) {$/;"	f
hllMerge	hyperloglog.c	/^int hllMerge(uint8_t *max, robj *hll) {$/;"	f
hllPatLen	hyperloglog.c	/^int hllPatLen(unsigned char *ele, size_t elesize, long *regp) {$/;"	f
hllRawSum	hyperloglog.c	/^double hllRawSum(uint8_t *registers, double *PE, int *ezp) {$/;"	f
hllSparseAdd	hyperloglog.c	/^int hllSparseAdd(robj *o, unsigned char *ele, size_t elesize) {$/;"	f
hllSparseSum	hyperloglog.c	/^double hllSparseSum(uint8_t *sparse, int sparselen, double *PE, int *ezp, int *invalid) {$/;"	f
hllSparseToDense	hyperloglog.c	/^int hllSparseToDense(robj *o) {$/;"	f
hllhdr	hyperloglog.c	/^struct hllhdr {$/;"	s	file:
invalid_hll_err	hyperloglog.c	/^static char *invalid_hll_err = "-INVALIDOBJ Corrupted HLL object detected\\r\\n";$/;"	v	file:
isHLLObjectOrReply	hyperloglog.c	/^int isHLLObjectOrReply(client *c, robj *o) {$/;"	f
magic	hyperloglog.c	/^    char magic[4];      \/* "HYLL" *\/$/;"	m	struct:hllhdr	file:
notused	hyperloglog.c	/^    uint8_t notused[3]; \/* Reserved for future use, must be zero. *\/$/;"	m	struct:hllhdr	file:
pfaddCommand	hyperloglog.c	/^void pfaddCommand(client *c) {$/;"	f
pfcountCommand	hyperloglog.c	/^void pfcountCommand(client *c) {$/;"	f
pfdebugCommand	hyperloglog.c	/^void pfdebugCommand(client *c) {$/;"	f
pfmergeCommand	hyperloglog.c	/^void pfmergeCommand(client *c) {$/;"	f
pfselftestCommand	hyperloglog.c	/^void pfselftestCommand(client *c) {$/;"	f
registers	hyperloglog.c	/^    uint8_t registers[]; \/* Data bytes. *\/$/;"	m	struct:hllhdr	file:
INTSET_ENC_INT16	intset.c	40;"	d	file:
INTSET_ENC_INT32	intset.c	41;"	d	file:
INTSET_ENC_INT64	intset.c	42;"	d	file:
UNUSED	intset.c	351;"	d	file:
_assert	intset.c	/^static void _assert(char *estr, char *file, int line) {$/;"	f	file:
_intsetGet	intset.c	/^static int64_t _intsetGet(intset *is, int pos) {$/;"	f	file:
_intsetGetEncoded	intset.c	/^static int64_t _intsetGetEncoded(intset *is, int pos, uint8_t enc) {$/;"	f	file:
_intsetSet	intset.c	/^static void _intsetSet(intset *is, int pos, int64_t value) {$/;"	f	file:
_intsetValueEncoding	intset.c	/^static uint8_t _intsetValueEncoding(int64_t v) {$/;"	f	file:
assert	intset.c	312;"	d	file:
checkConsistency	intset.c	/^static void checkConsistency(intset *is) {$/;"	f	file:
createSet	intset.c	/^static intset *createSet(int bits, int size) {$/;"	f	file:
intsetAdd	intset.c	/^intset *intsetAdd(intset *is, int64_t value, uint8_t *success) {$/;"	f
intsetBlobLen	intset.c	/^size_t intsetBlobLen(intset *is) {$/;"	f
intsetFind	intset.c	/^uint8_t intsetFind(intset *is, int64_t value) {$/;"	f
intsetGet	intset.c	/^uint8_t intsetGet(intset *is, uint32_t pos, int64_t *value) {$/;"	f
intsetLen	intset.c	/^uint32_t intsetLen(intset *is) {$/;"	f
intsetMoveTail	intset.c	/^static void intsetMoveTail(intset *is, uint32_t from, uint32_t to) {$/;"	f	file:
intsetNew	intset.c	/^intset *intsetNew(void) {$/;"	f
intsetRandom	intset.c	/^int64_t intsetRandom(intset *is) {$/;"	f
intsetRemove	intset.c	/^intset *intsetRemove(intset *is, int64_t value, int *success) {$/;"	f
intsetResize	intset.c	/^static intset *intsetResize(intset *is, uint32_t len) {$/;"	f	file:
intsetSearch	intset.c	/^static uint8_t intsetSearch(intset *is, int64_t value, uint32_t *pos) {$/;"	f	file:
intsetTest	intset.c	/^int intsetTest(int argc, char **argv) {$/;"	f
intsetUpgradeAndAdd	intset.c	/^static intset *intsetUpgradeAndAdd(intset *is, int64_t value) {$/;"	f	file:
ok	intset.c	/^static void ok(void) {$/;"	f	file:
usec	intset.c	/^static long long usec(void) {$/;"	f	file:
__INTSET_H	intset.h	32;"	d
contents	intset.h	/^    int8_t contents[];$/;"	m	struct:intset
encoding	intset.h	/^    uint32_t encoding;$/;"	m	struct:intset
intset	intset.h	/^typedef struct intset {$/;"	s
intset	intset.h	/^} intset;$/;"	t	typeref:struct:intset
length	intset.h	/^    uint32_t length;$/;"	m	struct:intset
LATENCY_GRAPH_COLS	latency.c	515;"	d	file:
THPGetAnonHugePagesSize	latency.c	/^int THPGetAnonHugePagesSize(void) {$/;"	f
THPIsEnabled	latency.c	/^int THPIsEnabled(void) {$/;"	f
analyzeLatencyForEvent	latency.c	/^void analyzeLatencyForEvent(char *event, struct latencyStats *ls) {$/;"	f
createLatencyReport	latency.c	/^sds createLatencyReport(void) {$/;"	f
dictStringHash	latency.c	/^unsigned int dictStringHash(const void *key) {$/;"	f
dictStringKeyCompare	latency.c	/^int dictStringKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f
latencyAddSample	latency.c	/^void latencyAddSample(char *event, mstime_t latency) {$/;"	f
latencyCommand	latency.c	/^void latencyCommand(client *c) {$/;"	f
latencyCommandGenSparkeline	latency.c	/^sds latencyCommandGenSparkeline(char *event, struct latencyTimeSeries *ts) {$/;"	f
latencyCommandReplyWithLatestEvents	latency.c	/^void latencyCommandReplyWithLatestEvents(client *c) {$/;"	f
latencyCommandReplyWithSamples	latency.c	/^void latencyCommandReplyWithSamples(client *c, struct latencyTimeSeries *ts) {$/;"	f
latencyMonitorInit	latency.c	/^void latencyMonitorInit(void) {$/;"	f
latencyResetEvent	latency.c	/^int latencyResetEvent(char *event_to_reset) {$/;"	f
latencyTimeSeriesDictType	latency.c	/^dictType latencyTimeSeriesDictType = {$/;"	v
LATENCY_TS_LEN	latency.h	37;"	d
__LATENCY_H	latency.h	35;"	d
all_time_high	latency.h	/^    uint32_t all_time_high; \/* Absolute max observed since latest reset. *\/$/;"	m	struct:latencyStats
avg	latency.h	/^    uint32_t avg;           \/* Average of current samples. *\/$/;"	m	struct:latencyStats
idx	latency.h	/^    int idx; \/* Index of the next sample to store. *\/$/;"	m	struct:latencyTimeSeries
latency	latency.h	/^    uint32_t latency; \/* Latency in milliseconds. *\/$/;"	m	struct:latencySample
latencyAddSampleIfNeeded	latency.h	84;"	d
latencyEndMonitor	latency.h	79;"	d
latencyRemoveNestedEvent	latency.h	90;"	d
latencySample	latency.h	/^struct latencySample {$/;"	s
latencyStartMonitor	latency.h	71;"	d
latencyStats	latency.h	/^struct latencyStats {$/;"	s
latencyTimeSeries	latency.h	/^struct latencyTimeSeries {$/;"	s
mad	latency.h	/^    uint32_t mad;           \/* Mean absolute deviation. *\/$/;"	m	struct:latencyStats
max	latency.h	/^    uint32_t max;           \/* Max of current samples. *\/$/;"	m	struct:latencyStats
max	latency.h	/^    uint32_t max; \/* Max latency observed for this event. *\/$/;"	m	struct:latencyTimeSeries
min	latency.h	/^    uint32_t min;           \/* Min of current samples. *\/$/;"	m	struct:latencyStats
period	latency.h	/^    time_t period;          \/* Number of seconds since first event and now. *\/$/;"	m	struct:latencyStats
samples	latency.h	/^    struct latencySample samples[LATENCY_TS_LEN]; \/* Latest history. *\/$/;"	m	struct:latencyTimeSeries	typeref:struct:latencyTimeSeries::latencySample
samples	latency.h	/^    uint32_t samples;       \/* Number of non-zero samples. *\/$/;"	m	struct:latencyStats
time	latency.h	/^    int32_t time; \/* We don't use time_t to force 4 bytes usage everywhere. *\/$/;"	m	struct:latencySample
LZF_H	lzf.h	38;"	d
LZF_VERSION	lzf.h	49;"	d
AVOID_ERRNO	lzfP.h	100;"	d
CHECK_INPUT	lzfP.h	121;"	d
HLOG	lzfP.h	55;"	d
INIT_HTAB	lzfP.h	91;"	d
LZFP_h	lzfP.h	38;"	d
LZF_HSLOT	lzfP.h	/^  typedef const u8 *LZF_HSLOT;$/;"	t
LZF_HSLOT	lzfP.h	/^  typedef unsigned int LZF_HSLOT;$/;"	t
LZF_HSLOT_BIAS	lzfP.h	159;"	d
LZF_HSLOT_BIAS	lzfP.h	162;"	d
LZF_STATE	lzfP.h	/^typedef LZF_HSLOT LZF_STATE[1 << (HLOG)];$/;"	t
LZF_STATE_ARG	lzfP.h	109;"	d
LZF_USE_OFFSETS	lzfP.h	145;"	d
STANDALONE	lzfP.h	40;"	d
STRICT_ALIGN	lzfP.h	175;"	d
STRICT_ALIGN	lzfP.h	176;"	d
STRICT_ALIGN	lzfP.h	82;"	d
ULTRA_FAST	lzfP.h	75;"	d
VERY_FAST	lzfP.h	181;"	d
VERY_FAST	lzfP.h	64;"	d
u16	lzfP.h	/^    typedef unsigned int u16;$/;"	t
u16	lzfP.h	/^    typedef unsigned short u16;$/;"	t
u8	lzfP.h	/^typedef unsigned char u8;$/;"	t
FRST	lzf_c.c	48;"	d	file:
HSIZE	lzf_c.c	39;"	d	file:
IDX	lzf_c.c	51;"	d	file:
IDX	lzf_c.c	53;"	d	file:
IDX	lzf_c.c	55;"	d	file:
MAX_LIT	lzf_c.c	74;"	d	file:
MAX_OFF	lzf_c.c	75;"	d	file:
MAX_REF	lzf_c.c	76;"	d	file:
NEXT	lzf_c.c	49;"	d	file:
expect	lzf_c.c	79;"	d	file:
expect	lzf_c.c	82;"	d	file:
expect_false	lzf_c.c	86;"	d	file:
expect_true	lzf_c.c	87;"	d	file:
inline	lzf_c.c	80;"	d	file:
inline	lzf_c.c	83;"	d	file:
lzf_compress	lzf_c.c	/^lzf_compress (const void *const in_data, unsigned int in_len,$/;"	f
SET_ERRNO	lzf_d.c	40;"	d	file:
SET_ERRNO	lzf_d.c	43;"	d	file:
lzf_decompress	lzf_d.c	/^lzf_decompress (const void *const in_data,  unsigned int in_len,$/;"	f
lzf_movsb	lzf_d.c	48;"	d	file:
MEMTEST_32BIT	memtest.c	44;"	d	file:
MEMTEST_64BIT	memtest.c	46;"	d	file:
MEMTEST_BACKUP_WORDS	memtest.c	275;"	d	file:
MEMTEST_DECACHE_SIZE	memtest.c	279;"	d	file:
ULONG_ONEZERO	memtest.c	52;"	d	file:
ULONG_ONEZERO	memtest.c	55;"	d	file:
ULONG_ZEROONE	memtest.c	53;"	d	file:
ULONG_ZEROONE	memtest.c	56;"	d	file:
memtest	memtest.c	/^void memtest(size_t megabytes, int passes) {$/;"	f
memtest_addressing	memtest.c	/^int memtest_addressing(unsigned long *l, size_t bytes, int interactive) {$/;"	f
memtest_alloc_and_test	memtest.c	/^void memtest_alloc_and_test(size_t megabytes, int passes) {$/;"	f
memtest_compare	memtest.c	/^int memtest_compare(unsigned long *l, size_t bytes, int interactive) {$/;"	f
memtest_compare_times	memtest.c	/^int memtest_compare_times(unsigned long *m, size_t bytes, int pass, int times,$/;"	f
memtest_fill_random	memtest.c	/^void memtest_fill_random(unsigned long *l, size_t bytes, int interactive) {$/;"	f
memtest_fill_value	memtest.c	/^void memtest_fill_value(unsigned long *l, size_t bytes, unsigned long v1,$/;"	f
memtest_preserving_test	memtest.c	/^int memtest_preserving_test(unsigned long *m, size_t bytes, int passes) {$/;"	f
memtest_progress_end	memtest.c	/^void memtest_progress_end(void) {$/;"	f
memtest_progress_start	memtest.c	/^void memtest_progress_start(char *title, int pass) {$/;"	f
memtest_progress_step	memtest.c	/^void memtest_progress_step(size_t curr, size_t size, char c) {$/;"	f
memtest_test	memtest.c	/^int memtest_test(unsigned long *m, size_t bytes, int passes, int interactive) {$/;"	f
progress_full	memtest.c	/^size_t progress_full; \/* How many chars to write to fill the progress bar. *\/$/;"	v
progress_printed	memtest.c	/^size_t progress_printed; \/* Printed chars in screen-wide progress bar. *\/$/;"	v
ws	memtest.c	/^static struct winsize ws;$/;"	v	typeref:struct:winsize	file:
xorshift64star_next	memtest.c	131;"	d	file:
db	multi.c	/^    redisDb *db;$/;"	m	struct:watchedKey	file:
discardCommand	multi.c	/^void discardCommand(client *c) {$/;"	f
discardTransaction	multi.c	/^void discardTransaction(client *c) {$/;"	f
execCommand	multi.c	/^void execCommand(client *c) {$/;"	f
execCommandPropagateMulti	multi.c	/^void execCommandPropagateMulti(client *c) {$/;"	f
flagTransaction	multi.c	/^void flagTransaction(client *c) {$/;"	f
freeClientMultiState	multi.c	/^void freeClientMultiState(client *c) {$/;"	f
initClientMultiState	multi.c	/^void initClientMultiState(client *c) {$/;"	f
key	multi.c	/^    robj *key;$/;"	m	struct:watchedKey	file:
multiCommand	multi.c	/^void multiCommand(client *c) {$/;"	f
queueMultiCommand	multi.c	/^void queueMultiCommand(client *c) {$/;"	f
touchWatchedKey	multi.c	/^void touchWatchedKey(redisDb *db, robj *key) {$/;"	f
touchWatchedKeysOnFlush	multi.c	/^void touchWatchedKeysOnFlush(int dbid) {$/;"	f
unwatchAllKeys	multi.c	/^void unwatchAllKeys(client *c) {$/;"	f
unwatchCommand	multi.c	/^void unwatchCommand(client *c) {$/;"	f
watchCommand	multi.c	/^void watchCommand(client *c) {$/;"	f
watchForKey	multi.c	/^void watchForKey(client *c, robj *key) {$/;"	f
watchedKey	multi.c	/^typedef struct watchedKey {$/;"	s	file:
watchedKey	multi.c	/^} watchedKey;$/;"	t	typeref:struct:watchedKey	file:
MAX_ACCEPTS_PER_CALL	networking.c	615;"	d	file:
_addReplyObjectToList	networking.c	/^void _addReplyObjectToList(client *c, robj *o) {$/;"	f
_addReplySdsToList	networking.c	/^void _addReplySdsToList(client *c, sds s) {$/;"	f
_addReplyStringToList	networking.c	/^void _addReplyStringToList(client *c, const char *s, size_t len) {$/;"	f
_addReplyToBuffer	networking.c	/^int _addReplyToBuffer(client *c, const char *s, size_t len) {$/;"	f
acceptCommonHandler	networking.c	/^static void acceptCommonHandler(int fd, int flags, char *ip) {$/;"	f	file:
acceptTcpHandler	networking.c	/^void acceptTcpHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
acceptUnixHandler	networking.c	/^void acceptUnixHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
addDeferredMultiBulkLength	networking.c	/^void *addDeferredMultiBulkLength(client *c) {$/;"	f
addReply	networking.c	/^void addReply(client *c, robj *obj) {$/;"	f
addReplyBulk	networking.c	/^void addReplyBulk(client *c, robj *obj) {$/;"	f
addReplyBulkCBuffer	networking.c	/^void addReplyBulkCBuffer(client *c, const void *p, size_t len) {$/;"	f
addReplyBulkCString	networking.c	/^void addReplyBulkCString(client *c, const char *s) {$/;"	f
addReplyBulkLen	networking.c	/^void addReplyBulkLen(client *c, robj *obj) {$/;"	f
addReplyBulkLongLong	networking.c	/^void addReplyBulkLongLong(client *c, long long ll) {$/;"	f
addReplyBulkSds	networking.c	/^void addReplyBulkSds(client *c, sds s)  {$/;"	f
addReplyDouble	networking.c	/^void addReplyDouble(client *c, double d) {$/;"	f
addReplyError	networking.c	/^void addReplyError(client *c, const char *err) {$/;"	f
addReplyErrorFormat	networking.c	/^void addReplyErrorFormat(client *c, const char *fmt, ...) {$/;"	f
addReplyErrorLength	networking.c	/^void addReplyErrorLength(client *c, const char *s, size_t len) {$/;"	f
addReplyHumanLongDouble	networking.c	/^void addReplyHumanLongDouble(client *c, long double d) {$/;"	f
addReplyLongLong	networking.c	/^void addReplyLongLong(client *c, long long ll) {$/;"	f
addReplyLongLongWithPrefix	networking.c	/^void addReplyLongLongWithPrefix(client *c, long long ll, char prefix) {$/;"	f
addReplyMultiBulkLen	networking.c	/^void addReplyMultiBulkLen(client *c, long length) {$/;"	f
addReplySds	networking.c	/^void addReplySds(client *c, sds s) {$/;"	f
addReplyStatus	networking.c	/^void addReplyStatus(client *c, const char *status) {$/;"	f
addReplyStatusFormat	networking.c	/^void addReplyStatusFormat(client *c, const char *fmt, ...) {$/;"	f
addReplyStatusLength	networking.c	/^void addReplyStatusLength(client *c, const char *s, size_t len) {$/;"	f
addReplyString	networking.c	/^void addReplyString(client *c, const char *s, size_t len) {$/;"	f
asyncCloseClientOnOutputBufferLimitReached	networking.c	/^void asyncCloseClientOnOutputBufferLimitReached(client *c) {$/;"	f
catClientInfoString	networking.c	/^sds catClientInfoString(sds s, client *client) {$/;"	f
checkClientOutputBufferLimits	networking.c	/^int checkClientOutputBufferLimits(client *c) {$/;"	f
clientCommand	networking.c	/^void clientCommand(client *c) {$/;"	f
clientHasPendingReplies	networking.c	/^int clientHasPendingReplies(client *c) {$/;"	f
clientsArePaused	networking.c	/^int clientsArePaused(void) {$/;"	f
copyClientOutputBuffer	networking.c	/^void copyClientOutputBuffer(client *dst, client *src) {$/;"	f
createClient	networking.c	/^client *createClient(int fd) {$/;"	f
disconnectSlaves	networking.c	/^void disconnectSlaves(void) {$/;"	f
dupClientReplyValue	networking.c	/^void *dupClientReplyValue(void *o) {$/;"	f
dupLastObjectIfNeeded	networking.c	/^robj *dupLastObjectIfNeeded(list *reply) {$/;"	f
flushSlavesOutputBuffers	networking.c	/^void flushSlavesOutputBuffers(void) {$/;"	f
freeClient	networking.c	/^void freeClient(client *c) {$/;"	f
freeClientArgv	networking.c	/^static void freeClientArgv(client *c) {$/;"	f	file:
freeClientAsync	networking.c	/^void freeClientAsync(client *c) {$/;"	f
freeClientsInAsyncFreeQueue	networking.c	/^void freeClientsInAsyncFreeQueue(void) {$/;"	f
genClientPeerId	networking.c	/^void genClientPeerId(client *client, char *peerid,$/;"	f
getAllClientsInfoString	networking.c	/^sds getAllClientsInfoString(void) {$/;"	f
getClientOutputBufferMemoryUsage	networking.c	/^unsigned long getClientOutputBufferMemoryUsage(client *c) {$/;"	f
getClientPeerId	networking.c	/^char *getClientPeerId(client *c) {$/;"	f
getClientType	networking.c	/^int getClientType(client *c) {$/;"	f
getClientTypeByName	networking.c	/^int getClientTypeByName(char *name) {$/;"	f
getClientTypeName	networking.c	/^char *getClientTypeName(int class) {$/;"	f
getClientsMaxBuffers	networking.c	/^void getClientsMaxBuffers(unsigned long *longest_output_list,$/;"	f
getStringObjectSdsUsedMemory	networking.c	/^size_t getStringObjectSdsUsedMemory(robj *o) {$/;"	f
handleClientsWithPendingWrites	networking.c	/^int handleClientsWithPendingWrites(void) {$/;"	f
listMatchObjects	networking.c	/^int listMatchObjects(void *a, void *b) {$/;"	f
pauseClients	networking.c	/^void pauseClients(mstime_t end) {$/;"	f
prepareClientToWrite	networking.c	/^int prepareClientToWrite(client *c) {$/;"	f
processEventsWhileBlocked	networking.c	/^int processEventsWhileBlocked(void) {$/;"	f
processInlineBuffer	networking.c	/^int processInlineBuffer(client *c) {$/;"	f
processInputBuffer	networking.c	/^void processInputBuffer(client *c) {$/;"	f
processMultibulkBuffer	networking.c	/^int processMultibulkBuffer(client *c) {$/;"	f
readQueryFromClient	networking.c	/^void readQueryFromClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
replaceClientCommandVector	networking.c	/^void replaceClientCommandVector(client *c, int argc, robj **argv) {$/;"	f
resetClient	networking.c	/^void resetClient(client *c) {$/;"	f
rewriteClientCommandArgument	networking.c	/^void rewriteClientCommandArgument(client *c, int i, robj *newval) {$/;"	f
rewriteClientCommandVector	networking.c	/^void rewriteClientCommandVector(client *c, int argc, ...) {$/;"	f
sdsZmallocSize	networking.c	/^size_t sdsZmallocSize(sds s) {$/;"	f
securityWarningCommand	networking.c	/^void securityWarningCommand(client *c) {$/;"	f
sendReplyToClient	networking.c	/^void sendReplyToClient(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
setDeferredMultiBulkLength	networking.c	/^void setDeferredMultiBulkLength(client *c, void *node, long length) {$/;"	f
setProtocolError	networking.c	/^static void setProtocolError(client *c, int pos) {$/;"	f	file:
unlinkClient	networking.c	/^void unlinkClient(client *c) {$/;"	f
writeToClient	networking.c	/^int writeToClient(int fd, client *c, int handler_installed) {$/;"	f
keyspaceEventsFlagsToString	notify.c	/^sds keyspaceEventsFlagsToString(int flags) {$/;"	f
keyspaceEventsStringToFlags	notify.c	/^int keyspaceEventsStringToFlags(char *classes) {$/;"	f
notifyKeyspaceEvent	notify.c	/^void notifyKeyspaceEvent(int type, char *event, robj *key, int dbid) {$/;"	f
OBJ_ENCODING_EMBSTR_SIZE_LIMIT	object.c	88;"	d	file:
REDIS_COMPARE_BINARY	object.c	466;"	d	file:
REDIS_COMPARE_COLL	object.c	467;"	d	file:
checkType	object.c	/^int checkType(client *c, robj *o, int type) {$/;"	f
collateStringObjects	object.c	/^int collateStringObjects(robj *a, robj *b) {$/;"	f
compareStringObjects	object.c	/^int compareStringObjects(robj *a, robj *b) {$/;"	f
compareStringObjectsWithFlags	object.c	/^int compareStringObjectsWithFlags(robj *a, robj *b, int flags) {$/;"	f
createEmbeddedStringObject	object.c	/^robj *createEmbeddedStringObject(const char *ptr, size_t len) {$/;"	f
createHashObject	object.c	/^robj *createHashObject(void) {$/;"	f
createIntsetObject	object.c	/^robj *createIntsetObject(void) {$/;"	f
createObject	object.c	/^robj *createObject(int type, void *ptr) {$/;"	f
createQuicklistObject	object.c	/^robj *createQuicklistObject(void) {$/;"	f
createRawStringObject	object.c	/^robj *createRawStringObject(const char *ptr, size_t len) {$/;"	f
createSetObject	object.c	/^robj *createSetObject(void) {$/;"	f
createStringObject	object.c	/^robj *createStringObject(const char *ptr, size_t len) {$/;"	f
createStringObjectFromLongDouble	object.c	/^robj *createStringObjectFromLongDouble(long double value, int humanfriendly) {$/;"	f
createStringObjectFromLongLong	object.c	/^robj *createStringObjectFromLongLong(long long value) {$/;"	f
createZiplistObject	object.c	/^robj *createZiplistObject(void) {$/;"	f
createZsetObject	object.c	/^robj *createZsetObject(void) {$/;"	f
createZsetZiplistObject	object.c	/^robj *createZsetZiplistObject(void) {$/;"	f
decrRefCount	object.c	/^void decrRefCount(robj *o) {$/;"	f
decrRefCountVoid	object.c	/^void decrRefCountVoid(void *o) {$/;"	f
dupStringObject	object.c	/^robj *dupStringObject(robj *o) {$/;"	f
equalStringObjects	object.c	/^int equalStringObjects(robj *a, robj *b) {$/;"	f
estimateObjectIdleTime	object.c	/^unsigned long long estimateObjectIdleTime(robj *o) {$/;"	f
freeHashObject	object.c	/^void freeHashObject(robj *o) {$/;"	f
freeListObject	object.c	/^void freeListObject(robj *o) {$/;"	f
freeSetObject	object.c	/^void freeSetObject(robj *o) {$/;"	f
freeStringObject	object.c	/^void freeStringObject(robj *o) {$/;"	f
freeZsetObject	object.c	/^void freeZsetObject(robj *o) {$/;"	f
getDecodedObject	object.c	/^robj *getDecodedObject(robj *o) {$/;"	f
getDoubleFromObject	object.c	/^int getDoubleFromObject(robj *o, double *target) {$/;"	f
getDoubleFromObjectOrReply	object.c	/^int getDoubleFromObjectOrReply(client *c, robj *o, double *target, const char *msg) {$/;"	f
getLongDoubleFromObject	object.c	/^int getLongDoubleFromObject(robj *o, long double *target) {$/;"	f
getLongDoubleFromObjectOrReply	object.c	/^int getLongDoubleFromObjectOrReply(client *c, robj *o, long double *target, const char *msg) {$/;"	f
getLongFromObjectOrReply	object.c	/^int getLongFromObjectOrReply(client *c, robj *o, long *target, const char *msg) {$/;"	f
getLongLongFromObject	object.c	/^int getLongLongFromObject(robj *o, long long *target) {$/;"	f
getLongLongFromObjectOrReply	object.c	/^int getLongLongFromObjectOrReply(client *c, robj *o, long long *target, const char *msg) {$/;"	f
incrRefCount	object.c	/^void incrRefCount(robj *o) {$/;"	f
isObjectRepresentableAsLongLong	object.c	/^int isObjectRepresentableAsLongLong(robj *o, long long *llval) {$/;"	f
objectCommand	object.c	/^void objectCommand(client *c) {$/;"	f
objectCommandLookup	object.c	/^robj *objectCommandLookup(client *c, robj *key) {$/;"	f
objectCommandLookupOrReply	object.c	/^robj *objectCommandLookupOrReply(client *c, robj *key, robj *reply) {$/;"	f
resetRefCount	object.c	/^robj *resetRefCount(robj *obj) {$/;"	f
strEncoding	object.c	/^char *strEncoding(int encoding) {$/;"	f
stringObjectLen	object.c	/^size_t stringObjectLen(robj *o) {$/;"	f
strtold	object.c	36;"	d	file:
tryObjectEncoding	object.c	/^robj *tryObjectEncoding(robj *o) {$/;"	f
SWAPINIT	pqsort.c	65;"	d	file:
_pqsort	pqsort.c	/^_pqsort(void *a, size_t n, size_t es,$/;"	f	file:
med3	pqsort.c	/^med3(char *a, char *b, char *c,$/;"	f	file:
min	pqsort.c	49;"	d	file:
pqsort	pqsort.c	/^pqsort(void *a, size_t n, size_t es,$/;"	f
swap	pqsort.c	78;"	d	file:
swapcode	pqsort.c	54;"	d	file:
swapfunc	pqsort.c	/^swapfunc(char *a, char *b, size_t n, int swaptype)$/;"	f	file:
vecswap	pqsort.c	86;"	d	file:
__PQSORT_H	pqsort.h	34;"	d
clientSubscriptionsCount	pubsub.c	/^int clientSubscriptionsCount(client *c) {$/;"	f
freePubsubPattern	pubsub.c	/^void freePubsubPattern(void *p) {$/;"	f
listMatchPubsubPattern	pubsub.c	/^int listMatchPubsubPattern(void *a, void *b) {$/;"	f
psubscribeCommand	pubsub.c	/^void psubscribeCommand(client *c) {$/;"	f
publishCommand	pubsub.c	/^void publishCommand(client *c) {$/;"	f
pubsubCommand	pubsub.c	/^void pubsubCommand(client *c) {$/;"	f
pubsubPublishMessage	pubsub.c	/^int pubsubPublishMessage(robj *channel, robj *message) {$/;"	f
pubsubSubscribeChannel	pubsub.c	/^int pubsubSubscribeChannel(client *c, robj *channel) {$/;"	f
pubsubSubscribePattern	pubsub.c	/^int pubsubSubscribePattern(client *c, robj *pattern) {$/;"	f
pubsubUnsubscribeAllChannels	pubsub.c	/^int pubsubUnsubscribeAllChannels(client *c, int notify) {$/;"	f
pubsubUnsubscribeAllPatterns	pubsub.c	/^int pubsubUnsubscribeAllPatterns(client *c, int notify) {$/;"	f
pubsubUnsubscribeChannel	pubsub.c	/^int pubsubUnsubscribeChannel(client *c, robj *channel, int notify) {$/;"	f
pubsubUnsubscribePattern	pubsub.c	/^int pubsubUnsubscribePattern(client *c, robj *pattern, int notify) {$/;"	f
punsubscribeCommand	pubsub.c	/^void punsubscribeCommand(client *c) {$/;"	f
subscribeCommand	pubsub.c	/^void subscribeCommand(client *c) {$/;"	f
unsubscribeCommand	pubsub.c	/^void unsubscribeCommand(client *c) {$/;"	f
COMPRESS_MAX	quicklist.c	106;"	d	file:
D	quicklist.c	63;"	d	file:
D	quicklist.c	65;"	d	file:
ERR	quicklist.c	1437;"	d	file:
ERROR	quicklist.c	1431;"	d	file:
FILL_MAX	quicklist.c	116;"	d	file:
MIN_COMPRESS_BYTES	quicklist.c	54;"	d	file:
MIN_COMPRESS_IMPROVE	quicklist.c	59;"	d	file:
OK	quicklist.c	1429;"	d	file:
QL_TEST_VERBOSE	quicklist.c	1447;"	d	file:
REDIS_STATIC	quicklist.c	43;"	d	file:
SIZE_SAFETY_LIMIT	quicklist.c	51;"	d	file:
TEST	quicklist.c	1444;"	d	file:
TEST_DESC	quicklist.c	1445;"	d	file:
UNUSED	quicklist.c	1449;"	d	file:
__quicklistCompress	quicklist.c	/^REDIS_STATIC void __quicklistCompress(const quicklist *quicklist,$/;"	f
__quicklistCompressNode	quicklist.c	/^REDIS_STATIC int __quicklistCompressNode(quicklistNode *node) {$/;"	f
__quicklistDecompressNode	quicklist.c	/^REDIS_STATIC int __quicklistDecompressNode(quicklistNode *node) {$/;"	f
__quicklistDelNode	quicklist.c	/^REDIS_STATIC void __quicklistDelNode(quicklist *quicklist,$/;"	f
__quicklistInsertNode	quicklist.c	/^REDIS_STATIC void __quicklistInsertNode(quicklist *quicklist,$/;"	f
_itrprintr	quicklist.c	/^static int _itrprintr(quicklist *ql, int print, int forward) {$/;"	f	file:
_ql_verify	quicklist.c	/^static int _ql_verify(quicklist *ql, uint32_t len, uint32_t count,$/;"	f	file:
_quicklistInsert	quicklist.c	/^REDIS_STATIC void _quicklistInsert(quicklist *quicklist, quicklistEntry *entry,$/;"	f
_quicklistInsertNodeAfter	quicklist.c	/^REDIS_STATIC void _quicklistInsertNodeAfter(quicklist *quicklist,$/;"	f
_quicklistInsertNodeBefore	quicklist.c	/^REDIS_STATIC void _quicklistInsertNodeBefore(quicklist *quicklist,$/;"	f
_quicklistMergeNodes	quicklist.c	/^REDIS_STATIC void _quicklistMergeNodes(quicklist *quicklist,$/;"	f
_quicklistNodeAllowInsert	quicklist.c	/^REDIS_STATIC int _quicklistNodeAllowInsert(const quicklistNode *node,$/;"	f
_quicklistNodeAllowMerge	quicklist.c	/^REDIS_STATIC int _quicklistNodeAllowMerge(const quicklistNode *a,$/;"	f
_quicklistNodeSizeMeetsOptimizationRequirement	quicklist.c	/^_quicklistNodeSizeMeetsOptimizationRequirement(const size_t sz,$/;"	f
_quicklistSaver	quicklist.c	/^REDIS_STATIC void *_quicklistSaver(unsigned char *data, unsigned int sz) {$/;"	f
_quicklistSplitNode	quicklist.c	/^REDIS_STATIC quicklistNode *_quicklistSplitNode(quicklistNode *node, int offset,$/;"	f
_quicklistZiplistMerge	quicklist.c	/^REDIS_STATIC quicklistNode *_quicklistZiplistMerge(quicklist *quicklist,$/;"	f
assert	quicklist.c	1418;"	d	file:
genstr	quicklist.c	/^static char *genstr(char *prefix, int i) {$/;"	f	file:
initEntry	quicklist.c	74;"	d	file:
itrprintr	quicklist.c	/^static int itrprintr(quicklist *ql, int print) {$/;"	f	file:
itrprintr_rev	quicklist.c	/^static int itrprintr_rev(quicklist *ql, int print) {$/;"	f	file:
likely	quicklist.c	85;"	d	file:
likely	quicklist.c	88;"	d	file:
mstime	quicklist.c	/^static long long mstime(void) { return ustime() \/ 1000; }$/;"	f	file:
optimization_level	quicklist.c	/^static const size_t optimization_level[] = {4096, 8192, 16384, 32768, 65536};$/;"	v	file:
ql_info	quicklist.c	/^static void ql_info(quicklist *ql) {$/;"	f	file:
ql_verify	quicklist.c	1512;"	d	file:
quicklistAllowsCompression	quicklist.c	259;"	d	file:
quicklistAppendValuesFromZiplist	quicklist.c	/^quicklist *quicklistAppendValuesFromZiplist(quicklist *quicklist,$/;"	f
quicklistAppendZiplist	quicklist.c	/^void quicklistAppendZiplist(quicklist *quicklist, unsigned char *zl) {$/;"	f
quicklistCompare	quicklist.c	/^int quicklistCompare(unsigned char *p1, unsigned char *p2, int p2_len) {$/;"	f
quicklistCompress	quicklist.c	333;"	d	file:
quicklistCompressNode	quicklist.c	206;"	d	file:
quicklistCount	quicklist.c	/^unsigned int quicklistCount(quicklist *ql) { return ql->count; }$/;"	f
quicklistCreate	quicklist.c	/^quicklist *quicklistCreate(void) {$/;"	f
quicklistCreateFromZiplist	quicklist.c	/^quicklist *quicklistCreateFromZiplist(int fill, int compress,$/;"	f
quicklistCreateNode	quicklist.c	/^REDIS_STATIC quicklistNode *quicklistCreateNode(void) {$/;"	f
quicklistDecompressNode	quicklist.c	234;"	d	file:
quicklistDecompressNodeForUse	quicklist.c	242;"	d	file:
quicklistDelEntry	quicklist.c	/^void quicklistDelEntry(quicklistIter *iter, quicklistEntry *entry) {$/;"	f
quicklistDelIndex	quicklist.c	/^REDIS_STATIC int quicklistDelIndex(quicklist *quicklist, quicklistNode *node,$/;"	f
quicklistDelRange	quicklist.c	/^int quicklistDelRange(quicklist *quicklist, const long start,$/;"	f
quicklistDeleteIfEmpty	quicklist.c	571;"	d	file:
quicklistDup	quicklist.c	/^quicklist *quicklistDup(quicklist *orig) {$/;"	f
quicklistGetIterator	quicklist.c	/^quicklistIter *quicklistGetIterator(const quicklist *quicklist, int direction) {$/;"	f
quicklistGetIteratorAtIdx	quicklist.c	/^quicklistIter *quicklistGetIteratorAtIdx(const quicklist *quicklist,$/;"	f
quicklistGetLzf	quicklist.c	/^size_t quicklistGetLzf(const quicklistNode *node, void **data) {$/;"	f
quicklistIndex	quicklist.c	/^int quicklistIndex(const quicklist *quicklist, const long long idx,$/;"	f
quicklistInsertAfter	quicklist.c	/^void quicklistInsertAfter(quicklist *quicklist, quicklistEntry *entry,$/;"	f
quicklistInsertBefore	quicklist.c	/^void quicklistInsertBefore(quicklist *quicklist, quicklistEntry *entry,$/;"	f
quicklistNew	quicklist.c	/^quicklist *quicklistNew(int fill, int compress) {$/;"	f
quicklistNext	quicklist.c	/^int quicklistNext(quicklistIter *iter, quicklistEntry *entry) {$/;"	f
quicklistNodeUpdateSz	quicklist.c	471;"	d	file:
quicklistPop	quicklist.c	/^int quicklistPop(quicklist *quicklist, int where, unsigned char **data,$/;"	f
quicklistPopCustom	quicklist.c	/^int quicklistPopCustom(quicklist *quicklist, int where, unsigned char **data,$/;"	f
quicklistPush	quicklist.c	/^void quicklistPush(quicklist *quicklist, void *value, const size_t sz,$/;"	f
quicklistPushHead	quicklist.c	/^int quicklistPushHead(quicklist *quicklist, void *value, size_t sz) {$/;"	f
quicklistPushTail	quicklist.c	/^int quicklistPushTail(quicklist *quicklist, void *value, size_t sz) {$/;"	f
quicklistRecompressOnly	quicklist.c	342;"	d	file:
quicklistRelease	quicklist.c	/^void quicklistRelease(quicklist *quicklist) {$/;"	f
quicklistReleaseIterator	quicklist.c	/^void quicklistReleaseIterator(quicklistIter *iter) {$/;"	f
quicklistReplaceAtIndex	quicklist.c	/^int quicklistReplaceAtIndex(quicklist *quicklist, long index, void *data,$/;"	f
quicklistRotate	quicklist.c	/^void quicklistRotate(quicklist *quicklist) {$/;"	f
quicklistSetCompressDepth	quicklist.c	/^void quicklistSetCompressDepth(quicklist *quicklist, int compress) {$/;"	f
quicklistSetFill	quicklist.c	/^void quicklistSetFill(quicklist *quicklist, int fill) {$/;"	f
quicklistSetOptions	quicklist.c	/^void quicklistSetOptions(quicklist *quicklist, int fill, int depth) {$/;"	f
quicklistTest	quicklist.c	/^int quicklistTest(int argc, char *argv[]) {$/;"	f
sizeMeetsSafetyLimit	quicklist.c	418;"	d	file:
unlikely	quicklist.c	86;"	d	file:
unlikely	quicklist.c	89;"	d	file:
ustime	quicklist.c	/^static long long ustime(void) {$/;"	f	file:
yell	quicklist.c	1427;"	d	file:
AL_START_HEAD	quicklist.h	166;"	d
AL_START_TAIL	quicklist.h	167;"	d
QUICKLIST_HEAD	quicklist.h	100;"	d
QUICKLIST_NOCOMPRESS	quicklist.h	108;"	d
QUICKLIST_NODE_CONTAINER_NONE	quicklist.h	111;"	d
QUICKLIST_NODE_CONTAINER_ZIPLIST	quicklist.h	112;"	d
QUICKLIST_NODE_ENCODING_LZF	quicklist.h	105;"	d
QUICKLIST_NODE_ENCODING_RAW	quicklist.h	104;"	d
QUICKLIST_TAIL	quicklist.h	101;"	d
__QUICKLIST_H__	quicklist.h	32;"	d
attempted_compress	quicklist.h	/^    unsigned int attempted_compress : 1; \/* node can't compress; too small *\/$/;"	m	struct:quicklistNode
compress	quicklist.h	/^    unsigned int compress : 16; \/* depth of end nodes not to compress;0=off *\/$/;"	m	struct:quicklist
compressed	quicklist.h	/^    char compressed[];$/;"	m	struct:quicklistLZF
container	quicklist.h	/^    unsigned int container : 2;  \/* NONE==1 or ZIPLIST==2 *\/$/;"	m	struct:quicklistNode
count	quicklist.h	/^    unsigned int count : 16;     \/* count of items in ziplist *\/$/;"	m	struct:quicklistNode
count	quicklist.h	/^    unsigned long count;        \/* total count of all entries in all ziplists *\/$/;"	m	struct:quicklist
current	quicklist.h	/^    quicklistNode *current;$/;"	m	struct:quicklistIter
direction	quicklist.h	/^    int direction;$/;"	m	struct:quicklistIter
encoding	quicklist.h	/^    unsigned int encoding : 2;   \/* RAW==1 or LZF==2 *\/$/;"	m	struct:quicklistNode
extra	quicklist.h	/^    unsigned int extra : 10; \/* more bits to steal for future usage *\/$/;"	m	struct:quicklistNode
fill	quicklist.h	/^    int fill : 16;              \/* fill factor for individual nodes *\/$/;"	m	struct:quicklist
head	quicklist.h	/^    quicklistNode *head;$/;"	m	struct:quicklist
len	quicklist.h	/^    unsigned int len;           \/* number of quicklistNodes *\/$/;"	m	struct:quicklist
longval	quicklist.h	/^    long long longval;$/;"	m	struct:quicklistEntry
next	quicklist.h	/^    struct quicklistNode *next;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode::quicklistNode
node	quicklist.h	/^    quicklistNode *node;$/;"	m	struct:quicklistEntry
offset	quicklist.h	/^    int offset;$/;"	m	struct:quicklistEntry
offset	quicklist.h	/^    long offset; \/* offset in current ziplist *\/$/;"	m	struct:quicklistIter
prev	quicklist.h	/^    struct quicklistNode *prev;$/;"	m	struct:quicklistNode	typeref:struct:quicklistNode::quicklistNode
quicklist	quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistEntry
quicklist	quicklist.h	/^    const quicklist *quicklist;$/;"	m	struct:quicklistIter
quicklist	quicklist.h	/^typedef struct quicklist {$/;"	s
quicklist	quicklist.h	/^} quicklist;$/;"	t	typeref:struct:quicklist
quicklistEntry	quicklist.h	/^typedef struct quicklistEntry {$/;"	s
quicklistEntry	quicklist.h	/^} quicklistEntry;$/;"	t	typeref:struct:quicklistEntry
quicklistIter	quicklist.h	/^typedef struct quicklistIter {$/;"	s
quicklistIter	quicklist.h	/^} quicklistIter;$/;"	t	typeref:struct:quicklistIter
quicklistLZF	quicklist.h	/^typedef struct quicklistLZF {$/;"	s
quicklistLZF	quicklist.h	/^} quicklistLZF;$/;"	t	typeref:struct:quicklistLZF
quicklistNode	quicklist.h	/^typedef struct quicklistNode {$/;"	s
quicklistNode	quicklist.h	/^} quicklistNode;$/;"	t	typeref:struct:quicklistNode
quicklistNodeIsCompressed	quicklist.h	114;"	d
recompress	quicklist.h	/^    unsigned int recompress : 1; \/* was this node previous compressed? *\/$/;"	m	struct:quicklistNode
sz	quicklist.h	/^    unsigned int sz;             \/* ziplist size in bytes *\/$/;"	m	struct:quicklistNode
sz	quicklist.h	/^    unsigned int sz; \/* LZF size in bytes*\/$/;"	m	struct:quicklistLZF
sz	quicklist.h	/^    unsigned int sz;$/;"	m	struct:quicklistEntry
tail	quicklist.h	/^    quicklistNode *tail;$/;"	m	struct:quicklist
value	quicklist.h	/^    unsigned char *value;$/;"	m	struct:quicklistEntry
zi	quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistEntry
zi	quicklist.h	/^    unsigned char *zi;$/;"	m	struct:quicklistIter
zl	quicklist.h	/^    unsigned char *zl;$/;"	m	struct:quicklistNode
A0	rand.c	57;"	d	file:
A1	rand.c	58;"	d	file:
A2	rand.c	59;"	d	file:
ADDEQU	rand.c	53;"	d	file:
C	rand.c	60;"	d	file:
CARRY	rand.c	52;"	d	file:
HIGH	rand.c	49;"	d	file:
HI_BIT	rand.c	66;"	d	file:
LOW	rand.c	48;"	d	file:
MASK	rand.c	47;"	d	file:
MUL	rand.c	50;"	d	file:
N	rand.c	46;"	d	file:
REST	rand.c	64;"	d	file:
SEED	rand.c	63;"	d	file:
SET3	rand.c	61;"	d	file:
SETLOW	rand.c	62;"	d	file:
X0	rand.c	54;"	d	file:
X1	rand.c	55;"	d	file:
X2	rand.c	56;"	d	file:
a	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
c	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
next	rand.c	/^static void next(void) {$/;"	f	file:
redisLrand48	rand.c	/^int32_t redisLrand48() {$/;"	f
redisSrand48	rand.c	/^void redisSrand48(int32_t seedval) {$/;"	f
x	rand.c	/^static uint32_t x[3] = { X0, X1, X2 }, a[3] = { A0, A1, A2 }, c = C;$/;"	v	file:
REDIS_LRAND48_MAX	rand.h	36;"	d
REDIS_RANDOM_H	rand.h	31;"	d
RDB_LOAD_ENC	rdb.c	45;"	d	file:
RDB_LOAD_NONE	rdb.c	44;"	d	file:
RDB_LOAD_PLAIN	rdb.c	46;"	d	file:
backgroundSaveDoneHandler	rdb.c	/^void backgroundSaveDoneHandler(int exitcode, int bysignal) {$/;"	f
backgroundSaveDoneHandlerDisk	rdb.c	/^void backgroundSaveDoneHandlerDisk(int exitcode, int bysignal) {$/;"	f
backgroundSaveDoneHandlerSocket	rdb.c	/^void backgroundSaveDoneHandlerSocket(int exitcode, int bysignal) {$/;"	f
bgsaveCommand	rdb.c	/^void bgsaveCommand(client *c) {$/;"	f
loadingProgress	rdb.c	/^void loadingProgress(off_t pos) {$/;"	f
rdbCheckThenExit	rdb.c	/^void rdbCheckThenExit(int linenum, char *reason, ...) {$/;"	f
rdbEncodeInteger	rdb.c	/^int rdbEncodeInteger(long long value, unsigned char *enc) {$/;"	f
rdbExitReportCorruptRDB	rdb.c	48;"	d	file:
rdbGenericLoadStringObject	rdb.c	/^void *rdbGenericLoadStringObject(rio *rdb, int flags) {$/;"	f
rdbLoad	rdb.c	/^int rdbLoad(char *filename) {$/;"	f
rdbLoadDoubleValue	rdb.c	/^int rdbLoadDoubleValue(rio *rdb, double *val) {$/;"	f
rdbLoadEncodedStringObject	rdb.c	/^robj *rdbLoadEncodedStringObject(rio *rdb) {$/;"	f
rdbLoadIntegerObject	rdb.c	/^void *rdbLoadIntegerObject(rio *rdb, int enctype, int flags) {$/;"	f
rdbLoadLen	rdb.c	/^uint32_t rdbLoadLen(rio *rdb, int *isencoded) {$/;"	f
rdbLoadLzfStringObject	rdb.c	/^void *rdbLoadLzfStringObject(rio *rdb, int flags) {$/;"	f
rdbLoadMillisecondTime	rdb.c	/^long long rdbLoadMillisecondTime(rio *rdb) {$/;"	f
rdbLoadObject	rdb.c	/^robj *rdbLoadObject(int rdbtype, rio *rdb) {$/;"	f
rdbLoadObjectType	rdb.c	/^int rdbLoadObjectType(rio *rdb) {$/;"	f
rdbLoadProgressCallback	rdb.c	/^void rdbLoadProgressCallback(rio *r, const void *buf, size_t len) {$/;"	f
rdbLoadStringObject	rdb.c	/^robj *rdbLoadStringObject(rio *rdb) {$/;"	f
rdbLoadTime	rdb.c	/^time_t rdbLoadTime(rio *rdb) {$/;"	f
rdbLoadType	rdb.c	/^int rdbLoadType(rio *rdb) {$/;"	f
rdbRemoveTempFile	rdb.c	/^void rdbRemoveTempFile(pid_t childpid) {$/;"	f
rdbSave	rdb.c	/^int rdbSave(char *filename) {$/;"	f
rdbSaveAuxField	rdb.c	/^int rdbSaveAuxField(rio *rdb, void *key, size_t keylen, void *val, size_t vallen) {$/;"	f
rdbSaveAuxFieldStrInt	rdb.c	/^int rdbSaveAuxFieldStrInt(rio *rdb, char *key, long long val) {$/;"	f
rdbSaveAuxFieldStrStr	rdb.c	/^int rdbSaveAuxFieldStrStr(rio *rdb, char *key, char *val) {$/;"	f
rdbSaveBackground	rdb.c	/^int rdbSaveBackground(char *filename) {$/;"	f
rdbSaveDoubleValue	rdb.c	/^int rdbSaveDoubleValue(rio *rdb, double val) {$/;"	f
rdbSaveInfoAuxFields	rdb.c	/^int rdbSaveInfoAuxFields(rio *rdb) {$/;"	f
rdbSaveKeyValuePair	rdb.c	/^int rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val,$/;"	f
rdbSaveLen	rdb.c	/^int rdbSaveLen(rio *rdb, uint32_t len) {$/;"	f
rdbSaveLongLongAsStringObject	rdb.c	/^ssize_t rdbSaveLongLongAsStringObject(rio *rdb, long long value) {$/;"	f
rdbSaveLzfBlob	rdb.c	/^ssize_t rdbSaveLzfBlob(rio *rdb, void *data, size_t compress_len,$/;"	f
rdbSaveLzfStringObject	rdb.c	/^ssize_t rdbSaveLzfStringObject(rio *rdb, unsigned char *s, size_t len) {$/;"	f
rdbSaveMillisecondTime	rdb.c	/^int rdbSaveMillisecondTime(rio *rdb, long long t) {$/;"	f
rdbSaveObject	rdb.c	/^ssize_t rdbSaveObject(rio *rdb, robj *o) {$/;"	f
rdbSaveObjectType	rdb.c	/^int rdbSaveObjectType(rio *rdb, robj *o) {$/;"	f
rdbSaveRawString	rdb.c	/^ssize_t rdbSaveRawString(rio *rdb, unsigned char *s, size_t len) {$/;"	f
rdbSaveRio	rdb.c	/^int rdbSaveRio(rio *rdb, int *error) {$/;"	f
rdbSaveRioWithEOFMark	rdb.c	/^int rdbSaveRioWithEOFMark(rio *rdb, int *error) {$/;"	f
rdbSaveStringObject	rdb.c	/^int rdbSaveStringObject(rio *rdb, robj *obj) {$/;"	f
rdbSaveToSlavesSockets	rdb.c	/^int rdbSaveToSlavesSockets(void) {$/;"	f
rdbSaveType	rdb.c	/^int rdbSaveType(rio *rdb, unsigned char type) {$/;"	f
rdbSavedObjectLen	rdb.c	/^size_t rdbSavedObjectLen(robj *o) {$/;"	f
rdbTryIntegerEncoding	rdb.c	/^int rdbTryIntegerEncoding(char *s, size_t len, unsigned char *enc) {$/;"	f
rdbWriteRaw	rdb.c	/^static int rdbWriteRaw(rio *rdb, void *p, size_t len) {$/;"	f	file:
saveCommand	rdb.c	/^void saveCommand(client *c) {$/;"	f
startLoading	rdb.c	/^void startLoading(FILE *fp) {$/;"	f
stopLoading	rdb.c	/^void stopLoading(void) {$/;"	f
RDB_14BITLEN	rdb.h	57;"	d
RDB_32BITLEN	rdb.h	58;"	d
RDB_6BITLEN	rdb.h	56;"	d
RDB_ENCVAL	rdb.h	59;"	d
RDB_ENC_INT16	rdb.h	66;"	d
RDB_ENC_INT32	rdb.h	67;"	d
RDB_ENC_INT8	rdb.h	65;"	d
RDB_ENC_LZF	rdb.h	68;"	d
RDB_LENERR	rdb.h	60;"	d
RDB_OPCODE_AUX	rdb.h	92;"	d
RDB_OPCODE_EOF	rdb.h	97;"	d
RDB_OPCODE_EXPIRETIME	rdb.h	95;"	d
RDB_OPCODE_EXPIRETIME_MS	rdb.h	94;"	d
RDB_OPCODE_RESIZEDB	rdb.h	93;"	d
RDB_OPCODE_SELECTDB	rdb.h	96;"	d
RDB_TYPE_HASH	rdb.h	76;"	d
RDB_TYPE_HASH_ZIPLIST	rdb.h	84;"	d
RDB_TYPE_HASH_ZIPMAP	rdb.h	80;"	d
RDB_TYPE_LIST	rdb.h	73;"	d
RDB_TYPE_LIST_QUICKLIST	rdb.h	85;"	d
RDB_TYPE_LIST_ZIPLIST	rdb.h	81;"	d
RDB_TYPE_SET	rdb.h	74;"	d
RDB_TYPE_SET_INTSET	rdb.h	82;"	d
RDB_TYPE_STRING	rdb.h	72;"	d
RDB_TYPE_ZSET	rdb.h	75;"	d
RDB_TYPE_ZSET_ZIPLIST	rdb.h	83;"	d
RDB_VERSION	rdb.h	41;"	d
__RDB_H	rdb.h	31;"	d
rdbIsObjectType	rdb.h	89;"	d
RANDPTR_INITIAL_SIZE	redis-benchmark.c	50;"	d	file:
UNUSED	redis-benchmark.c	49;"	d	file:
_client	redis-benchmark.c	/^typedef struct _client {$/;"	s	file:
auth	redis-benchmark.c	/^    char *auth;$/;"	m	struct:config	file:
benchmark	redis-benchmark.c	/^static void benchmark(char *title, char *cmd, int len) {$/;"	f	file:
client	redis-benchmark.c	/^} *client;$/;"	t	typeref:struct:_client	file:
clientDone	redis-benchmark.c	/^static void clientDone(client c) {$/;"	f	file:
clients	redis-benchmark.c	/^    list *clients;$/;"	m	struct:config	file:
compareLatency	redis-benchmark.c	/^static int compareLatency(const void *a, const void *b) {$/;"	f	file:
config	redis-benchmark.c	/^static struct config {$/;"	s	file:
config	redis-benchmark.c	/^} config;$/;"	v	typeref:struct:config	file:
context	redis-benchmark.c	/^    redisContext *context;$/;"	m	struct:_client	file:
createClient	redis-benchmark.c	/^static client createClient(char *cmd, size_t len, client from) {$/;"	f	file:
createMissingClients	redis-benchmark.c	/^static void createMissingClients(client c) {$/;"	f	file:
csv	redis-benchmark.c	/^    int csv;$/;"	m	struct:config	file:
datasize	redis-benchmark.c	/^    int datasize;$/;"	m	struct:config	file:
dbnum	redis-benchmark.c	/^    int dbnum;$/;"	m	struct:config	file:
dbnumstr	redis-benchmark.c	/^    sds dbnumstr;$/;"	m	struct:config	file:
el	redis-benchmark.c	/^    aeEventLoop *el;$/;"	m	struct:config	file:
freeAllClients	redis-benchmark.c	/^static void freeAllClients(void) {$/;"	f	file:
freeClient	redis-benchmark.c	/^static void freeClient(client c) {$/;"	f	file:
hostip	redis-benchmark.c	/^    const char *hostip;$/;"	m	struct:config	file:
hostport	redis-benchmark.c	/^    int hostport;$/;"	m	struct:config	file:
hostsocket	redis-benchmark.c	/^    const char *hostsocket;$/;"	m	struct:config	file:
idlemode	redis-benchmark.c	/^    int idlemode;$/;"	m	struct:config	file:
keepalive	redis-benchmark.c	/^    int keepalive;$/;"	m	struct:config	file:
keysize	redis-benchmark.c	/^    int keysize;$/;"	m	struct:config	file:
latency	redis-benchmark.c	/^    long long *latency;$/;"	m	struct:config	file:
latency	redis-benchmark.c	/^    long long latency;      \/* Request latency *\/$/;"	m	struct:_client	file:
liveclients	redis-benchmark.c	/^    int liveclients;$/;"	m	struct:config	file:
loop	redis-benchmark.c	/^    int loop;$/;"	m	struct:config	file:
main	redis-benchmark.c	/^int main(int argc, const char **argv) {$/;"	f
mstime	redis-benchmark.c	/^static long long mstime(void) {$/;"	f	file:
numclients	redis-benchmark.c	/^    int numclients;$/;"	m	struct:config	file:
obuf	redis-benchmark.c	/^    sds obuf;$/;"	m	struct:_client	file:
parseOptions	redis-benchmark.c	/^int parseOptions(int argc, const char **argv) {$/;"	f
pending	redis-benchmark.c	/^    int pending;            \/* Number of pending requests (replies to consume) *\/$/;"	m	struct:_client	file:
pipeline	redis-benchmark.c	/^    int pipeline;$/;"	m	struct:config	file:
prefix_pending	redis-benchmark.c	/^    int prefix_pending;     \/* If non-zero, number of pending prefix commands. Commands$/;"	m	struct:_client	file:
prefixlen	redis-benchmark.c	/^    int prefixlen;          \/* Size in bytes of the pending prefix commands *\/$/;"	m	struct:_client	file:
quiet	redis-benchmark.c	/^    int quiet;$/;"	m	struct:config	file:
randfree	redis-benchmark.c	/^    size_t randfree;        \/* Number of unused pointers in client->randptr *\/$/;"	m	struct:_client	file:
randlen	redis-benchmark.c	/^    size_t randlen;         \/* Number of pointers in client->randptr *\/$/;"	m	struct:_client	file:
randomizeClientKey	redis-benchmark.c	/^static void randomizeClientKey(client c) {$/;"	f	file:
randomkeys	redis-benchmark.c	/^    int randomkeys;$/;"	m	struct:config	file:
randomkeys_keyspacelen	redis-benchmark.c	/^    int randomkeys_keyspacelen;$/;"	m	struct:config	file:
randptr	redis-benchmark.c	/^    char **randptr;         \/* Pointers to :rand: strings inside the command buf *\/$/;"	m	struct:_client	file:
readHandler	redis-benchmark.c	/^static void readHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
requests	redis-benchmark.c	/^    int requests;$/;"	m	struct:config	file:
requests_finished	redis-benchmark.c	/^    int requests_finished;$/;"	m	struct:config	file:
requests_issued	redis-benchmark.c	/^    int requests_issued;$/;"	m	struct:config	file:
resetClient	redis-benchmark.c	/^static void resetClient(client c) {$/;"	f	file:
showLatencyReport	redis-benchmark.c	/^static void showLatencyReport(void) {$/;"	f	file:
showThroughput	redis-benchmark.c	/^int showThroughput(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
showerrors	redis-benchmark.c	/^    int showerrors;$/;"	m	struct:config	file:
start	redis-benchmark.c	/^    long long start;        \/* Start time of a request *\/$/;"	m	struct:_client	file:
start	redis-benchmark.c	/^    long long start;$/;"	m	struct:config	file:
test_is_selected	redis-benchmark.c	/^int test_is_selected(char *name) {$/;"	f
tests	redis-benchmark.c	/^    char *tests;$/;"	m	struct:config	file:
title	redis-benchmark.c	/^    const char *title;$/;"	m	struct:config	file:
totlatency	redis-benchmark.c	/^    long long totlatency;$/;"	m	struct:config	file:
ustime	redis-benchmark.c	/^static long long ustime(void) {$/;"	f	file:
writeHandler	redis-benchmark.c	/^static void writeHandler(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
written	redis-benchmark.c	/^    size_t written;         \/* Bytes of 'obuf' already written *\/$/;"	m	struct:_client	file:
ERROR	redis-check-aof.c	39;"	d	file:
consumeNewline	redis-check-aof.c	/^int consumeNewline(char *buf) {$/;"	f
epos	redis-check-aof.c	/^static off_t epos;$/;"	v	file:
error	redis-check-aof.c	/^static char error[1024];$/;"	v	file:
main	redis-check-aof.c	/^int main(int argc, char **argv) {$/;"	f
process	redis-check-aof.c	/^off_t process(FILE *fp) {$/;"	f
readArgc	redis-check-aof.c	/^int readArgc(FILE *fp, long *target) {$/;"	f
readBytes	redis-check-aof.c	/^int readBytes(FILE *fp, char *target, long length) {$/;"	f
readLong	redis-check-aof.c	/^int readLong(FILE *fp, char prefix, long *target) {$/;"	f
readString	redis-check-aof.c	/^int readString(FILE *fp, char** target) {$/;"	f
RDB_CHECK_DOING_CHECK_SUM	redis-check-rdb.c	59;"	d	file:
RDB_CHECK_DOING_READ_AUX	redis-check-rdb.c	61;"	d	file:
RDB_CHECK_DOING_READ_EXPIRE	redis-check-rdb.c	56;"	d	file:
RDB_CHECK_DOING_READ_KEY	redis-check-rdb.c	57;"	d	file:
RDB_CHECK_DOING_READ_LEN	redis-check-rdb.c	60;"	d	file:
RDB_CHECK_DOING_READ_OBJECT_VALUE	redis-check-rdb.c	58;"	d	file:
RDB_CHECK_DOING_READ_TYPE	redis-check-rdb.c	55;"	d	file:
RDB_CHECK_DOING_START	redis-check-rdb.c	54;"	d	file:
already_expired	redis-check-rdb.c	/^    unsigned long already_expired;  \/* Number of keys already expired. *\/$/;"	m	struct:__anon17	file:
doing	redis-check-rdb.c	/^    int doing;                      \/* The state while reading the RDB. *\/$/;"	m	struct:__anon17	file:
error	redis-check-rdb.c	/^    char error[1024];$/;"	m	struct:__anon17	file:
error_set	redis-check-rdb.c	/^    int error_set;                  \/* True if error is populated. *\/$/;"	m	struct:__anon17	file:
expires	redis-check-rdb.c	/^    unsigned long expires;          \/* Number of keys with an expire. *\/$/;"	m	struct:__anon17	file:
key	redis-check-rdb.c	/^    robj *key;                      \/* Current key we are reading. *\/$/;"	m	struct:__anon17	file:
key_type	redis-check-rdb.c	/^    int key_type;                   \/* Current key type if != -1. *\/$/;"	m	struct:__anon17	file:
keys	redis-check-rdb.c	/^    unsigned long keys;             \/* Number of keys processed. *\/$/;"	m	struct:__anon17	file:
rdbCheckError	redis-check-rdb.c	/^void rdbCheckError(const char *fmt, ...) {$/;"	f
rdbCheckHandleCrash	redis-check-rdb.c	/^void rdbCheckHandleCrash(int sig, siginfo_t *info, void *secret) {$/;"	f
rdbCheckInfo	redis-check-rdb.c	/^void rdbCheckInfo(const char *fmt, ...) {$/;"	f
rdbCheckMode	redis-check-rdb.c	/^int rdbCheckMode = 0;$/;"	v
rdbCheckSetError	redis-check-rdb.c	/^void rdbCheckSetError(const char *fmt, ...) {$/;"	f
rdbCheckSetupSignals	redis-check-rdb.c	/^void rdbCheckSetupSignals(void) {$/;"	f
rdbShowGenericInfo	redis-check-rdb.c	/^void rdbShowGenericInfo(void) {$/;"	f
rdb_check_doing_string	redis-check-rdb.c	/^char *rdb_check_doing_string[] = {$/;"	v
rdb_type_string	redis-check-rdb.c	/^char *rdb_type_string[] = {$/;"	v
rdbstate	redis-check-rdb.c	/^} rdbstate;$/;"	v	typeref:struct:__anon17
redis_check_rdb	redis-check-rdb.c	/^int redis_check_rdb(char *rdbfilename) {$/;"	f
redis_check_rdb_main	redis-check-rdb.c	/^int redis_check_rdb_main(int argc, char **argv) {$/;"	f
rio	redis-check-rdb.c	/^    rio *rio;$/;"	m	struct:__anon17	file:
CLI_HELP_COMMAND	redis-cli.c	205;"	d	file:
CLI_HELP_GROUP	redis-cli.c	206;"	d	file:
LATENCY_DIST_DEFAULT_INTERVAL	redis-cli.c	1519;"	d	file:
LATENCY_HISTORY_DEFAULT_INTERVAL	redis-cli.c	1472;"	d	file:
LATENCY_SAMPLE_RATE	redis-cli.c	1471;"	d	file:
LRUTestGenKey	redis-cli.c	/^void LRUTestGenKey(char *buf, size_t buflen) {$/;"	f
LRUTestMode	redis-cli.c	/^static void LRUTestMode(void) {$/;"	f	file:
LRU_CYCLE_PERIOD	redis-cli.c	2419;"	d	file:
LRU_CYCLE_PIPELINE_SIZE	redis-cli.c	2420;"	d	file:
OUTPUT_CSV	redis-cli.c	61;"	d	file:
OUTPUT_RAW	redis-cli.c	60;"	d	file:
OUTPUT_STANDARD	redis-cli.c	59;"	d	file:
PIPEMODE_WRITE_LOOP_MAX_BYTES	redis-cli.c	1777;"	d	file:
REDIS_CLI_DEFAULT_PIPE_TIMEOUT	redis-cli.c	63;"	d	file:
REDIS_CLI_HISTFILE_DEFAULT	redis-cli.c	65;"	d	file:
REDIS_CLI_HISTFILE_ENV	redis-cli.c	64;"	d	file:
REDIS_CLI_KEEPALIVE_INTERVAL	redis-cli.c	62;"	d	file:
REDIS_CLI_RCFILE_DEFAULT	redis-cli.c	67;"	d	file:
REDIS_CLI_RCFILE_ENV	redis-cli.c	66;"	d	file:
TYPE_HASH	redis-cli.c	1940;"	d	file:
TYPE_LIST	redis-cli.c	1938;"	d	file:
TYPE_NONE	redis-cli.c	1942;"	d	file:
TYPE_SET	redis-cli.c	1939;"	d	file:
TYPE_STRING	redis-cli.c	1937;"	d	file:
TYPE_ZSET	redis-cli.c	1941;"	d	file:
UNUSED	redis-cli.c	57;"	d	file:
argc	redis-cli.c	/^    int argc;$/;"	m	struct:__anon28	file:
argv	redis-cli.c	/^    sds *argv;$/;"	m	struct:__anon28	file:
auth	redis-cli.c	/^    char *auth;$/;"	m	struct:config	file:
bigkeys	redis-cli.c	/^    int bigkeys;$/;"	m	struct:config	file:
bytesToHuman	redis-cli.c	/^void bytesToHuman(char *s, long long n) {$/;"	f
character	redis-cli.c	/^    int character;   \/* Associated character in visualization. *\/$/;"	m	struct:distsamples	file:
cliAuth	redis-cli.c	/^static int cliAuth(void) {$/;"	f	file:
cliConnect	redis-cli.c	/^static int cliConnect(int force) {$/;"	f	file:
cliFormatReplyCSV	redis-cli.c	/^static sds cliFormatReplyCSV(redisReply *r) {$/;"	f	file:
cliFormatReplyRaw	redis-cli.c	/^static sds cliFormatReplyRaw(redisReply *r) {$/;"	f	file:
cliFormatReplyTTY	redis-cli.c	/^static sds cliFormatReplyTTY(redisReply *r, char *prefix) {$/;"	f	file:
cliInitHelp	redis-cli.c	/^static void cliInitHelp(void) {$/;"	f	file:
cliIntegrateHelp	redis-cli.c	/^static void cliIntegrateHelp(void) {$/;"	f	file:
cliLoadPreferences	redis-cli.c	/^void cliLoadPreferences(void) {$/;"	f
cliOutputCommandHelp	redis-cli.c	/^static void cliOutputCommandHelp(struct commandHelp *help, int group) {$/;"	f	file:
cliOutputGenericHelp	redis-cli.c	/^static void cliOutputGenericHelp(void) {$/;"	f	file:
cliOutputHelp	redis-cli.c	/^static void cliOutputHelp(int argc, char **argv) {$/;"	f	file:
cliPrintContextError	redis-cli.c	/^static void cliPrintContextError(void) {$/;"	f	file:
cliReadReply	redis-cli.c	/^static int cliReadReply(int output_raw_strings) {$/;"	f	file:
cliRefreshPrompt	redis-cli.c	/^static void cliRefreshPrompt(void) {$/;"	f	file:
cliSelect	redis-cli.c	/^static int cliSelect(void) {$/;"	f	file:
cliSendCommand	redis-cli.c	/^static int cliSendCommand(int argc, char **argv, int repeat) {$/;"	f	file:
cliSetPreferences	redis-cli.c	/^void cliSetPreferences(char **argv, int argc, int interactive) {$/;"	f
cliSplitArgs	redis-cli.c	/^static sds *cliSplitArgs(char *line, int *argc) {$/;"	f	file:
cliVersion	redis-cli.c	/^static sds cliVersion(void) {$/;"	f	file:
cluster_mode	redis-cli.c	/^    int cluster_mode;$/;"	m	struct:config	file:
cluster_reissue_command	redis-cli.c	/^    int cluster_reissue_command;$/;"	m	struct:config	file:
completionCallback	redis-cli.c	/^static void completionCallback(const char *buf, linenoiseCompletions *lc) {$/;"	f	file:
compute_something_fast	redis-cli.c	/^unsigned long compute_something_fast(void) {$/;"	f
config	redis-cli.c	/^static struct config {$/;"	s	file:
config	redis-cli.c	/^} config;$/;"	v	typeref:struct:config	file:
context	redis-cli.c	/^static redisContext *context;$/;"	v	file:
convertToSds	redis-cli.c	/^static char **convertToSds(int count, char** args) {$/;"	f	file:
count	redis-cli.c	/^    long long count; \/* Number of samples in this interval. *\/$/;"	m	struct:distsamples	file:
dbnum	redis-cli.c	/^    int dbnum;$/;"	m	struct:config	file:
distsamples	redis-cli.c	/^struct distsamples {$/;"	s	file:
enable_ldb_on_eval	redis-cli.c	/^    int enable_ldb_on_eval; \/* Handle manual SCRIPT DEBUG + EVAL commands. *\/$/;"	m	struct:config	file:
eval	redis-cli.c	/^    char *eval;$/;"	m	struct:config	file:
evalMode	redis-cli.c	/^static int evalMode(int argc, char **argv) {$/;"	f	file:
eval_ldb	redis-cli.c	/^    int eval_ldb;$/;"	m	struct:config	file:
eval_ldb_end	redis-cli.c	/^    int eval_ldb_end;   \/* Lua debugging session ended. *\/$/;"	m	struct:config	file:
eval_ldb_sync	redis-cli.c	/^    int eval_ldb_sync;  \/* Ask for synchronous mode of the Lua debugger. *\/$/;"	m	struct:config	file:
findBigKeys	redis-cli.c	/^static void findBigKeys(void) {$/;"	f	file:
force_cancel_loop	redis-cli.c	/^static volatile sig_atomic_t force_cancel_loop = 0;$/;"	v	file:
freeHintsCallback	redis-cli.c	/^static void freeHintsCallback(void *ptr) {$/;"	f	file:
full	redis-cli.c	/^    sds full;$/;"	m	struct:__anon28	file:
getDbSize	redis-cli.c	/^static int getDbSize(void) {$/;"	f	file:
getDotfilePath	redis-cli.c	/^static sds getDotfilePath(char *envoverride, char *dotfilename) {$/;"	f	file:
getInfoField	redis-cli.c	/^static char *getInfoField(char *info, char *field) {$/;"	f	file:
getKeySizes	redis-cli.c	/^static void getKeySizes(redisReply *keys, int *types,$/;"	f	file:
getKeyTypes	redis-cli.c	/^static void getKeyTypes(redisReply *keys, int *types) {$/;"	f	file:
getLongInfoField	redis-cli.c	/^static long getLongInfoField(char *info, char *field) {$/;"	f	file:
getRDB	redis-cli.c	/^static void getRDB(void) {$/;"	f	file:
getrdb_mode	redis-cli.c	/^    int getrdb_mode;$/;"	m	struct:config	file:
helpEntries	redis-cli.c	/^static helpEntry *helpEntries;$/;"	v	file:
helpEntriesLen	redis-cli.c	/^static int helpEntriesLen;$/;"	v	file:
helpEntry	redis-cli.c	/^} helpEntry;$/;"	t	typeref:struct:__anon28	file:
hints	redis-cli.c	/^    int hints;$/;"	m	struct:pref	file:
hintsCallback	redis-cli.c	/^static char *hintsCallback(const char *buf, int *color, int *bold) {$/;"	f	file:
hostip	redis-cli.c	/^    char *hostip;$/;"	m	struct:config	file:
hostport	redis-cli.c	/^    int hostport;$/;"	m	struct:config	file:
hostsocket	redis-cli.c	/^    char *hostsocket;$/;"	m	struct:config	file:
interactive	redis-cli.c	/^    int interactive;$/;"	m	struct:config	file:
interval	redis-cli.c	/^    long interval;$/;"	m	struct:config	file:
intrinsicLatencyMode	redis-cli.c	/^static void intrinsicLatencyMode(void) {$/;"	f	file:
intrinsicLatencyModeStop	redis-cli.c	/^static void intrinsicLatencyModeStop(int s) {$/;"	f	file:
intrinsic_latency_duration	redis-cli.c	/^    int intrinsic_latency_duration;$/;"	m	struct:config	file:
intrinsic_latency_mode	redis-cli.c	/^    int intrinsic_latency_mode;$/;"	m	struct:config	file:
isColorTerm	redis-cli.c	/^int isColorTerm(void) {$/;"	f
issueCommand	redis-cli.c	/^static int issueCommand(int argc, char **argv) {$/;"	f	file:
issueCommandRepeat	redis-cli.c	/^static int issueCommandRepeat(int argc, char **argv, long repeat) {$/;"	f	file:
last_cmd_type	redis-cli.c	/^    int last_cmd_type;$/;"	m	struct:config	file:
latencyDistMode	redis-cli.c	/^static void latencyDistMode(void) {$/;"	f	file:
latencyMode	redis-cli.c	/^static void latencyMode(void) {$/;"	f	file:
latency_dist_mode	redis-cli.c	/^    int latency_dist_mode;$/;"	m	struct:config	file:
latency_history	redis-cli.c	/^    int latency_history;$/;"	m	struct:config	file:
latency_mode	redis-cli.c	/^    int latency_mode;$/;"	m	struct:config	file:
lru_test_mode	redis-cli.c	/^    int lru_test_mode;$/;"	m	struct:config	file:
lru_test_sample_size	redis-cli.c	/^    long long lru_test_sample_size;$/;"	m	struct:config	file:
main	redis-cli.c	/^int main(int argc, char **argv) {$/;"	f
max	redis-cli.c	/^    long long max;   \/* Max latency to fit into this interval (usec). *\/$/;"	m	struct:distsamples	file:
mb_delim	redis-cli.c	/^    sds mb_delim;$/;"	m	struct:config	file:
monitor_mode	redis-cli.c	/^    int monitor_mode;$/;"	m	struct:config	file:
mstime	redis-cli.c	/^static long long mstime(void) {$/;"	f	file:
noninteractive	redis-cli.c	/^static int noninteractive(int argc, char **argv) {$/;"	f	file:
org	redis-cli.c	/^    struct commandHelp *org;$/;"	m	struct:__anon28	typeref:struct:__anon28::commandHelp	file:
output	redis-cli.c	/^    int output; \/* output mode, see OUTPUT_* defines *\/$/;"	m	struct:config	file:
parseOptions	redis-cli.c	/^static int parseOptions(int argc, char **argv) {$/;"	f	file:
pattern	redis-cli.c	/^    char *pattern;$/;"	m	struct:config	file:
pipeMode	redis-cli.c	/^static void pipeMode(void) {$/;"	f	file:
pipe_mode	redis-cli.c	/^    int pipe_mode;$/;"	m	struct:config	file:
pipe_timeout	redis-cli.c	/^    int pipe_timeout;$/;"	m	struct:config	file:
powerLawRand	redis-cli.c	/^long long powerLawRand(long long min, long long max, double alpha) {$/;"	f
pref	redis-cli.c	/^static struct pref {$/;"	s	file:
pref	redis-cli.c	/^} pref;$/;"	v	typeref:struct:pref	file:
prompt	redis-cli.c	/^    char prompt[128];$/;"	m	struct:config	file:
pubsub_mode	redis-cli.c	/^    int pubsub_mode;$/;"	m	struct:config	file:
rdb_filename	redis-cli.c	/^    char *rdb_filename;$/;"	m	struct:config	file:
readArgFromStdin	redis-cli.c	/^static sds readArgFromStdin(void) {$/;"	f	file:
reconnectingRedisCommand	redis-cli.c	/^static redisReply *reconnectingRedisCommand(redisContext *c, const char *fmt, ...) {$/;"	f	file:
repeat	redis-cli.c	/^    long repeat;$/;"	m	struct:config	file:
repl	redis-cli.c	/^static void repl(void) {$/;"	f	file:
scanMode	redis-cli.c	/^static void scanMode(void) {$/;"	f	file:
scan_mode	redis-cli.c	/^    int scan_mode;$/;"	m	struct:config	file:
sdsCatColorizedLdbReply	redis-cli.c	/^sds sdsCatColorizedLdbReply(sds o, char *s, size_t len) {$/;"	f
sdscatcolor	redis-cli.c	/^sds sdscatcolor(sds o, char *s, size_t len, char *color) {$/;"	f
sendScan	redis-cli.c	/^static redisReply *sendScan(unsigned long long *it) {$/;"	f	file:
sendSync	redis-cli.c	/^unsigned long long sendSync(int fd) {$/;"	f
showLatencyDistLegend	redis-cli.c	/^void showLatencyDistLegend(void) {$/;"	f
showLatencyDistSamples	redis-cli.c	/^void showLatencyDistSamples(struct distsamples *samples, long long tot) {$/;"	f
shutdown	redis-cli.c	/^    int shutdown;$/;"	m	struct:config	file:
slaveMode	redis-cli.c	/^static void slaveMode(void) {$/;"	f	file:
slave_mode	redis-cli.c	/^    int slave_mode;$/;"	m	struct:config	file:
spectrum_palette	redis-cli.c	/^int *spectrum_palette;$/;"	v
spectrum_palette_color	redis-cli.c	/^int spectrum_palette_color[] = {0,233,234,235,237,239,241,243,245,247,144,143,142,184,226,214,208,202,196};$/;"	v
spectrum_palette_color_size	redis-cli.c	/^int spectrum_palette_color_size = 19;$/;"	v
spectrum_palette_mono	redis-cli.c	/^int spectrum_palette_mono[] = {0,233,234,235,237,239,241,243,245,247,249,251,253};$/;"	v
spectrum_palette_mono_size	redis-cli.c	/^int spectrum_palette_mono_size = 13;$/;"	v
spectrum_palette_size	redis-cli.c	/^int spectrum_palette_size;$/;"	v
statMode	redis-cli.c	/^static void statMode(void) {$/;"	f	file:
stat_mode	redis-cli.c	/^    int stat_mode;$/;"	m	struct:config	file:
stdinarg	redis-cli.c	/^    int stdinarg; \/* get last arg from stdin. (-x option) *\/$/;"	m	struct:config	file:
toIntType	redis-cli.c	/^static int toIntType(char *key, char *type) {$/;"	f	file:
type	redis-cli.c	/^    int type;$/;"	m	struct:__anon28	file:
usage	redis-cli.c	/^static void usage(void) {$/;"	f	file:
ustime	redis-cli.c	/^static long long ustime(void) {$/;"	f	file:
ClusterNode	redis-trib.rb	/^class ClusterNode$/;"	c
RedisClusterCRC16	redis-trib.rb	/^module RedisClusterCRC16$/;"	m	class:RedisTrib
RedisTrib	redis-trib.rb	/^class RedisTrib$/;"	c
add_node	redis-trib.rb	/^    def add_node(node)$/;"	f	class:RedisTrib
add_slots	redis-trib.rb	/^    def add_slots(slots)$/;"	f	class:ClusterNode
addnode_cluster_cmd	redis-trib.rb	/^    def addnode_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
alloc_slots	redis-trib.rb	/^    def alloc_slots$/;"	f	class:RedisTrib
assert_cluster	redis-trib.rb	/^    def assert_cluster$/;"	f	class:ClusterNode
assert_empty	redis-trib.rb	/^    def assert_empty$/;"	f	class:ClusterNode
assign_config_epoch	redis-trib.rb	/^    def assign_config_epoch$/;"	f	class:RedisTrib.alloc_slots
call_cluster_cmd	redis-trib.rb	/^    def call_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
check_arity	redis-trib.rb	/^    def check_arity(req_args, num_args)$/;"	f	class:RedisTrib
check_cluster	redis-trib.rb	/^    def check_cluster(opt={})$/;"	f	class:RedisTrib
check_cluster_cmd	redis-trib.rb	/^    def check_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
check_config_consistency	redis-trib.rb	/^    def check_config_consistency$/;"	f	class:RedisTrib
check_create_parameters	redis-trib.rb	/^    def check_create_parameters$/;"	f	class:RedisTrib.alloc_slots
check_open_slots	redis-trib.rb	/^    def check_open_slots$/;"	f	class:RedisTrib
check_slots_coverage	redis-trib.rb	/^    def check_slots_coverage$/;"	f	class:RedisTrib
cluster_error	redis-trib.rb	/^    def cluster_error(msg)$/;"	f	class:RedisTrib
compute_reshard_table	redis-trib.rb	/^    def compute_reshard_table(sources,numslots)$/;"	f	class:RedisTrib.alloc_slots
connect	redis-trib.rb	/^    def connect(o={})$/;"	f	class:ClusterNode
covered_slots	redis-trib.rb	/^    def covered_slots$/;"	f	class:RedisTrib
crc16	redis-trib.rb	/^    def RedisClusterCRC16.crc16(bytes)$/;"	F	class:RedisTrib.RedisClusterCRC16
create_cluster_cmd	redis-trib.rb	/^    def create_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
delnode_cluster_cmd	redis-trib.rb	/^    def delnode_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
fix_cluster_cmd	redis-trib.rb	/^    def fix_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
fix_open_slot	redis-trib.rb	/^    def fix_open_slot(slot)$/;"	f	class:RedisTrib
fix_slots_coverage	redis-trib.rb	/^    def fix_slots_coverage$/;"	f	class:RedisTrib
flush_node_config	redis-trib.rb	/^    def flush_node_config$/;"	f	class:ClusterNode
flush_nodes_config	redis-trib.rb	/^    def flush_nodes_config$/;"	f	class:RedisTrib.alloc_slots
friends	redis-trib.rb	/^    def friends$/;"	f	class:ClusterNode
get_config_signature	redis-trib.rb	/^    def get_config_signature$/;"	f	class:ClusterNode
get_master_with_least_replicas	redis-trib.rb	/^    def get_master_with_least_replicas$/;"	f	class:RedisTrib
get_node_by_abbreviated_name	redis-trib.rb	/^    def get_node_by_abbreviated_name(name)$/;"	f	class:RedisTrib
get_node_by_name	redis-trib.rb	/^    def get_node_by_name(name)$/;"	f	class:RedisTrib
get_node_with_most_keys_in_slot	redis-trib.rb	/^    def get_node_with_most_keys_in_slot(nodes,slot)$/;"	f	class:RedisTrib
get_slot_owners	redis-trib.rb	/^    def get_slot_owners(slot)$/;"	f	class:RedisTrib
has_flag?	redis-trib.rb	/^    def has_flag?(flag)$/;"	f	class:ClusterNode
help_cluster_cmd	redis-trib.rb	/^    def help_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
import_cluster_cmd	redis-trib.rb	/^    def import_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
info	redis-trib.rb	/^    def info$/;"	f	class:ClusterNode
info_cluster_cmd	redis-trib.rb	/^    def info_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
info_string	redis-trib.rb	/^    def info_string$/;"	f	class:ClusterNode
initialize	redis-trib.rb	/^    def initialize$/;"	f	class:RedisTrib
initialize	redis-trib.rb	/^    def initialize(addr)$/;"	f	class:ClusterNode
is_config_consistent?	redis-trib.rb	/^    def is_config_consistent?$/;"	f	class:RedisTrib
is_dirty?	redis-trib.rb	/^    def is_dirty?$/;"	f	class:ClusterNode
join_cluster	redis-trib.rb	/^    def join_cluster$/;"	f	class:RedisTrib.alloc_slots
key_to_slot	redis-trib.rb	/^def key_to_slot(key)$/;"	f	class:RedisTrib
load_cluster_info_from_node	redis-trib.rb	/^    def load_cluster_info_from_node(nodeaddr)$/;"	f	class:RedisTrib.alloc_slots
load_info	redis-trib.rb	/^    def load_info(o={})$/;"	f	class:ClusterNode
move_slot	redis-trib.rb	/^    def move_slot(source,target,slot,o={})$/;"	f	class:RedisTrib.alloc_slots
nodes_with_keys_in_slot	redis-trib.rb	/^    def nodes_with_keys_in_slot(slot)$/;"	f	class:RedisTrib
parse_options	redis-trib.rb	/^    def parse_options(cmd)$/;"	f	class:RedisTrib.alloc_slots
populate_nodes_replicas_info	redis-trib.rb	/^    def populate_nodes_replicas_info$/;"	f	class:RedisTrib.alloc_slots
r	redis-trib.rb	/^    def r$/;"	f	class:ClusterNode
rebalance_cluster_cmd	redis-trib.rb	/^    def rebalance_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
reset_nodes	redis-trib.rb	/^    def reset_nodes$/;"	f	class:RedisTrib
reshard_cluster_cmd	redis-trib.rb	/^    def reshard_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
set_as_replica	redis-trib.rb	/^    def set_as_replica(node_id)$/;"	f	class:ClusterNode
set_timeout_cluster_cmd	redis-trib.rb	/^    def set_timeout_cluster_cmd(argv,opt)$/;"	f	class:RedisTrib.alloc_slots
show_cluster_info	redis-trib.rb	/^    def show_cluster_info$/;"	f	class:RedisTrib
show_help	redis-trib.rb	/^def show_help$/;"	f	class:RedisTrib
show_nodes	redis-trib.rb	/^    def show_nodes$/;"	f	class:RedisTrib.alloc_slots
show_reshard_table	redis-trib.rb	/^    def show_reshard_table(table)$/;"	f	class:RedisTrib.alloc_slots
slots	redis-trib.rb	/^    def slots$/;"	f	class:ClusterNode
to_s	redis-trib.rb	/^    def to_s$/;"	f	class:ClusterNode
wait_cluster_join	redis-trib.rb	/^    def wait_cluster_join$/;"	f	class:RedisTrib
xputs	redis-trib.rb	/^def xputs(s)$/;"	f
yes_or_die	redis-trib.rb	/^    def yes_or_die(msg)$/;"	f	class:RedisTrib.alloc_slots
__REDIS_ASSERT_H__	redisassert.h	39;"	d
assert	redisassert.h	43;"	d
redisBuildId	release.c	/^uint64_t redisBuildId(void) {$/;"	f
redisGitDirty	release.c	/^char *redisGitDirty(void) {$/;"	f
redisGitSHA1	release.c	/^char *redisGitSHA1(void) {$/;"	f
PSYNC_CONTINUE	replication.c	1277;"	d	file:
PSYNC_FULLRESYNC	replication.c	1278;"	d	file:
PSYNC_NOT_SUPPORTED	replication.c	1279;"	d	file:
PSYNC_WAIT_REPLY	replication.c	1276;"	d	file:
PSYNC_WRITE_ERROR	replication.c	1275;"	d	file:
REPL_MAX_WRITTEN_BEFORE_FSYNC	replication.c	983;"	d	file:
SYNC_CMD_FULL	replication.c	1180;"	d	file:
SYNC_CMD_READ	replication.c	1178;"	d	file:
SYNC_CMD_WRITE	replication.c	1179;"	d	file:
addReplyReplicationBacklog	replication.c	/^long long addReplyReplicationBacklog(client *c, long long offset) {$/;"	f
cancelReplicationHandshake	replication.c	/^int cancelReplicationHandshake(void) {$/;"	f
connectWithMaster	replication.c	/^int connectWithMaster(void) {$/;"	f
createReplicationBacklog	replication.c	/^void createReplicationBacklog(void) {$/;"	f
feedReplicationBacklog	replication.c	/^void feedReplicationBacklog(void *ptr, size_t len) {$/;"	f
feedReplicationBacklogWithObject	replication.c	/^void feedReplicationBacklogWithObject(robj *o) {$/;"	f
freeReplicationBacklog	replication.c	/^void freeReplicationBacklog(void) {$/;"	f
getPsyncInitialOffset	replication.c	/^long long getPsyncInitialOffset(void) {$/;"	f
masterTryPartialResynchronization	replication.c	/^int masterTryPartialResynchronization(client *c) {$/;"	f
processClientsWaitingReplicas	replication.c	/^void processClientsWaitingReplicas(void) {$/;"	f
putSlaveOnline	replication.c	/^void putSlaveOnline(client *slave) {$/;"	f
readSyncBulkPayload	replication.c	/^void readSyncBulkPayload(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
refreshGoodSlavesCount	replication.c	/^void refreshGoodSlavesCount(void) {$/;"	f
replconfCommand	replication.c	/^void replconfCommand(client *c) {$/;"	f
replicationAbortSyncTransfer	replication.c	/^void replicationAbortSyncTransfer(void) {$/;"	f
replicationCacheMaster	replication.c	/^void replicationCacheMaster(client *c) {$/;"	f
replicationCountAcksByOffset	replication.c	/^int replicationCountAcksByOffset(long long offset) {$/;"	f
replicationCreateMasterClient	replication.c	/^void replicationCreateMasterClient(int fd) {$/;"	f
replicationCron	replication.c	/^void replicationCron(void) {$/;"	f
replicationDiscardCachedMaster	replication.c	/^void replicationDiscardCachedMaster(void) {$/;"	f
replicationEmptyDbCallback	replication.c	/^void replicationEmptyDbCallback(void *privdata) {$/;"	f
replicationFeedMonitors	replication.c	/^void replicationFeedMonitors(client *c, list *monitors, int dictid, robj **argv, int argc) {$/;"	f
replicationFeedSlaves	replication.c	/^void replicationFeedSlaves(list *slaves, int dictid, robj **argv, int argc) {$/;"	f
replicationGetSlaveName	replication.c	/^char *replicationGetSlaveName(client *c) {$/;"	f
replicationGetSlaveOffset	replication.c	/^long long replicationGetSlaveOffset(void) {$/;"	f
replicationHandleMasterDisconnection	replication.c	/^void replicationHandleMasterDisconnection(void) {$/;"	f
replicationRequestAckFromSlaves	replication.c	/^void replicationRequestAckFromSlaves(void) {$/;"	f
replicationResurrectCachedMaster	replication.c	/^void replicationResurrectCachedMaster(int newfd) {$/;"	f
replicationScriptCacheAdd	replication.c	/^void replicationScriptCacheAdd(sds sha1) {$/;"	f
replicationScriptCacheExists	replication.c	/^int replicationScriptCacheExists(sds sha1) {$/;"	f
replicationScriptCacheFlush	replication.c	/^void replicationScriptCacheFlush(void) {$/;"	f
replicationScriptCacheInit	replication.c	/^void replicationScriptCacheInit(void) {$/;"	f
replicationSendAck	replication.c	/^void replicationSendAck(void) {$/;"	f
replicationSendNewlineToMaster	replication.c	/^void replicationSendNewlineToMaster(void) {$/;"	f
replicationSetMaster	replication.c	/^void replicationSetMaster(char *ip, int port) {$/;"	f
replicationSetupSlaveForFullResync	replication.c	/^int replicationSetupSlaveForFullResync(client *slave, long long offset) {$/;"	f
replicationUnsetMaster	replication.c	/^void replicationUnsetMaster(void) {$/;"	f
resizeReplicationBacklog	replication.c	/^void resizeReplicationBacklog(long long newsize) {$/;"	f
roleCommand	replication.c	/^void roleCommand(client *c) {$/;"	f
sendBulkToSlave	replication.c	/^void sendBulkToSlave(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
sendSynchronousCommand	replication.c	/^char *sendSynchronousCommand(int flags, int fd, ...) {$/;"	f
slaveIsInHandshakeState	replication.c	/^int slaveIsInHandshakeState(void) {$/;"	f
slaveTryPartialResynchronization	replication.c	/^int slaveTryPartialResynchronization(int fd, int read_reply) {$/;"	f
slaveofCommand	replication.c	/^void slaveofCommand(client *c) {$/;"	f
startBgsaveForReplication	replication.c	/^int startBgsaveForReplication(int mincapa) {$/;"	f
syncCommand	replication.c	/^void syncCommand(client *c) {$/;"	f
syncWithMaster	replication.c	/^void syncWithMaster(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
unblockClientWaitingReplicas	replication.c	/^void unblockClientWaitingReplicas(client *c) {$/;"	f
undoConnectWithMaster	replication.c	/^void undoConnectWithMaster(void) {$/;"	f
updateSlavesWaitingBgsave	replication.c	/^void updateSlavesWaitingBgsave(int bgsaveerr, int type) {$/;"	f
waitCommand	replication.c	/^void waitCommand(client *c) {$/;"	f
rioBufferFlush	rio.c	/^static int rioBufferFlush(rio *r) {$/;"	f	file:
rioBufferIO	rio.c	/^static const rio rioBufferIO = {$/;"	v	file:
rioBufferRead	rio.c	/^static size_t rioBufferRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioBufferTell	rio.c	/^static off_t rioBufferTell(rio *r) {$/;"	f	file:
rioBufferWrite	rio.c	/^static size_t rioBufferWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFdsetFlush	rio.c	/^static int rioFdsetFlush(rio *r) {$/;"	f	file:
rioFdsetIO	rio.c	/^static const rio rioFdsetIO = {$/;"	v	file:
rioFdsetRead	rio.c	/^static size_t rioFdsetRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioFdsetTell	rio.c	/^static off_t rioFdsetTell(rio *r) {$/;"	f	file:
rioFdsetWrite	rio.c	/^static size_t rioFdsetWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFileFlush	rio.c	/^static int rioFileFlush(rio *r) {$/;"	f	file:
rioFileIO	rio.c	/^static const rio rioFileIO = {$/;"	v	file:
rioFileRead	rio.c	/^static size_t rioFileRead(rio *r, void *buf, size_t len) {$/;"	f	file:
rioFileTell	rio.c	/^static off_t rioFileTell(rio *r) {$/;"	f	file:
rioFileWrite	rio.c	/^static size_t rioFileWrite(rio *r, const void *buf, size_t len) {$/;"	f	file:
rioFreeFdset	rio.c	/^void rioFreeFdset(rio *r) {$/;"	f
rioGenericUpdateChecksum	rio.c	/^void rioGenericUpdateChecksum(rio *r, const void *buf, size_t len) {$/;"	f
rioInitWithBuffer	rio.c	/^void rioInitWithBuffer(rio *r, sds s) {$/;"	f
rioInitWithFdset	rio.c	/^void rioInitWithFdset(rio *r, int *fds, int numfds) {$/;"	f
rioInitWithFile	rio.c	/^void rioInitWithFile(rio *r, FILE *fp) {$/;"	f
rioSetAutoSync	rio.c	/^void rioSetAutoSync(rio *r, off_t bytes) {$/;"	f
rioWriteBulkCount	rio.c	/^size_t rioWriteBulkCount(rio *r, char prefix, int count) {$/;"	f
rioWriteBulkDouble	rio.c	/^size_t rioWriteBulkDouble(rio *r, double d) {$/;"	f
rioWriteBulkLongLong	rio.c	/^size_t rioWriteBulkLongLong(rio *r, long long l) {$/;"	f
rioWriteBulkString	rio.c	/^size_t rioWriteBulkString(rio *r, const char *buf, size_t len) {$/;"	f
__REDIS_RIO_H	rio.h	33;"	d
_rio	rio.h	/^struct _rio {$/;"	s
autosync	rio.h	/^            off_t autosync; \/* fsync after 'autosync' bytes written. *\/$/;"	m	struct:_rio::__anon30::__anon32
buf	rio.h	/^            sds buf;$/;"	m	struct:_rio::__anon30::__anon33
buffer	rio.h	/^        } buffer;$/;"	m	union:_rio::__anon30	typeref:struct:_rio::__anon30::__anon31
buffered	rio.h	/^            off_t buffered; \/* Bytes written since last fsync. *\/$/;"	m	struct:_rio::__anon30::__anon32
cksum	rio.h	/^    uint64_t cksum;$/;"	m	struct:_rio
fds	rio.h	/^            int *fds;       \/* File descriptors. *\/$/;"	m	struct:_rio::__anon30::__anon33
fdset	rio.h	/^        } fdset;$/;"	m	union:_rio::__anon30	typeref:struct:_rio::__anon30::__anon33
file	rio.h	/^        } file;$/;"	m	union:_rio::__anon30	typeref:struct:_rio::__anon30::__anon32
flush	rio.h	/^    int (*flush)(struct _rio *);$/;"	m	struct:_rio
fp	rio.h	/^            FILE *fp;$/;"	m	struct:_rio::__anon30::__anon32
io	rio.h	/^    } io;$/;"	m	struct:_rio	typeref:union:_rio::__anon30
max_processing_chunk	rio.h	/^    size_t max_processing_chunk;$/;"	m	struct:_rio
numfds	rio.h	/^            int numfds;$/;"	m	struct:_rio::__anon30::__anon33
pos	rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anon30::__anon31
pos	rio.h	/^            off_t pos;$/;"	m	struct:_rio::__anon30::__anon33
processed_bytes	rio.h	/^    size_t processed_bytes;$/;"	m	struct:_rio
ptr	rio.h	/^            sds ptr;$/;"	m	struct:_rio::__anon30::__anon31
read	rio.h	/^    size_t (*read)(struct _rio *, void *buf, size_t len);$/;"	m	struct:_rio
rio	rio.h	/^typedef struct _rio rio;$/;"	t	typeref:struct:_rio
rioFlush	rio.h	/^static inline int rioFlush(rio *r) {$/;"	f
rioRead	rio.h	/^static inline size_t rioRead(rio *r, void *buf, size_t len) {$/;"	f
rioTell	rio.h	/^static inline off_t rioTell(rio *r) {$/;"	f
rioWrite	rio.h	/^static inline size_t rioWrite(rio *r, const void *buf, size_t len) {$/;"	f
state	rio.h	/^            int *state;     \/* Error state of each fd. 0 (if ok) or errno. *\/$/;"	m	struct:_rio::__anon30::__anon33
tell	rio.h	/^    off_t (*tell)(struct _rio *);$/;"	m	struct:_rio
update_cksum	rio.h	/^    void (*update_cksum)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio
write	rio.h	/^    size_t (*write)(struct _rio *, const void *buf, size_t len);$/;"	m	struct:_rio
LDB_BREAKPOINTS_MAX	scripting.c	58;"	d	file:
LDB_MAX_LEN_DEFAULT	scripting.c	59;"	d	file:
LDB_MAX_VALUES_DEPTH	scripting.c	1853;"	d	file:
LUA_CMD_OBJCACHE_MAX_LEN	scripting.c	347;"	d	file:
LUA_CMD_OBJCACHE_SIZE	scripting.c	346;"	d	file:
LUA_GC_CYCLE_PERIOD	scripting.c	1338;"	d	file:
active	scripting.c	/^    int active; \/* Are we debugging EVAL right now? *\/$/;"	m	struct:ldbState	file:
bp	scripting.c	/^    int bp[LDB_BREAKPOINTS_MAX]; \/* An array of breakpoints line numbers. *\/$/;"	m	struct:ldbState	file:
bpcount	scripting.c	/^    int bpcount; \/* Number of valid entries inside bp. *\/$/;"	m	struct:ldbState	file:
cbuf	scripting.c	/^    sds cbuf;   \/* Debugger client command buffer. *\/$/;"	m	struct:ldbState	file:
children	scripting.c	/^    list *children; \/* All forked debugging sessions pids. *\/$/;"	m	struct:ldbState	file:
currentline	scripting.c	/^    int currentline;    \/* Current line number. *\/$/;"	m	struct:ldbState	file:
evalCommand	scripting.c	/^void evalCommand(client *c) {$/;"	f
evalGenericCommand	scripting.c	/^void evalGenericCommand(client *c, int evalsha) {$/;"	f
evalGenericCommandWithDebugging	scripting.c	/^void evalGenericCommandWithDebugging(client *c, int evalsha) {$/;"	f
evalShaCommand	scripting.c	/^void evalShaCommand(client *c) {$/;"	f
fd	scripting.c	/^    int fd;     \/* Socket of the debugging client. *\/$/;"	m	struct:ldbState	file:
forked	scripting.c	/^    int forked; \/* Is this a fork()ed debugging session? *\/$/;"	m	struct:ldbState	file:
ldb	scripting.c	/^} ldb;$/;"	v	typeref:struct:ldbState
ldbAddBreakpoint	scripting.c	/^int ldbAddBreakpoint(int line) {$/;"	f
ldbBreak	scripting.c	/^void ldbBreak(sds *argv, int argc) {$/;"	f
ldbCatStackValue	scripting.c	/^sds ldbCatStackValue(sds s, lua_State *lua, int idx) {$/;"	f
ldbCatStackValueRec	scripting.c	/^sds ldbCatStackValueRec(sds s, lua_State *lua, int idx, int level) {$/;"	f
ldbDelBreakpoint	scripting.c	/^int ldbDelBreakpoint(int line) {$/;"	f
ldbDisable	scripting.c	/^void ldbDisable(client *c) {$/;"	f
ldbEnable	scripting.c	/^void ldbEnable(client *c) {$/;"	f
ldbEndSession	scripting.c	/^void ldbEndSession(client *c) {$/;"	f
ldbEval	scripting.c	/^void ldbEval(lua_State *lua, sds *argv, int argc) {$/;"	f
ldbFlushLog	scripting.c	/^void ldbFlushLog(list *log) {$/;"	f
ldbGetSourceLine	scripting.c	/^char *ldbGetSourceLine(int line) {$/;"	f
ldbInit	scripting.c	/^void ldbInit(void) {$/;"	f
ldbIsBreakpoint	scripting.c	/^int ldbIsBreakpoint(int line) {$/;"	f
ldbKillForkedSessions	scripting.c	/^void ldbKillForkedSessions(void) {$/;"	f
ldbList	scripting.c	/^void ldbList(int around, int context) {$/;"	f
ldbLog	scripting.c	/^void ldbLog(sds entry) {$/;"	f
ldbLogRedisReply	scripting.c	/^void ldbLogRedisReply(char *reply) {$/;"	f
ldbLogSourceLine	scripting.c	/^void ldbLogSourceLine(int lnum) {$/;"	f
ldbLogStackValue	scripting.c	/^void ldbLogStackValue(lua_State *lua, char *prefix) {$/;"	f
ldbLogWithMaxLen	scripting.c	/^void ldbLogWithMaxLen(sds entry) {$/;"	f
ldbMaxlen	scripting.c	/^void ldbMaxlen(sds *argv, int argc) {$/;"	f
ldbPendingChildren	scripting.c	/^int ldbPendingChildren(void) {$/;"	f
ldbPrint	scripting.c	/^void ldbPrint(lua_State *lua, char *varname) {$/;"	f
ldbPrintAll	scripting.c	/^void ldbPrintAll(lua_State *lua) {$/;"	f
ldbRedis	scripting.c	/^void ldbRedis(lua_State *lua, sds *argv, int argc) {$/;"	f
ldbRedisProtocolToHuman	scripting.c	/^char *ldbRedisProtocolToHuman(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Bulk	scripting.c	/^char *ldbRedisProtocolToHuman_Bulk(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Int	scripting.c	/^char *ldbRedisProtocolToHuman_Int(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_MultiBulk	scripting.c	/^char *ldbRedisProtocolToHuman_MultiBulk(sds *o, char *reply) {$/;"	f
ldbRedisProtocolToHuman_Status	scripting.c	/^char *ldbRedisProtocolToHuman_Status(sds *o, char *reply) {$/;"	f
ldbRemoveChild	scripting.c	/^int ldbRemoveChild(pid_t pid) {$/;"	f
ldbRepl	scripting.c	/^int ldbRepl(lua_State *lua) {$/;"	f
ldbReplParseCommand	scripting.c	/^sds *ldbReplParseCommand(int *argcp) {$/;"	f
ldbSendLogs	scripting.c	/^void ldbSendLogs(void) {$/;"	f
ldbStartSession	scripting.c	/^int ldbStartSession(client *c) {$/;"	f
ldbState	scripting.c	/^struct ldbState {$/;"	s	file:
ldbTrace	scripting.c	/^void ldbTrace(lua_State *lua) {$/;"	f
lines	scripting.c	/^    int lines;  \/* Number of lines in 'src'. *\/$/;"	m	struct:ldbState	file:
logs	scripting.c	/^    list *logs; \/* List of messages to send to the client. *\/$/;"	m	struct:ldbState	file:
luaCreateFunction	scripting.c	/^int luaCreateFunction(client *c, lua_State *lua, char *funcname, robj *body) {$/;"	f
luaLdbLineHook	scripting.c	/^void luaLdbLineHook(lua_State *lua, lua_Debug *ar) {$/;"	f
luaLoadLib	scripting.c	/^void luaLoadLib(lua_State *lua, const char *libname, lua_CFunction luafunc) {$/;"	f
luaLoadLibraries	scripting.c	/^void luaLoadLibraries(lua_State *lua) {$/;"	f
luaLogCommand	scripting.c	/^int luaLogCommand(lua_State *lua) {$/;"	f
luaMaskCountHook	scripting.c	/^void luaMaskCountHook(lua_State *lua, lua_Debug *ar) {$/;"	f
luaPushError	scripting.c	/^void luaPushError(lua_State *lua, char *error) {$/;"	f
luaRaiseError	scripting.c	/^int luaRaiseError(lua_State *lua) {$/;"	f
luaRedisBreakpointCommand	scripting.c	/^int luaRedisBreakpointCommand(lua_State *lua) {$/;"	f
luaRedisCallCommand	scripting.c	/^int luaRedisCallCommand(lua_State *lua) {$/;"	f
luaRedisDebugCommand	scripting.c	/^int luaRedisDebugCommand(lua_State *lua) {$/;"	f
luaRedisErrorReplyCommand	scripting.c	/^int luaRedisErrorReplyCommand(lua_State *lua) {$/;"	f
luaRedisGenericCommand	scripting.c	/^int luaRedisGenericCommand(lua_State *lua, int raise_error) {$/;"	f
luaRedisPCallCommand	scripting.c	/^int luaRedisPCallCommand(lua_State *lua) {$/;"	f
luaRedisReplicateCommandsCommand	scripting.c	/^int luaRedisReplicateCommandsCommand(lua_State *lua) {$/;"	f
luaRedisReturnSingleFieldTable	scripting.c	/^int luaRedisReturnSingleFieldTable(lua_State *lua, char *field) {$/;"	f
luaRedisSetReplCommand	scripting.c	/^int luaRedisSetReplCommand(lua_State *lua) {$/;"	f
luaRedisSha1hexCommand	scripting.c	/^int luaRedisSha1hexCommand(lua_State *lua) {$/;"	f
luaRedisStatusReplyCommand	scripting.c	/^int luaRedisStatusReplyCommand(lua_State *lua) {$/;"	f
luaRemoveUnsupportedFunctions	scripting.c	/^void luaRemoveUnsupportedFunctions(lua_State *lua) {$/;"	f
luaReplyToRedisReply	scripting.c	/^void luaReplyToRedisReply(client *c, lua_State *lua) {$/;"	f
luaSetGlobalArray	scripting.c	/^void luaSetGlobalArray(lua_State *lua, char *var, robj **elev, int elec) {$/;"	f
luaSortArray	scripting.c	/^void luaSortArray(lua_State *lua) {$/;"	f
luabp	scripting.c	/^    int luabp;  \/* Stop at next line because redis.breakpoint() was called. *\/$/;"	m	struct:ldbState	file:
maxlen	scripting.c	/^    size_t maxlen;  \/* Max var dump \/ reply length. *\/$/;"	m	struct:ldbState	file:
maxlen_hint_sent	scripting.c	/^    int maxlen_hint_sent; \/* Did we already hint about "set maxlen"? *\/$/;"	m	struct:ldbState	file:
redisProtocolToLuaType	scripting.c	/^char *redisProtocolToLuaType(lua_State *lua, char* reply) {$/;"	f
redisProtocolToLuaType_Bulk	scripting.c	/^char *redisProtocolToLuaType_Bulk(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Error	scripting.c	/^char *redisProtocolToLuaType_Error(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Int	scripting.c	/^char *redisProtocolToLuaType_Int(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_MultiBulk	scripting.c	/^char *redisProtocolToLuaType_MultiBulk(lua_State *lua, char *reply) {$/;"	f
redisProtocolToLuaType_Status	scripting.c	/^char *redisProtocolToLuaType_Status(lua_State *lua, char *reply) {$/;"	f
redis_math_random	scripting.c	/^int redis_math_random (lua_State *L) {$/;"	f
redis_math_randomseed	scripting.c	/^int redis_math_randomseed (lua_State *L) {$/;"	f
scriptCommand	scripting.c	/^void scriptCommand(client *c) {$/;"	f
scriptingEnableGlobalsProtection	scripting.c	/^void scriptingEnableGlobalsProtection(lua_State *lua) {$/;"	f
scriptingInit	scripting.c	/^void scriptingInit(int setup) {$/;"	f
scriptingRelease	scripting.c	/^void scriptingRelease(void) {$/;"	f
scriptingReset	scripting.c	/^void scriptingReset(void) {$/;"	f
sha1hex	scripting.c	/^void sha1hex(char *digest, char *script, size_t len) {$/;"	f
src	scripting.c	/^    sds *src;   \/* Lua script source code split by line. *\/$/;"	m	struct:ldbState	file:
step	scripting.c	/^    int step;   \/* Stop at next line ragardless of breakpoints. *\/$/;"	m	struct:ldbState	file:
traces	scripting.c	/^    list *traces; \/* Messages about Redis commands executed since last stop.*\/$/;"	m	struct:ldbState	file:
SDS_LLSTR_SIZE	sds.c	428;"	d	file:
UNUSED	sds.c	1105;"	d	file:
hex_digit_to_int	sds.c	/^int hex_digit_to_int(char c) {$/;"	f
is_hex_digit	sds.c	/^int is_hex_digit(char c) {$/;"	f
main	sds.c	/^int main(void) {$/;"	f
sdsAllocPtr	sds.c	/^void *sdsAllocPtr(sds s) {$/;"	f
sdsAllocSize	sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsHdrSize	sds.c	/^static inline int sdsHdrSize(char type) {$/;"	f	file:
sdsIncrLen	sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f
sdsMakeRoomFor	sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsRemoveFreeSpace	sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsReqType	sds.c	/^static inline char sdsReqType(size_t string_size) {$/;"	f	file:
sdsTest	sds.c	/^int sdsTest(void) {$/;"	f
sds_free	sds.c	/^void sds_free(void *ptr) { s_free(ptr); }$/;"	f
sds_malloc	sds.c	/^void *sds_malloc(size_t size) { return s_malloc(size); }$/;"	f
sds_realloc	sds.c	/^void *sds_realloc(void *ptr, size_t size) { return s_realloc(ptr,size); }$/;"	f
sdscat	sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatfmt	sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f
sdscatlen	sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscpy	sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdsjoin	sds.c	/^sds sdsjoin(char **argv, int argc, char *sep) {$/;"	f
sdsjoinsds	sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f
sdsll2str	sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f
sdsmapchars	sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	sds.c	/^void sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitlen	sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds.c	/^sds sdstrim(sds s, const char *cset) {$/;"	f
sdsull2str	sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f
SDS_HDR	sds.h	83;"	d
SDS_HDR_VAR	sds.h	82;"	d
SDS_MAX_PREALLOC	sds.h	36;"	d
SDS_TYPE_16	sds.h	77;"	d
SDS_TYPE_32	sds.h	78;"	d
SDS_TYPE_5	sds.h	75;"	d
SDS_TYPE_5_LEN	sds.h	84;"	d
SDS_TYPE_64	sds.h	79;"	d
SDS_TYPE_8	sds.h	76;"	d
SDS_TYPE_BITS	sds.h	81;"	d
SDS_TYPE_MASK	sds.h	80;"	d
__SDS_H	sds.h	34;"	d
alloc	sds.h	/^    uint16_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr16
alloc	sds.h	/^    uint32_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr32
alloc	sds.h	/^    uint64_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr64
alloc	sds.h	/^    uint8_t alloc; \/* excluding the header and null terminator *\/$/;"	m	struct:sdshdr8
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr16
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr32
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr5
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr64
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr8
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr16
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr32
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr64
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, 5 unused bits *\/$/;"	m	struct:sdshdr8
flags	sds.h	/^    unsigned char flags; \/* 3 lsb of type, and 5 msb of string length *\/$/;"	m	struct:sdshdr5
len	sds.h	/^    uint16_t len; \/* used *\/$/;"	m	struct:sdshdr16
len	sds.h	/^    uint32_t len; \/* used *\/$/;"	m	struct:sdshdr32
len	sds.h	/^    uint64_t len; \/* used *\/$/;"	m	struct:sdshdr64
len	sds.h	/^    uint8_t len; \/* used *\/$/;"	m	struct:sdshdr8
sds	sds.h	/^typedef char *sds;$/;"	t
sdsalloc	sds.h	/^static inline size_t sdsalloc(const sds s) {$/;"	f
sdsavail	sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdshdr16	sds.h	/^struct __attribute__ ((__packed__)) sdshdr16 {$/;"	s
sdshdr32	sds.h	/^struct __attribute__ ((__packed__)) sdshdr32 {$/;"	s
sdshdr5	sds.h	/^struct __attribute__ ((__packed__)) sdshdr5 {$/;"	s
sdshdr64	sds.h	/^struct __attribute__ ((__packed__)) sdshdr64 {$/;"	s
sdshdr8	sds.h	/^struct __attribute__ ((__packed__)) sdshdr8 {$/;"	s
sdsinclen	sds.h	/^static inline void sdsinclen(sds s, size_t inc) {$/;"	f
sdslen	sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdssetalloc	sds.h	/^static inline void sdssetalloc(sds s, size_t newlen) {$/;"	f
sdssetlen	sds.h	/^static inline void sdssetlen(sds s, size_t newlen) {$/;"	f
s_free	sdsalloc.h	42;"	d
s_malloc	sdsalloc.h	40;"	d
s_realloc	sdsalloc.h	41;"	d
REDIS_SENTINEL_PORT	sentinel.c	43;"	d	file:
SENTINEL_ASK_FORCED	sentinel.c	3550;"	d	file:
SENTINEL_ASK_PERIOD	sentinel.c	73;"	d	file:
SENTINEL_DEFAULT_DOWN_AFTER	sentinel.c	75;"	d	file:
SENTINEL_DEFAULT_FAILOVER_TIMEOUT	sentinel.c	83;"	d	file:
SENTINEL_DEFAULT_PARALLEL_SYNCS	sentinel.c	81;"	d	file:
SENTINEL_DEFAULT_SLAVE_PRIORITY	sentinel.c	79;"	d	file:
SENTINEL_ELECTION_TIMEOUT	sentinel.c	85;"	d	file:
SENTINEL_FAILOVER_STATE_NONE	sentinel.c	89;"	d	file:
SENTINEL_FAILOVER_STATE_RECONF_SLAVES	sentinel.c	94;"	d	file:
SENTINEL_FAILOVER_STATE_SELECT_SLAVE	sentinel.c	91;"	d	file:
SENTINEL_FAILOVER_STATE_SEND_SLAVEOF_NOONE	sentinel.c	92;"	d	file:
SENTINEL_FAILOVER_STATE_UPDATE_CONFIG	sentinel.c	95;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_PROMOTION	sentinel.c	93;"	d	file:
SENTINEL_FAILOVER_STATE_WAIT_START	sentinel.c	90;"	d	file:
SENTINEL_GENERATE_EVENT	sentinel.c	104;"	d	file:
SENTINEL_HELLO_CHANNEL	sentinel.c	76;"	d	file:
SENTINEL_INFO_PERIOD	sentinel.c	71;"	d	file:
SENTINEL_ISQR_NOAUTH	sentinel.c	2859;"	d	file:
SENTINEL_ISQR_NOQUORUM	sentinel.c	2858;"	d	file:
SENTINEL_ISQR_OK	sentinel.c	2857;"	d	file:
SENTINEL_LEADER	sentinel.c	105;"	d	file:
SENTINEL_MASTER_LINK_STATUS_DOWN	sentinel.c	98;"	d	file:
SENTINEL_MASTER_LINK_STATUS_UP	sentinel.c	97;"	d	file:
SENTINEL_MAX_DESYNC	sentinel.c	86;"	d	file:
SENTINEL_MAX_PENDING_COMMANDS	sentinel.c	84;"	d	file:
SENTINEL_MIN_LINK_RECONNECT_PERIOD	sentinel.c	82;"	d	file:
SENTINEL_NO_FLAGS	sentinel.c	103;"	d	file:
SENTINEL_OBSERVER	sentinel.c	106;"	d	file:
SENTINEL_PING_PERIOD	sentinel.c	72;"	d	file:
SENTINEL_PUBLISH_PERIOD	sentinel.c	74;"	d	file:
SENTINEL_RESET_NO_SENTINELS	sentinel.c	1397;"	d	file:
SENTINEL_SCRIPT_MAX_ARGS	sentinel.c	666;"	d	file:
SENTINEL_SCRIPT_MAX_QUEUE	sentinel.c	111;"	d	file:
SENTINEL_SCRIPT_MAX_RETRY	sentinel.c	114;"	d	file:
SENTINEL_SCRIPT_MAX_RUNNING	sentinel.c	112;"	d	file:
SENTINEL_SCRIPT_MAX_RUNTIME	sentinel.c	113;"	d	file:
SENTINEL_SCRIPT_NONE	sentinel.c	109;"	d	file:
SENTINEL_SCRIPT_RETRY_DELAY	sentinel.c	115;"	d	file:
SENTINEL_SCRIPT_RUNNING	sentinel.c	110;"	d	file:
SENTINEL_SIMFAILURE_CRASH_AFTER_ELECTION	sentinel.c	119;"	d	file:
SENTINEL_SIMFAILURE_CRASH_AFTER_PROMOTION	sentinel.c	120;"	d	file:
SENTINEL_SIMFAILURE_NONE	sentinel.c	118;"	d	file:
SENTINEL_SLAVE_RECONF_TIMEOUT	sentinel.c	80;"	d	file:
SENTINEL_TILT_PERIOD	sentinel.c	78;"	d	file:
SENTINEL_TILT_TRIGGER	sentinel.c	77;"	d	file:
SRI_FAILOVER_IN_PROGRESS	sentinel.c	61;"	d	file:
SRI_FORCE_FAILOVER	sentinel.c	67;"	d	file:
SRI_MASTER	sentinel.c	54;"	d	file:
SRI_MASTER_DOWN	sentinel.c	59;"	d	file:
SRI_O_DOWN	sentinel.c	58;"	d	file:
SRI_PROMOTED	sentinel.c	63;"	d	file:
SRI_RECONF_DONE	sentinel.c	66;"	d	file:
SRI_RECONF_INPROG	sentinel.c	65;"	d	file:
SRI_RECONF_SENT	sentinel.c	64;"	d	file:
SRI_SCRIPT_KILL_SENT	sentinel.c	68;"	d	file:
SRI_SENTINEL	sentinel.c	56;"	d	file:
SRI_SLAVE	sentinel.c	55;"	d	file:
SRI_S_DOWN	sentinel.c	57;"	d	file:
act_ping_time	sentinel.c	/^    mstime_t act_ping_time;   \/* Time at which the last pending ping (no pong$/;"	m	struct:instanceLink	file:
addReplyDictOfRedisInstances	sentinel.c	/^void addReplyDictOfRedisInstances(client *c, dict *instances) {$/;"	f
addReplySentinelRedisInstance	sentinel.c	/^void addReplySentinelRedisInstance(client *c, sentinelRedisInstance *ri) {$/;"	f
addr	sentinel.c	/^    sentinelAddr *addr; \/* Master host. *\/$/;"	m	struct:sentinelRedisInstance	file:
announce_ip	sentinel.c	/^    char *announce_ip;  \/* IP addr that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:
announce_port	sentinel.c	/^    int announce_port;  \/* Port that is gossiped to other sentinels if$/;"	m	struct:sentinelState	file:
argv	sentinel.c	/^    char **argv;            \/* Arguments to call the script. *\/$/;"	m	struct:sentinelScriptJob	file:
auth_pass	sentinel.c	/^    char *auth_pass;    \/* Password to use for AUTH against master & slaves. *\/$/;"	m	struct:sentinelRedisInstance	file:
cc	sentinel.c	/^    redisAsyncContext *cc; \/* Hiredis context for commands. *\/$/;"	m	struct:instanceLink	file:
cc_conn_time	sentinel.c	/^    mstime_t cc_conn_time; \/* cc connection time. *\/$/;"	m	struct:instanceLink	file:
client_reconfig_script	sentinel.c	/^    char *client_reconfig_script;$/;"	m	struct:sentinelRedisInstance	file:
compareSlavesForPromotion	sentinel.c	/^int compareSlavesForPromotion(const void *a, const void *b) {$/;"	f
config_epoch	sentinel.c	/^    uint64_t config_epoch;  \/* Configuration epoch. *\/$/;"	m	struct:sentinelRedisInstance	file:
context	sentinel.c	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents	file:
createInstanceLink	sentinel.c	/^instanceLink *createInstanceLink(void) {$/;"	f
createSentinelAddr	sentinel.c	/^sentinelAddr *createSentinelAddr(char *hostname, int port) {$/;"	f
createSentinelRedisInstance	sentinel.c	/^sentinelRedisInstance *createSentinelRedisInstance(char *name, int flags, char *hostname, int port, int quorum, sentinelRedisInstance *master) {$/;"	f
current_epoch	sentinel.c	/^    uint64_t current_epoch;         \/* Current epoch. *\/$/;"	m	struct:sentinelState	file:
dictInstancesValDestructor	sentinel.c	/^void dictInstancesValDestructor (void *privdata, void *obj) {$/;"	f
disconnected	sentinel.c	/^    int disconnected;      \/* Non-zero if we need to reconnect cc or pc. *\/$/;"	m	struct:instanceLink	file:
down_after_period	sentinel.c	/^    mstime_t down_after_period; \/* Consider it down after that period. *\/$/;"	m	struct:sentinelRedisInstance	file:
dupSentinelAddr	sentinel.c	/^sentinelAddr *dupSentinelAddr(sentinelAddr *src) {$/;"	f
failover_delay_logged	sentinel.c	/^    mstime_t failover_delay_logged; \/* For what failover_start_time value we$/;"	m	struct:sentinelRedisInstance	file:
failover_epoch	sentinel.c	/^    uint64_t failover_epoch; \/* Epoch of the currently started failover. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_start_time	sentinel.c	/^    mstime_t failover_start_time;   \/* Last failover attempt start time. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_state	sentinel.c	/^    int failover_state; \/* See SENTINEL_FAILOVER_STATE_* defines. *\/$/;"	m	struct:sentinelRedisInstance	file:
failover_state_change_time	sentinel.c	/^    mstime_t failover_state_change_time;$/;"	m	struct:sentinelRedisInstance	file:
failover_timeout	sentinel.c	/^    mstime_t failover_timeout;      \/* Max time to refresh failover state. *\/$/;"	m	struct:sentinelRedisInstance	file:
fd	sentinel.c	/^    int fd;$/;"	m	struct:redisAeEvents	file:
flags	sentinel.c	/^    int flags;              \/* Script job flags: SENTINEL_SCRIPT_* *\/$/;"	m	struct:sentinelScriptJob	file:
flags	sentinel.c	/^    int flags;      \/* See SRI_... defines *\/$/;"	m	struct:sentinelRedisInstance	file:
getSentinelRedisInstanceByAddrAndRunID	sentinel.c	/^sentinelRedisInstance *getSentinelRedisInstanceByAddrAndRunID(dict *instances, char *ip, int port, char *runid) {$/;"	f
info	sentinel.c	/^    sds info; \/* cached INFO output *\/$/;"	m	struct:sentinelRedisInstance	file:
info_refresh	sentinel.c	/^    mstime_t info_refresh;  \/* Time at which we received INFO output from it. *\/$/;"	m	struct:sentinelRedisInstance	file:
info_section_from_redis	sentinel.c	3200;"	d	file:
initSentinel	sentinel.c	/^void initSentinel(void) {$/;"	f
initSentinelConfig	sentinel.c	/^void initSentinelConfig(void) {$/;"	f
instanceLink	sentinel.c	/^typedef struct instanceLink {$/;"	s	file:
instanceLink	sentinel.c	/^} instanceLink;$/;"	t	typeref:struct:instanceLink	file:
instanceLinkCloseConnection	sentinel.c	/^void instanceLinkCloseConnection(instanceLink *link, redisAsyncContext *c) {$/;"	f
instanceLinkConnectionError	sentinel.c	/^void instanceLinkConnectionError(const redisAsyncContext *c) {$/;"	f
instancesDictType	sentinel.c	/^dictType instancesDictType = {$/;"	v
ip	sentinel.c	/^    char *ip;$/;"	m	struct:sentinelAddr	file:
last_avail_time	sentinel.c	/^    mstime_t last_avail_time; \/* Last time the instance replied to ping with$/;"	m	struct:instanceLink	file:
last_hello_time	sentinel.c	/^    mstime_t last_hello_time; \/* Only used if SRI_SENTINEL is set. Last time$/;"	m	struct:sentinelRedisInstance	file:
last_master_down_reply_time	sentinel.c	/^    mstime_t last_master_down_reply_time; \/* Time of last reply to$/;"	m	struct:sentinelRedisInstance	file:
last_ping_time	sentinel.c	/^    mstime_t last_ping_time;  \/* Time at which we sent the last ping. This is$/;"	m	struct:instanceLink	file:
last_pong_time	sentinel.c	/^    mstime_t last_pong_time;  \/* Last time the instance replied to ping,$/;"	m	struct:instanceLink	file:
last_pub_time	sentinel.c	/^    mstime_t last_pub_time;   \/* Last time we sent hello via Pub\/Sub. *\/$/;"	m	struct:sentinelRedisInstance	file:
last_reconn_time	sentinel.c	/^    mstime_t last_reconn_time;  \/* Last reconnection attempt performed when$/;"	m	struct:instanceLink	file:
leader	sentinel.c	/^    char *leader;       \/* If this is a master instance, this is the runid of$/;"	m	struct:sentinelRedisInstance	file:
leaderVotesDictType	sentinel.c	/^dictType leaderVotesDictType = {$/;"	v
leader_epoch	sentinel.c	/^    uint64_t leader_epoch; \/* Epoch of the 'leader' field. *\/$/;"	m	struct:sentinelRedisInstance	file:
link	sentinel.c	/^    instanceLink *link; \/* Link to the instance, may be shared for Sentinels. *\/$/;"	m	struct:sentinelRedisInstance	file:
loop	sentinel.c	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents	file:
master	sentinel.c	/^    struct sentinelRedisInstance *master; \/* Master instance if it's slave. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:
master_link_down_time	sentinel.c	/^    mstime_t master_link_down_time; \/* Slave replication link down time. *\/$/;"	m	struct:sentinelRedisInstance	file:
masters	sentinel.c	/^    dict *masters;      \/* Dictionary of master sentinelRedisInstances.$/;"	m	struct:sentinelState	file:
myid	sentinel.c	/^    char myid[CONFIG_RUN_ID_SIZE+1]; \/* This sentinel ID. *\/$/;"	m	struct:sentinelState	file:
name	sentinel.c	/^    char *name;     \/* Master name from the point of view of this sentinel. *\/$/;"	m	struct:sentinelRedisInstance	file:
notification_script	sentinel.c	/^    char *notification_script;$/;"	m	struct:sentinelRedisInstance	file:
o_down_since_time	sentinel.c	/^    mstime_t o_down_since_time; \/* Objectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:
parallel_syncs	sentinel.c	/^    int parallel_syncs; \/* How many slaves to reconfigure at same time. *\/$/;"	m	struct:sentinelRedisInstance	file:
pc	sentinel.c	/^    redisAsyncContext *pc; \/* Hiredis context for Pub \/ Sub. *\/$/;"	m	struct:instanceLink	file:
pc_conn_time	sentinel.c	/^    mstime_t pc_conn_time; \/* pc connection time. *\/$/;"	m	struct:instanceLink	file:
pc_last_activity	sentinel.c	/^    mstime_t pc_last_activity; \/* Last time we received any message. *\/$/;"	m	struct:instanceLink	file:
pending_commands	sentinel.c	/^    int pending_commands;  \/* Number of commands sent waiting for a reply. *\/$/;"	m	struct:instanceLink	file:
pid	sentinel.c	/^    pid_t pid;              \/* Script execution pid. *\/$/;"	m	struct:sentinelScriptJob	file:
port	sentinel.c	/^    int port;$/;"	m	struct:sentinelAddr	file:
previous_time	sentinel.c	/^    mstime_t previous_time;         \/* Last time we ran the time handler. *\/$/;"	m	struct:sentinelState	file:
promoted_slave	sentinel.c	/^    struct sentinelRedisInstance *promoted_slave; \/* Promoted slave instance. *\/$/;"	m	struct:sentinelRedisInstance	typeref:struct:sentinelRedisInstance::sentinelRedisInstance	file:
quorum	sentinel.c	/^    unsigned int quorum;\/* Number of sentinels that need to agree on failure. *\/$/;"	m	struct:sentinelRedisInstance	file:
reading	sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:
redisAeAddRead	sentinel.c	/^static void redisAeAddRead(void *privdata) {$/;"	f	file:
redisAeAddWrite	sentinel.c	/^static void redisAeAddWrite(void *privdata) {$/;"	f	file:
redisAeAttach	sentinel.c	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f	file:
redisAeCleanup	sentinel.c	/^static void redisAeCleanup(void *privdata) {$/;"	f	file:
redisAeDelRead	sentinel.c	/^static void redisAeDelRead(void *privdata) {$/;"	f	file:
redisAeDelWrite	sentinel.c	/^static void redisAeDelWrite(void *privdata) {$/;"	f	file:
redisAeEvents	sentinel.c	/^typedef struct redisAeEvents {$/;"	s	file:
redisAeEvents	sentinel.c	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents	file:
redisAeReadEvent	sentinel.c	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
redisAeWriteEvent	sentinel.c	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f	file:
refcount	sentinel.c	/^    int refcount;          \/* Number of sentinelRedisInstance owners. *\/$/;"	m	struct:instanceLink	file:
releaseInstanceLink	sentinel.c	/^instanceLink *releaseInstanceLink(instanceLink *link, sentinelRedisInstance *ri)$/;"	f
releaseSentinelAddr	sentinel.c	/^void releaseSentinelAddr(sentinelAddr *sa) {$/;"	f
releaseSentinelRedisInstance	sentinel.c	/^void releaseSentinelRedisInstance(sentinelRedisInstance *ri) {$/;"	f
removeMatchingSentinelFromMaster	sentinel.c	/^int removeMatchingSentinelFromMaster(sentinelRedisInstance *master, char *runid) {$/;"	f
retry_num	sentinel.c	/^    int retry_num;          \/* Number of times we tried to execute it. *\/$/;"	m	struct:sentinelScriptJob	file:
rewriteConfigSentinelOption	sentinel.c	/^void rewriteConfigSentinelOption(struct rewriteConfigState *state) {$/;"	f
role_reported	sentinel.c	/^    int role_reported;$/;"	m	struct:sentinelRedisInstance	file:
role_reported_time	sentinel.c	/^    mstime_t role_reported_time;$/;"	m	struct:sentinelRedisInstance	file:
runid	sentinel.c	/^    char *runid;    \/* Run ID of this instance, or unique ID if is a Sentinel.*\/$/;"	m	struct:sentinelRedisInstance	file:
runid	sentinel.c	/^    char *runid;$/;"	m	struct:sentinelLeader	file:
running_scripts	sentinel.c	/^    int running_scripts;    \/* Number of scripts in execution right now. *\/$/;"	m	struct:sentinelState	file:
s_down_since_time	sentinel.c	/^    mstime_t s_down_since_time; \/* Subjectively down since time. *\/$/;"	m	struct:sentinelRedisInstance	file:
scripts_queue	sentinel.c	/^    list *scripts_queue;            \/* Queue of user scripts to execute. *\/$/;"	m	struct:sentinelState	file:
sentinel	sentinel.c	/^} sentinel;$/;"	v	typeref:struct:sentinelState
sentinelAbortFailover	sentinel.c	/^void sentinelAbortFailover(sentinelRedisInstance *ri) {$/;"	f
sentinelAddFlagsToDictOfRedisInstances	sentinel.c	/^void sentinelAddFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f
sentinelAddr	sentinel.c	/^typedef struct sentinelAddr {$/;"	s	file:
sentinelAddr	sentinel.c	/^} sentinelAddr;$/;"	t	typeref:struct:sentinelAddr	file:
sentinelAddrIsEqual	sentinel.c	/^int sentinelAddrIsEqual(sentinelAddr *a, sentinelAddr *b) {$/;"	f
sentinelAskMasterStateToOtherSentinels	sentinel.c	/^void sentinelAskMasterStateToOtherSentinels(sentinelRedisInstance *master, int flags) {$/;"	f
sentinelCallClientReconfScript	sentinel.c	/^void sentinelCallClientReconfScript(sentinelRedisInstance *master, int role, char *state, sentinelAddr *from, sentinelAddr *to) {$/;"	f
sentinelCheckObjectivelyDown	sentinel.c	/^void sentinelCheckObjectivelyDown(sentinelRedisInstance *master) {$/;"	f
sentinelCheckSubjectivelyDown	sentinel.c	/^void sentinelCheckSubjectivelyDown(sentinelRedisInstance *ri) {$/;"	f
sentinelCheckTiltCondition	sentinel.c	/^void sentinelCheckTiltCondition(void) {$/;"	f
sentinelCollectTerminatedScripts	sentinel.c	/^void sentinelCollectTerminatedScripts(void) {$/;"	f
sentinelCommand	sentinel.c	/^void sentinelCommand(client *c) {$/;"	f
sentinelDelFlagsToDictOfRedisInstances	sentinel.c	/^void sentinelDelFlagsToDictOfRedisInstances(dict *instances, int flags) {$/;"	f
sentinelDiscardReplyCallback	sentinel.c	/^void sentinelDiscardReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelDisconnectCallback	sentinel.c	/^void sentinelDisconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
sentinelEvent	sentinel.c	/^void sentinelEvent(int level, char *type, sentinelRedisInstance *ri,$/;"	f
sentinelFailoverDetectEnd	sentinel.c	/^void sentinelFailoverDetectEnd(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverReconfNextSlave	sentinel.c	/^void sentinelFailoverReconfNextSlave(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverSelectSlave	sentinel.c	/^void sentinelFailoverSelectSlave(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverSendSlaveOfNoOne	sentinel.c	/^void sentinelFailoverSendSlaveOfNoOne(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverStateMachine	sentinel.c	/^void sentinelFailoverStateMachine(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverStateStr	sentinel.c	/^const char *sentinelFailoverStateStr(int state) {$/;"	f
sentinelFailoverSwitchToPromotedSlave	sentinel.c	/^void sentinelFailoverSwitchToPromotedSlave(sentinelRedisInstance *master) {$/;"	f
sentinelFailoverWaitPromotion	sentinel.c	/^void sentinelFailoverWaitPromotion(sentinelRedisInstance *ri) {$/;"	f
sentinelFailoverWaitStart	sentinel.c	/^void sentinelFailoverWaitStart(sentinelRedisInstance *ri) {$/;"	f
sentinelFlushConfig	sentinel.c	/^void sentinelFlushConfig(void) {$/;"	f
sentinelForceHelloUpdateDictOfRedisInstances	sentinel.c	/^void sentinelForceHelloUpdateDictOfRedisInstances(dict *instances) {$/;"	f
sentinelForceHelloUpdateForMaster	sentinel.c	/^int sentinelForceHelloUpdateForMaster(sentinelRedisInstance *master) {$/;"	f
sentinelGenerateInitialMonitorEvents	sentinel.c	/^void sentinelGenerateInitialMonitorEvents(void) {$/;"	f
sentinelGetCurrentMasterAddress	sentinel.c	/^sentinelAddr *sentinelGetCurrentMasterAddress(sentinelRedisInstance *master) {$/;"	f
sentinelGetInstanceTypeString	sentinel.c	/^char *sentinelGetInstanceTypeString(sentinelRedisInstance *ri) {$/;"	f
sentinelGetLeader	sentinel.c	/^char *sentinelGetLeader(sentinelRedisInstance *master, uint64_t epoch) {$/;"	f
sentinelGetMasterByName	sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByName(char *name) {$/;"	f
sentinelGetMasterByNameOrReplyError	sentinel.c	/^sentinelRedisInstance *sentinelGetMasterByNameOrReplyError(client *c,$/;"	f
sentinelGetScriptListNodeByPid	sentinel.c	/^listNode *sentinelGetScriptListNodeByPid(pid_t pid) {$/;"	f
sentinelHandleConfiguration	sentinel.c	/^char *sentinelHandleConfiguration(char **argv, int argc) {$/;"	f
sentinelHandleDictOfRedisInstances	sentinel.c	/^void sentinelHandleDictOfRedisInstances(dict *instances) {$/;"	f
sentinelHandleRedisInstance	sentinel.c	/^void sentinelHandleRedisInstance(sentinelRedisInstance *ri) {$/;"	f
sentinelInfoCommand	sentinel.c	/^void sentinelInfoCommand(client *c) {$/;"	f
sentinelInfoReplyCallback	sentinel.c	/^void sentinelInfoReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelIsQuorumReachable	sentinel.c	/^int sentinelIsQuorumReachable(sentinelRedisInstance *master, int *usableptr) {$/;"	f
sentinelIsRunning	sentinel.c	/^void sentinelIsRunning(void) {$/;"	f
sentinelKillTimedoutScripts	sentinel.c	/^void sentinelKillTimedoutScripts(void) {$/;"	f
sentinelLeader	sentinel.c	/^struct sentinelLeader {$/;"	s	file:
sentinelLeaderIncr	sentinel.c	/^int sentinelLeaderIncr(dict *counters, char *runid) {$/;"	f
sentinelLinkEstablishedCallback	sentinel.c	/^void sentinelLinkEstablishedCallback(const redisAsyncContext *c, int status) {$/;"	f
sentinelMasterLooksSane	sentinel.c	/^int sentinelMasterLooksSane(sentinelRedisInstance *master) {$/;"	f
sentinelPendingScriptsCommand	sentinel.c	/^void sentinelPendingScriptsCommand(client *c) {$/;"	f
sentinelPingReplyCallback	sentinel.c	/^void sentinelPingReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelProcessHelloMessage	sentinel.c	/^void sentinelProcessHelloMessage(char *hello, int hello_len) {$/;"	f
sentinelPropagateDownAfterPeriod	sentinel.c	/^void sentinelPropagateDownAfterPeriod(sentinelRedisInstance *master) {$/;"	f
sentinelPublishCommand	sentinel.c	/^void sentinelPublishCommand(client *c) {$/;"	f
sentinelPublishReplyCallback	sentinel.c	/^void sentinelPublishReplyCallback(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReceiveHelloMessages	sentinel.c	/^void sentinelReceiveHelloMessages(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReceiveIsMasterDownReply	sentinel.c	/^void sentinelReceiveIsMasterDownReply(redisAsyncContext *c, void *reply, void *privdata) {$/;"	f
sentinelReconnectInstance	sentinel.c	/^void sentinelReconnectInstance(sentinelRedisInstance *ri) {$/;"	f
sentinelRedisInstance	sentinel.c	/^typedef struct sentinelRedisInstance {$/;"	s	file:
sentinelRedisInstance	sentinel.c	/^} sentinelRedisInstance;$/;"	t	typeref:struct:sentinelRedisInstance	file:
sentinelRedisInstanceLookupSlave	sentinel.c	/^sentinelRedisInstance *sentinelRedisInstanceLookupSlave($/;"	f
sentinelRedisInstanceNoDownFor	sentinel.c	/^int sentinelRedisInstanceNoDownFor(sentinelRedisInstance *ri, mstime_t ms) {$/;"	f
sentinelRedisInstanceTypeStr	sentinel.c	/^const char *sentinelRedisInstanceTypeStr(sentinelRedisInstance *ri) {$/;"	f
sentinelRefreshInstanceInfo	sentinel.c	/^void sentinelRefreshInstanceInfo(sentinelRedisInstance *ri, const char *info) {$/;"	f
sentinelReleaseScriptJob	sentinel.c	/^void sentinelReleaseScriptJob(sentinelScriptJob *sj) {$/;"	f
sentinelResetMaster	sentinel.c	/^void sentinelResetMaster(sentinelRedisInstance *ri, int flags) {$/;"	f
sentinelResetMasterAndChangeAddress	sentinel.c	/^int sentinelResetMasterAndChangeAddress(sentinelRedisInstance *master, char *ip, int port) {$/;"	f
sentinelResetMastersByPattern	sentinel.c	/^int sentinelResetMastersByPattern(char *pattern, int flags) {$/;"	f
sentinelRoleCommand	sentinel.c	/^void sentinelRoleCommand(client *c) {$/;"	f
sentinelRunPendingScripts	sentinel.c	/^void sentinelRunPendingScripts(void) {$/;"	f
sentinelScheduleScriptExecution	sentinel.c	/^void sentinelScheduleScriptExecution(char *path, ...) {$/;"	f
sentinelScriptJob	sentinel.c	/^typedef struct sentinelScriptJob {$/;"	s	file:
sentinelScriptJob	sentinel.c	/^} sentinelScriptJob;$/;"	t	typeref:struct:sentinelScriptJob	file:
sentinelScriptRetryDelay	sentinel.c	/^mstime_t sentinelScriptRetryDelay(int retry_num) {$/;"	f
sentinelSelectSlave	sentinel.c	/^sentinelRedisInstance *sentinelSelectSlave(sentinelRedisInstance *master) {$/;"	f
sentinelSendAuthIfNeeded	sentinel.c	/^void sentinelSendAuthIfNeeded(sentinelRedisInstance *ri, redisAsyncContext *c) {$/;"	f
sentinelSendHello	sentinel.c	/^int sentinelSendHello(sentinelRedisInstance *ri) {$/;"	f
sentinelSendPeriodicCommands	sentinel.c	/^void sentinelSendPeriodicCommands(sentinelRedisInstance *ri) {$/;"	f
sentinelSendPing	sentinel.c	/^int sentinelSendPing(sentinelRedisInstance *ri) {$/;"	f
sentinelSendSlaveOf	sentinel.c	/^int sentinelSendSlaveOf(sentinelRedisInstance *ri, char *host, int port) {$/;"	f
sentinelSetClientName	sentinel.c	/^void sentinelSetClientName(sentinelRedisInstance *ri, redisAsyncContext *c, char *type) {$/;"	f
sentinelSetCommand	sentinel.c	/^void sentinelSetCommand(client *c) {$/;"	f
sentinelSimFailureCrash	sentinel.c	/^void sentinelSimFailureCrash(void) {$/;"	f
sentinelStartFailover	sentinel.c	/^void sentinelStartFailover(sentinelRedisInstance *master) {$/;"	f
sentinelStartFailoverIfNeeded	sentinel.c	/^int sentinelStartFailoverIfNeeded(sentinelRedisInstance *master) {$/;"	f
sentinelState	sentinel.c	/^struct sentinelState {$/;"	s	file:
sentinelTimer	sentinel.c	/^void sentinelTimer(void) {$/;"	f
sentinelTryConnectionSharing	sentinel.c	/^int sentinelTryConnectionSharing(sentinelRedisInstance *ri) {$/;"	f
sentinelUpdateSentinelAddressInAllMasters	sentinel.c	/^int sentinelUpdateSentinelAddressInAllMasters(sentinelRedisInstance *ri) {$/;"	f
sentinelVoteLeader	sentinel.c	/^char *sentinelVoteLeader(sentinelRedisInstance *master, uint64_t req_epoch, char *req_runid, uint64_t *leader_epoch) {$/;"	f
sentinelcmds	sentinel.c	/^struct redisCommand sentinelcmds[] = {$/;"	v	typeref:struct:redisCommand
sentinels	sentinel.c	/^    dict *sentinels;    \/* Other sentinels monitoring the same master. *\/$/;"	m	struct:sentinelRedisInstance	file:
simfailure_flags	sentinel.c	/^    unsigned long simfailure_flags; \/* Failures simulation. *\/$/;"	m	struct:sentinelState	file:
slave_conf_change_time	sentinel.c	/^    mstime_t slave_conf_change_time; \/* Last time slave master addr changed. *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_master_host	sentinel.c	/^    char *slave_master_host;    \/* Master host as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_master_link_status	sentinel.c	/^    int slave_master_link_status; \/* Master link status as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_master_port	sentinel.c	/^    int slave_master_port;      \/* Master port as reported by INFO *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_priority	sentinel.c	/^    int slave_priority; \/* Slave priority according to its INFO output. *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_reconf_sent_time	sentinel.c	/^    mstime_t slave_reconf_sent_time; \/* Time at which we sent SLAVE OF <new> *\/$/;"	m	struct:sentinelRedisInstance	file:
slave_repl_offset	sentinel.c	/^    unsigned long long slave_repl_offset; \/* Slave replication offset. *\/$/;"	m	struct:sentinelRedisInstance	file:
slaves	sentinel.c	/^    dict *slaves;       \/* Slaves for this master instance. *\/$/;"	m	struct:sentinelRedisInstance	file:
start_time	sentinel.c	/^    mstime_t start_time;    \/* Script execution time if the script is running,$/;"	m	struct:sentinelScriptJob	file:
tilt	sentinel.c	/^    int tilt;           \/* Are we in TILT mode? *\/$/;"	m	struct:sentinelState	file:
tilt_start_time	sentinel.c	/^    mstime_t tilt_start_time;       \/* When TITL started. *\/$/;"	m	struct:sentinelState	file:
votes	sentinel.c	/^    unsigned long votes;$/;"	m	struct:sentinelLeader	file:
writing	sentinel.c	/^    int reading, writing;$/;"	m	struct:redisAeEvents	file:
CLIENTS_CRON_MIN_ITERATIONS	server.c	984;"	d	file:
EVICTION_SAMPLES_ARRAY_SIZE	server.c	3393;"	d	file:
R_Nan	server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_NegInf	server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_PosInf	server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
R_Zero	server.c	/^double R_Zero, R_PosInf, R_NegInf, R_Nan;$/;"	v
activeExpireCycle	server.c	/^void activeExpireCycle(int type) {$/;"	f
activeExpireCycleTryExpire	server.c	/^int activeExpireCycleTryExpire(redisDb *db, dictEntry *de, long long now) {$/;"	f
addReplyCommand	server.c	/^void addReplyCommand(client *c, struct redisCommand *cmd) {$/;"	f
addReplyCommandFlag	server.c	/^int addReplyCommandFlag(client *c, struct redisCommand *cmd, int f, char *reply) {$/;"	f
adjustOpenFilesLimit	server.c	/^void adjustOpenFilesLimit(void) {$/;"	f
alsoPropagate	server.c	/^void alsoPropagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
authCommand	server.c	/^void authCommand(client *c) {$/;"	f
beforeSleep	server.c	/^void beforeSleep(struct aeEventLoop *eventLoop) {$/;"	f
bytesToHuman	server.c	/^void bytesToHuman(char *s, unsigned long long n) {$/;"	f
call	server.c	/^void call(client *c, int flags) {$/;"	f
checkForSentinelMode	server.c	/^int checkForSentinelMode(int argc, char **argv) {$/;"	f
checkTcpBacklogSettings	server.c	/^void checkTcpBacklogSettings(void) {$/;"	f
clientsCron	server.c	/^void clientsCron(void) {$/;"	f
clientsCronHandleTimeout	server.c	/^int clientsCronHandleTimeout(client *c, mstime_t now_ms) {$/;"	f
clientsCronResizeQueryBuffer	server.c	/^int clientsCronResizeQueryBuffer(client *c) {$/;"	f
closeListeningSockets	server.c	/^void closeListeningSockets(int unlink_unix_socket) {$/;"	f
clusterNodesBlackListDictType	server.c	/^dictType clusterNodesBlackListDictType = {$/;"	v
clusterNodesDictType	server.c	/^dictType clusterNodesDictType = {$/;"	v
commandCommand	server.c	/^void commandCommand(client *c) {$/;"	f
commandTableDictType	server.c	/^dictType commandTableDictType = {$/;"	v
createPidFile	server.c	/^void createPidFile(void) {$/;"	f
createSharedObjects	server.c	/^void createSharedObjects(void) {$/;"	f
daemonize	server.c	/^void daemonize(void) {$/;"	f
databasesCron	server.c	/^void databasesCron(void) {$/;"	f
dbDictType	server.c	/^dictType dbDictType = {$/;"	v
dictEncObjHash	server.c	/^unsigned int dictEncObjHash(const void *key) {$/;"	f
dictEncObjKeyCompare	server.c	/^int dictEncObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictListDestructor	server.c	/^void dictListDestructor(void *privdata, void *val)$/;"	f
dictObjHash	server.c	/^unsigned int dictObjHash(const void *key) {$/;"	f
dictObjKeyCompare	server.c	/^int dictObjKeyCompare(void *privdata, const void *key1,$/;"	f
dictObjectDestructor	server.c	/^void dictObjectDestructor(void *privdata, void *val)$/;"	f
dictSdsCaseHash	server.c	/^unsigned int dictSdsCaseHash(const void *key) {$/;"	f
dictSdsDestructor	server.c	/^void dictSdsDestructor(void *privdata, void *val)$/;"	f
dictSdsHash	server.c	/^unsigned int dictSdsHash(const void *key) {$/;"	f
dictSdsKeyCaseCompare	server.c	/^int dictSdsKeyCaseCompare(void *privdata, const void *key1,$/;"	f
dictSdsKeyCompare	server.c	/^int dictSdsKeyCompare(void *privdata, const void *key1,$/;"	f
dictVanillaFree	server.c	/^void dictVanillaFree(void *privdata, void *val)$/;"	f
echoCommand	server.c	/^void echoCommand(client *c) {$/;"	f
evictionPoolAlloc	server.c	/^struct evictionPoolEntry *evictionPoolAlloc(void) {$/;"	f
evictionPoolPopulate	server.c	/^void evictionPoolPopulate(dict *sampledict, dict *keydict, struct evictionPoolEntry *pool) {$/;"	f
exitFromChild	server.c	/^void exitFromChild(int retcode) {$/;"	f
forceCommandPropagation	server.c	/^void forceCommandPropagation(client *c, int flags) {$/;"	f
freeMemoryIfNeeded	server.c	/^int freeMemoryIfNeeded(void) {$/;"	f
genRedisInfoString	server.c	/^sds genRedisInfoString(char *section) {$/;"	f
getInstantaneousMetric	server.c	/^long long getInstantaneousMetric(int metric) {$/;"	f
getLRUClock	server.c	/^unsigned int getLRUClock(void) {$/;"	f
hashDictType	server.c	/^dictType hashDictType = {$/;"	v
htNeedsResize	server.c	/^int htNeedsResize(dict *dict) {$/;"	f
incrementallyRehash	server.c	/^int incrementallyRehash(int dbid) {$/;"	f
infoCommand	server.c	/^void infoCommand(client *c) {$/;"	f
initServer	server.c	/^void initServer(void) {$/;"	f
initServerConfig	server.c	/^void initServerConfig(void) {$/;"	f
keylistDictType	server.c	/^dictType keylistDictType = {$/;"	v
keyptrDictType	server.c	/^dictType keyptrDictType = {$/;"	v
linuxMemoryWarnings	server.c	/^void linuxMemoryWarnings(void) {$/;"	f
linuxOvercommitMemoryValue	server.c	/^int linuxOvercommitMemoryValue(void) {$/;"	f
listenToPort	server.c	/^int listenToPort(int port, int *fds, int *count) {$/;"	f
loadDataFromDisk	server.c	/^void loadDataFromDisk(void) {$/;"	f
lookupCommand	server.c	/^struct redisCommand *lookupCommand(sds name) {$/;"	f
lookupCommandByCString	server.c	/^struct redisCommand *lookupCommandByCString(char *s) {$/;"	f
lookupCommandOrOriginal	server.c	/^struct redisCommand *lookupCommandOrOriginal(sds name) {$/;"	f
main	server.c	/^int main(int argc, char **argv) {$/;"	f
migrateCacheDictType	server.c	/^dictType migrateCacheDictType = {$/;"	v
monitorCommand	server.c	/^void monitorCommand(client *c) {$/;"	f
mstime	server.c	/^mstime_t mstime(void) {$/;"	f
pingCommand	server.c	/^void pingCommand(client *c) {$/;"	f
populateCommandTable	server.c	/^void populateCommandTable(void) {$/;"	f
prepareForShutdown	server.c	/^int prepareForShutdown(int flags) {$/;"	f
preventCommandAOF	server.c	/^void preventCommandAOF(client *c) {$/;"	f
preventCommandPropagation	server.c	/^void preventCommandPropagation(client *c) {$/;"	f
preventCommandReplication	server.c	/^void preventCommandReplication(client *c) {$/;"	f
processCommand	server.c	/^int processCommand(client *c) {$/;"	f
propagate	server.c	/^void propagate(struct redisCommand *cmd, int dbid, robj **argv, int argc,$/;"	f
redisAsciiArt	server.c	/^void redisAsciiArt(void) {$/;"	f
redisCommandTable	server.c	/^struct redisCommand redisCommandTable[] = {$/;"	v	typeref:struct:redisCommand
redisIsSupervised	server.c	/^int redisIsSupervised(int mode) {$/;"	f
redisOpArrayAppend	server.c	/^int redisOpArrayAppend(redisOpArray *oa, struct redisCommand *cmd, int dbid,$/;"	f
redisOpArrayFree	server.c	/^void redisOpArrayFree(redisOpArray *oa) {$/;"	f
redisOpArrayInit	server.c	/^void redisOpArrayInit(redisOpArray *oa) {$/;"	f
redisOutOfMemoryHandler	server.c	/^void redisOutOfMemoryHandler(size_t allocation_size) {$/;"	f
redisSetProcTitle	server.c	/^void redisSetProcTitle(char *title) {$/;"	f
redisSupervisedSystemd	server.c	/^int redisSupervisedSystemd(void) {$/;"	f
redisSupervisedUpstart	server.c	/^int redisSupervisedUpstart(void) {$/;"	f
replScriptCacheDictType	server.c	/^dictType replScriptCacheDictType = {$/;"	v
resetCommandTableStats	server.c	/^void resetCommandTableStats(void) {$/;"	f
resetServerStats	server.c	/^void resetServerStats(void) {$/;"	f
restartServer	server.c	/^int restartServer(int flags, mstime_t delay) {$/;"	f
server	server.c	/^struct redisServer server; \/* server global state *\/$/;"	v	typeref:struct:redisServer
serverCron	server.c	/^int serverCron(struct aeEventLoop *eventLoop, long long id, void *clientData) {$/;"	f
serverLog	server.c	/^void serverLog(int level, const char *fmt, ...) {$/;"	f
serverLogFromHandler	server.c	/^void serverLogFromHandler(int level, const char *msg) {$/;"	f
serverLogRaw	server.c	/^void serverLogRaw(int level, const char *msg) {$/;"	f
setDictType	server.c	/^dictType setDictType = {$/;"	v
setupSignalHandlers	server.c	/^void setupSignalHandlers(void) {$/;"	f
shaScriptObjectDictType	server.c	/^dictType shaScriptObjectDictType = {$/;"	v
shared	server.c	/^struct sharedObjectsStruct shared;$/;"	v	typeref:struct:sharedObjectsStruct
sigShutdownHandler	server.c	/^static void sigShutdownHandler(int sig) {$/;"	f	file:
timeCommand	server.c	/^void timeCommand(client *c) {$/;"	f
time_independent_strcmp	server.c	/^int time_independent_strcmp(char *a, char *b) {$/;"	f
trackInstantaneousMetric	server.c	/^void trackInstantaneousMetric(int metric, long long current_reading) {$/;"	f
tryResizeHashTables	server.c	/^void tryResizeHashTables(int dbid) {$/;"	f
updateCachedTime	server.c	/^void updateCachedTime(void) {$/;"	f
updateDictResizePolicy	server.c	/^void updateDictResizePolicy(void) {$/;"	f
usage	server.c	/^void usage(void) {$/;"	f
ustime	server.c	/^long long ustime(void) {$/;"	f
version	server.c	/^void version(void) {$/;"	f
zsetDictType	server.c	/^dictType zsetDictType = {$/;"	v
ACTIVE_EXPIRE_CYCLE_FAST	server.h	147;"	d
ACTIVE_EXPIRE_CYCLE_FAST_DURATION	server.h	144;"	d
ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP	server.h	143;"	d
ACTIVE_EXPIRE_CYCLE_SLOW	server.h	146;"	d
ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC	server.h	145;"	d
AOF_AUTOSYNC_BYTES	server.h	163;"	d
AOF_FSYNC_ALWAYS	server.h	362;"	d
AOF_FSYNC_EVERYSEC	server.h	363;"	d
AOF_FSYNC_NO	server.h	361;"	d
AOF_OFF	server.h	240;"	d
AOF_ON	server.h	241;"	d
AOF_REWRITE_ITEMS_PER_CMD	server.h	94;"	d
AOF_REWRITE_MIN_SIZE	server.h	93;"	d
AOF_REWRITE_PERC	server.h	92;"	d
AOF_WAIT_REWRITE	server.h	242;"	d
BLOCKED_LIST	server.h	279;"	d
BLOCKED_NONE	server.h	278;"	d
BLOCKED_WAIT	server.h	280;"	d
CLIENT_ASKING	server.h	255;"	d
CLIENT_BLOCKED	server.h	249;"	d
CLIENT_CLOSE_AFTER_REPLY	server.h	251;"	d
CLIENT_CLOSE_ASAP	server.h	256;"	d
CLIENT_DIRTY_CAS	server.h	250;"	d
CLIENT_DIRTY_EXEC	server.h	258;"	d
CLIENT_FORCE_AOF	server.h	260;"	d
CLIENT_FORCE_REPL	server.h	261;"	d
CLIENT_LUA	server.h	254;"	d
CLIENT_LUA_DEBUG	server.h	273;"	d
CLIENT_LUA_DEBUG_SYNC	server.h	274;"	d
CLIENT_MASTER	server.h	246;"	d
CLIENT_MASTER_FORCE_REPLY	server.h	259;"	d
CLIENT_MONITOR	server.h	247;"	d
CLIENT_MULTI	server.h	248;"	d
CLIENT_PENDING_WRITE	server.h	268;"	d
CLIENT_PREVENT_AOF_PROP	server.h	265;"	d
CLIENT_PREVENT_PROP	server.h	267;"	d
CLIENT_PREVENT_REPL_PROP	server.h	266;"	d
CLIENT_PRE_PSYNC	server.h	262;"	d
CLIENT_PUBSUB	server.h	264;"	d
CLIENT_READONLY	server.h	263;"	d
CLIENT_REPLY_OFF	server.h	270;"	d
CLIENT_REPLY_SKIP	server.h	272;"	d
CLIENT_REPLY_SKIP_NEXT	server.h	271;"	d
CLIENT_SLAVE	server.h	245;"	d
CLIENT_TYPE_MASTER	server.h	291;"	d
CLIENT_TYPE_NORMAL	server.h	288;"	d
CLIENT_TYPE_OBUF_COUNT	server.h	292;"	d
CLIENT_TYPE_PUBSUB	server.h	290;"	d
CLIENT_TYPE_SLAVE	server.h	289;"	d
CLIENT_UNBLOCKED	server.h	252;"	d
CLIENT_UNIX_SOCKET	server.h	257;"	d
CMD_ADMIN	server.h	180;"	d
CMD_ASKING	server.h	188;"	d
CMD_CALL_FULL	server.h	414;"	d
CMD_CALL_NONE	server.h	408;"	d
CMD_CALL_PROPAGATE	server.h	413;"	d
CMD_CALL_PROPAGATE_AOF	server.h	411;"	d
CMD_CALL_PROPAGATE_REPL	server.h	412;"	d
CMD_CALL_SLOWLOG	server.h	409;"	d
CMD_CALL_STATS	server.h	410;"	d
CMD_DENYOOM	server.h	178;"	d
CMD_FAST	server.h	189;"	d
CMD_LOADING	server.h	185;"	d
CMD_NOSCRIPT	server.h	182;"	d
CMD_NOT_USED_1	server.h	179;"	d
CMD_PUBSUB	server.h	181;"	d
CMD_RANDOM	server.h	183;"	d
CMD_READONLY	server.h	177;"	d
CMD_SKIP_MONITOR	server.h	187;"	d
CMD_SORT_FOR_SCRIPT	server.h	184;"	d
CMD_STALE	server.h	186;"	d
CMD_WRITE	server.h	176;"	d
CONFIG_AUTHPASS_MAX_LEN	server.h	98;"	d
CONFIG_BGSAVE_RETRY_DELAY	server.h	107;"	d
CONFIG_BINDADDR_MAX	server.h	139;"	d
CONFIG_DEFAULT_ACTIVE_REHASHING	server.h	133;"	d
CONFIG_DEFAULT_AOF_FILENAME	server.h	130;"	d
CONFIG_DEFAULT_AOF_FSYNC	server.h	364;"	d
CONFIG_DEFAULT_AOF_LOAD_TRUNCATED	server.h	132;"	d
CONFIG_DEFAULT_AOF_NO_FSYNC_ON_REWRITE	server.h	131;"	d
CONFIG_DEFAULT_AOF_REWRITE_INCREMENTAL_FSYNC	server.h	134;"	d
CONFIG_DEFAULT_CLIENT_TIMEOUT	server.h	83;"	d
CONFIG_DEFAULT_CLUSTER_CONFIG_FILE	server.h	110;"	d
CONFIG_DEFAULT_DAEMONIZE	server.h	111;"	d
CONFIG_DEFAULT_DBNUM	server.h	84;"	d
CONFIG_DEFAULT_HLL_SPARSE_MAX_BYTES	server.h	378;"	d
CONFIG_DEFAULT_HZ	server.h	78;"	d
CONFIG_DEFAULT_LATENCY_MONITOR_THRESHOLD	server.h	141;"	d
CONFIG_DEFAULT_LOGFILE	server.h	115;"	d
CONFIG_DEFAULT_MAXMEMORY	server.h	128;"	d
CONFIG_DEFAULT_MAXMEMORY_POLICY	server.h	392;"	d
CONFIG_DEFAULT_MAXMEMORY_SAMPLES	server.h	129;"	d
CONFIG_DEFAULT_MAX_CLIENTS	server.h	97;"	d
CONFIG_DEFAULT_MIN_SLAVES_MAX_LAG	server.h	136;"	d
CONFIG_DEFAULT_MIN_SLAVES_TO_WRITE	server.h	135;"	d
CONFIG_DEFAULT_PID_FILE	server.h	108;"	d
CONFIG_DEFAULT_PROTECTED_MODE	server.h	114;"	d
CONFIG_DEFAULT_RDB_CHECKSUM	server.h	119;"	d
CONFIG_DEFAULT_RDB_COMPRESSION	server.h	118;"	d
CONFIG_DEFAULT_RDB_FILENAME	server.h	120;"	d
CONFIG_DEFAULT_REPL_BACKLOG_SIZE	server.h	104;"	d
CONFIG_DEFAULT_REPL_BACKLOG_TIME_LIMIT	server.h	105;"	d
CONFIG_DEFAULT_REPL_DISABLE_TCP_NODELAY	server.h	127;"	d
CONFIG_DEFAULT_REPL_DISKLESS_SYNC	server.h	121;"	d
CONFIG_DEFAULT_REPL_DISKLESS_SYNC_DELAY	server.h	122;"	d
CONFIG_DEFAULT_REPL_PING_SLAVE_PERIOD	server.h	101;"	d
CONFIG_DEFAULT_REPL_TIMEOUT	server.h	100;"	d
CONFIG_DEFAULT_SERVER_PORT	server.h	81;"	d
CONFIG_DEFAULT_SLAVE_ANNOUNCE_IP	server.h	125;"	d
CONFIG_DEFAULT_SLAVE_ANNOUNCE_PORT	server.h	126;"	d
CONFIG_DEFAULT_SLAVE_PRIORITY	server.h	99;"	d
CONFIG_DEFAULT_SLAVE_READ_ONLY	server.h	124;"	d
CONFIG_DEFAULT_SLAVE_SERVE_STALE_DATA	server.h	123;"	d
CONFIG_DEFAULT_SLOWLOG_LOG_SLOWER_THAN	server.h	95;"	d
CONFIG_DEFAULT_SLOWLOG_MAX_LEN	server.h	96;"	d
CONFIG_DEFAULT_STOP_WRITES_ON_BGSAVE_ERROR	server.h	117;"	d
CONFIG_DEFAULT_SYSLOG_ENABLED	server.h	116;"	d
CONFIG_DEFAULT_SYSLOG_IDENT	server.h	109;"	d
CONFIG_DEFAULT_TCP_BACKLOG	server.h	82;"	d
CONFIG_DEFAULT_TCP_KEEPALIVE	server.h	113;"	d
CONFIG_DEFAULT_UNIX_SOCKET_PERM	server.h	112;"	d
CONFIG_DEFAULT_VERBOSITY	server.h	346;"	d
CONFIG_FDSET_INCR	server.h	169;"	d
CONFIG_MAX_HZ	server.h	80;"	d
CONFIG_MAX_LINE	server.h	85;"	d
CONFIG_MIN_HZ	server.h	79;"	d
CONFIG_MIN_RESERVED_FDS	server.h	140;"	d
CONFIG_REPL_BACKLOG_MIN_SIZE	server.h	106;"	d
CONFIG_REPL_SYNCIO_TIMEOUT	server.h	331;"	d
CONFIG_RUN_ID_SIZE	server.h	102;"	d
CRON_DBS_PER_CALL	server.h	86;"	d
C_ERR	server.h	75;"	d
C_OK	server.h	74;"	d
HASHTABLE_MIN_FILL	server.h	172;"	d
LIST_HEAD	server.h	334;"	d
LIST_TAIL	server.h	335;"	d
LL_DEBUG	server.h	341;"	d
LL_NOTICE	server.h	343;"	d
LL_RAW	server.h	345;"	d
LL_VERBOSE	server.h	342;"	d
LL_WARNING	server.h	344;"	d
LOG_MAX_LEN	server.h	91;"	d
LONG_STR_SIZE	server.h	162;"	d
LOOKUP_NONE	server.h	1411;"	d
LOOKUP_NOTOUCH	server.h	1412;"	d
LRU_BITS	server.h	460;"	d
LRU_CLOCK	server.h	475;"	d
LRU_CLOCK_MAX	server.h	461;"	d
LRU_CLOCK_RESOLUTION	server.h	462;"	d
LUA_SCRIPT_TIME_LIMIT	server.h	395;"	d
MAXMEMORY_ALLKEYS_LRU	server.h	389;"	d
MAXMEMORY_ALLKEYS_RANDOM	server.h	390;"	d
MAXMEMORY_EVICTION_POOL_SIZE	server.h	495;"	d
MAXMEMORY_NO_EVICTION	server.h	391;"	d
MAXMEMORY_VOLATILE_LRU	server.h	386;"	d
MAXMEMORY_VOLATILE_RANDOM	server.h	388;"	d
MAXMEMORY_VOLATILE_TTL	server.h	387;"	d
NET_FIRST_BIND_ADDR	server.h	441;"	d
NET_IP_STR_LEN	server.h	137;"	d
NET_MAX_WRITES_PER_EVENT	server.h	87;"	d
NET_PEER_ID_LEN	server.h	138;"	d
NOTIFY_ALL	server.h	438;"	d
NOTIFY_EVICTED	server.h	437;"	d
NOTIFY_EXPIRED	server.h	436;"	d
NOTIFY_GENERIC	server.h	430;"	d
NOTIFY_HASH	server.h	434;"	d
NOTIFY_KEYEVENT	server.h	429;"	d
NOTIFY_KEYSPACE	server.h	428;"	d
NOTIFY_LIST	server.h	432;"	d
NOTIFY_SET	server.h	433;"	d
NOTIFY_STRING	server.h	431;"	d
NOTIFY_ZSET	server.h	435;"	d
OBJ_ENCODING_EMBSTR	server.h	209;"	d
OBJ_ENCODING_HT	server.h	203;"	d
OBJ_ENCODING_INT	server.h	202;"	d
OBJ_ENCODING_INTSET	server.h	207;"	d
OBJ_ENCODING_LINKEDLIST	server.h	205;"	d
OBJ_ENCODING_QUICKLIST	server.h	210;"	d
OBJ_ENCODING_RAW	server.h	201;"	d
OBJ_ENCODING_SKIPLIST	server.h	208;"	d
OBJ_ENCODING_ZIPLIST	server.h	206;"	d
OBJ_ENCODING_ZIPMAP	server.h	204;"	d
OBJ_HASH	server.h	196;"	d
OBJ_HASH_KEY	server.h	1059;"	d
OBJ_HASH_MAX_ZIPLIST_ENTRIES	server.h	367;"	d
OBJ_HASH_MAX_ZIPLIST_VALUE	server.h	368;"	d
OBJ_HASH_VALUE	server.h	1060;"	d
OBJ_LIST	server.h	193;"	d
OBJ_LIST_COMPRESS_DEPTH	server.h	375;"	d
OBJ_LIST_MAX_ZIPLIST_SIZE	server.h	374;"	d
OBJ_SET	server.h	194;"	d
OBJ_SET_MAX_INTSET_ENTRIES	server.h	369;"	d
OBJ_SHARED_BULKHDR_LEN	server.h	90;"	d
OBJ_SHARED_INTEGERS	server.h	89;"	d
OBJ_STRING	server.h	192;"	d
OBJ_ZSET	server.h	195;"	d
OBJ_ZSET_MAX_ZIPLIST_ENTRIES	server.h	370;"	d
OBJ_ZSET_MAX_ZIPLIST_VALUE	server.h	371;"	d
PROPAGATE_AOF	server.h	418;"	d
PROPAGATE_NONE	server.h	417;"	d
PROPAGATE_REPL	server.h	419;"	d
PROTO_INLINE_MAX_SIZE	server.h	160;"	d
PROTO_IOBUF_LEN	server.h	158;"	d
PROTO_MAX_QUERYBUF_LEN	server.h	157;"	d
PROTO_MBULK_BIG_ARG	server.h	161;"	d
PROTO_REPLY_CHUNK_BYTES	server.h	159;"	d
PROTO_REQ_INLINE	server.h	283;"	d
PROTO_REQ_MULTIBULK	server.h	284;"	d
PROTO_SHARED_SELECT_CMDS	server.h	88;"	d
RDB_14BITLEN	server.h	226;"	d
RDB_32BITLEN	server.h	227;"	d
RDB_6BITLEN	server.h	225;"	d
RDB_CHILD_TYPE_DISK	server.h	423;"	d
RDB_CHILD_TYPE_NONE	server.h	422;"	d
RDB_CHILD_TYPE_SOCKET	server.h	424;"	d
RDB_ENCVAL	server.h	228;"	d
RDB_ENC_INT16	server.h	235;"	d
RDB_ENC_INT32	server.h	236;"	d
RDB_ENC_INT8	server.h	234;"	d
RDB_ENC_LZF	server.h	237;"	d
RDB_EOF_MARK_SIZE	server.h	103;"	d
RDB_LENERR	server.h	229;"	d
REPL_STATE_CONNECT	server.h	299;"	d
REPL_STATE_CONNECTED	server.h	315;"	d
REPL_STATE_CONNECTING	server.h	300;"	d
REPL_STATE_NONE	server.h	298;"	d
REPL_STATE_RECEIVE_AUTH	server.h	304;"	d
REPL_STATE_RECEIVE_CAPA	server.h	310;"	d
REPL_STATE_RECEIVE_IP	server.h	308;"	d
REPL_STATE_RECEIVE_PONG	server.h	302;"	d
REPL_STATE_RECEIVE_PORT	server.h	306;"	d
REPL_STATE_RECEIVE_PSYNC	server.h	312;"	d
REPL_STATE_SEND_AUTH	server.h	303;"	d
REPL_STATE_SEND_CAPA	server.h	309;"	d
REPL_STATE_SEND_IP	server.h	307;"	d
REPL_STATE_SEND_PORT	server.h	305;"	d
REPL_STATE_SEND_PSYNC	server.h	311;"	d
REPL_STATE_TRANSFER	server.h	314;"	d
RESTART_SERVER_CONFIG_REWRITE	server.h	1342;"	d
RESTART_SERVER_GRACEFULLY	server.h	1341;"	d
RESTART_SERVER_NONE	server.h	1340;"	d
SET_OP_DIFF	server.h	382;"	d
SET_OP_INTER	server.h	383;"	d
SET_OP_UNION	server.h	381;"	d
SHUTDOWN_NOFLAGS	server.h	402;"	d
SHUTDOWN_NOSAVE	server.h	405;"	d
SHUTDOWN_SAVE	server.h	403;"	d
SLAVE_CAPA_EOF	server.h	328;"	d
SLAVE_CAPA_NONE	server.h	327;"	d
SLAVE_STATE_ONLINE	server.h	324;"	d
SLAVE_STATE_SEND_BULK	server.h	323;"	d
SLAVE_STATE_WAIT_BGSAVE_END	server.h	322;"	d
SLAVE_STATE_WAIT_BGSAVE_START	server.h	321;"	d
SORT_OP_GET	server.h	338;"	d
STATS_METRIC_COMMAND	server.h	151;"	d
STATS_METRIC_COUNT	server.h	154;"	d
STATS_METRIC_NET_INPUT	server.h	152;"	d
STATS_METRIC_NET_OUTPUT	server.h	153;"	d
STATS_METRIC_SAMPLES	server.h	150;"	d
SUPERVISED_AUTODETECT	server.h	350;"	d
SUPERVISED_NONE	server.h	349;"	d
SUPERVISED_SYSTEMD	server.h	351;"	d
SUPERVISED_UPSTART	server.h	352;"	d
UNIT_MILLISECONDS	server.h	399;"	d
UNIT_SECONDS	server.h	398;"	d
UNUSED	server.h	355;"	d
ZSKIPLIST_MAXLEVEL	server.h	357;"	d
ZSKIPLIST_P	server.h	358;"	d
__REDIS_H	server.h	31;"	d
_redisSortObject	server.h	/^typedef struct _redisSortObject {$/;"	s
_redisSortOperation	server.h	/^typedef struct _redisSortOperation {$/;"	s
active_expire_enabled	server.h	/^    int active_expire_enabled;      \/* Can be disabled for testing purposes. *\/$/;"	m	struct:redisServer
activerehashing	server.h	/^    int activerehashing;        \/* Incremental rehash in serverCron() *\/$/;"	m	struct:redisServer
also_propagate	server.h	/^    redisOpArray also_propagate;    \/* Additional command to propagate. *\/$/;"	m	struct:redisServer
aof_buf	server.h	/^    sds aof_buf;      \/* AOF buffer, written before entering the event loop *\/$/;"	m	struct:redisServer
aof_child_diff	server.h	/^    sds aof_child_diff;             \/* AOF diff accumulator child side. *\/$/;"	m	struct:redisServer
aof_child_pid	server.h	/^    pid_t aof_child_pid;            \/* PID if rewriting process *\/$/;"	m	struct:redisServer
aof_current_size	server.h	/^    off_t aof_current_size;         \/* AOF current size. *\/$/;"	m	struct:redisServer
aof_delayed_fsync	server.h	/^    unsigned long aof_delayed_fsync;  \/* delayed AOF fsync() counter *\/$/;"	m	struct:redisServer
aof_fd	server.h	/^    int aof_fd;       \/* File descriptor of currently selected AOF file *\/$/;"	m	struct:redisServer
aof_filename	server.h	/^    char *aof_filename;             \/* Name of the AOF file *\/$/;"	m	struct:redisServer
aof_flush_postponed_start	server.h	/^    time_t aof_flush_postponed_start; \/* UNIX time of postponed AOF flush *\/$/;"	m	struct:redisServer
aof_fsync	server.h	/^    int aof_fsync;                  \/* Kind of fsync() policy *\/$/;"	m	struct:redisServer
aof_last_fsync	server.h	/^    time_t aof_last_fsync;            \/* UNIX time of last fsync() *\/$/;"	m	struct:redisServer
aof_last_write_errno	server.h	/^    int aof_last_write_errno;       \/* Valid if aof_last_write_status is ERR *\/$/;"	m	struct:redisServer
aof_last_write_status	server.h	/^    int aof_last_write_status;      \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer
aof_lastbgrewrite_status	server.h	/^    int aof_lastbgrewrite_status;   \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer
aof_load_truncated	server.h	/^    int aof_load_truncated;         \/* Don't stop on unexpected AOF EOF. *\/$/;"	m	struct:redisServer
aof_no_fsync_on_rewrite	server.h	/^    int aof_no_fsync_on_rewrite;    \/* Don't fsync if a rewrite is in prog. *\/$/;"	m	struct:redisServer
aof_pipe_read_ack_from_child	server.h	/^    int aof_pipe_read_ack_from_child;$/;"	m	struct:redisServer
aof_pipe_read_ack_from_parent	server.h	/^    int aof_pipe_read_ack_from_parent;$/;"	m	struct:redisServer
aof_pipe_read_data_from_parent	server.h	/^    int aof_pipe_read_data_from_parent;$/;"	m	struct:redisServer
aof_pipe_write_ack_to_child	server.h	/^    int aof_pipe_write_ack_to_child;$/;"	m	struct:redisServer
aof_pipe_write_ack_to_parent	server.h	/^    int aof_pipe_write_ack_to_parent;$/;"	m	struct:redisServer
aof_pipe_write_data_to_child	server.h	/^    int aof_pipe_write_data_to_child;$/;"	m	struct:redisServer
aof_rewrite_base_size	server.h	/^    off_t aof_rewrite_base_size;    \/* AOF size on latest startup or rewrite. *\/$/;"	m	struct:redisServer
aof_rewrite_buf_blocks	server.h	/^    list *aof_rewrite_buf_blocks;   \/* Hold changes during an AOF rewrite. *\/$/;"	m	struct:redisServer
aof_rewrite_incremental_fsync	server.h	/^    int aof_rewrite_incremental_fsync;\/* fsync incrementally while rewriting? *\/$/;"	m	struct:redisServer
aof_rewrite_min_size	server.h	/^    off_t aof_rewrite_min_size;     \/* the AOF file is at least N bytes. *\/$/;"	m	struct:redisServer
aof_rewrite_perc	server.h	/^    int aof_rewrite_perc;           \/* Rewrite AOF if % growth is > M and... *\/$/;"	m	struct:redisServer
aof_rewrite_scheduled	server.h	/^    int aof_rewrite_scheduled;      \/* Rewrite once BGSAVE terminates. *\/$/;"	m	struct:redisServer
aof_rewrite_time_last	server.h	/^    time_t aof_rewrite_time_last;   \/* Time used by last AOF rewrite run. *\/$/;"	m	struct:redisServer
aof_rewrite_time_start	server.h	/^    time_t aof_rewrite_time_start;  \/* Current AOF rewrite start time. *\/$/;"	m	struct:redisServer
aof_selected_db	server.h	/^    int aof_selected_db; \/* Currently selected DB in AOF *\/$/;"	m	struct:redisServer
aof_state	server.h	/^    int aof_state;                  \/* AOF_(ON|OFF|WAIT_REWRITE) *\/$/;"	m	struct:redisServer
aof_stop_sending_diff	server.h	/^    int aof_stop_sending_diff;     \/* If true stop sending accumulated diffs$/;"	m	struct:redisServer
arch_bits	server.h	/^    int arch_bits;              \/* 32 or 64 depending on sizeof(long) *\/$/;"	m	struct:redisServer
argc	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp
argc	server.h	/^    int argc;               \/* Num of arguments of current command. *\/$/;"	m	struct:client
argc	server.h	/^    int argc;$/;"	m	struct:multiCmd
argv	server.h	/^    robj **argv;            \/* Arguments of current command. *\/$/;"	m	struct:client
argv	server.h	/^    robj **argv;$/;"	m	struct:multiCmd
argv	server.h	/^    robj **argv;$/;"	m	struct:redisOp
arity	server.h	/^    int arity;$/;"	m	struct:redisCommand
assert_failed	server.h	/^    char *assert_failed;$/;"	m	struct:redisServer
assert_file	server.h	/^    char *assert_file;$/;"	m	struct:redisServer
assert_line	server.h	/^    int assert_line;$/;"	m	struct:redisServer
authenticated	server.h	/^    int authenticated;      \/* When requirepass is non-NULL. *\/$/;"	m	struct:client
avg_ttl	server.h	/^    long long avg_ttl;          \/* Average TTL, just for stats *\/$/;"	m	struct:redisDb
backward	server.h	/^    struct zskiplistNode *backward;$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistNode
bgsaveerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
bindaddr	server.h	/^    char *bindaddr[CONFIG_BINDADDR_MAX]; \/* Addresses we should bind to *\/$/;"	m	struct:redisServer
bindaddr_count	server.h	/^    int bindaddr_count;         \/* Number of addresses in server.bindaddr[] *\/$/;"	m	struct:redisServer
blockingState	server.h	/^typedef struct blockingState {$/;"	s
blockingState	server.h	/^} blockingState;$/;"	t	typeref:struct:blockingState
blocking_keys	server.h	/^    dict *blocking_keys;        \/* Keys with clients waiting for data (BLPOP) *\/$/;"	m	struct:redisDb
bpop	server.h	/^    blockingState bpop;     \/* blocking state *\/$/;"	m	struct:client
bpop_blocked_clients	server.h	/^    unsigned int bpop_blocked_clients; \/* Number of clients blocked by lists *\/$/;"	m	struct:redisServer
btype	server.h	/^    int btype;              \/* Type of blocking op if CLIENT_BLOCKED. *\/$/;"	m	struct:client
buf	server.h	/^    char buf[PROTO_REPLY_CHUNK_BYTES];$/;"	m	struct:client
bufpos	server.h	/^    int bufpos;$/;"	m	struct:client
bug_report_start	server.h	/^    int bug_report_start; \/* True if bug report header was already logged. *\/$/;"	m	struct:redisServer
bulkhdr	server.h	/^    *bulkhdr[OBJ_SHARED_BULKHDR_LEN];  \/* "$<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct
bulklen	server.h	/^    long bulklen;           \/* Length of bulk argument in multi bulk request. *\/$/;"	m	struct:client
busykeyerr	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
cached_master	server.h	/^    client *cached_master; \/* Cached master to be reused for PSYNC. *\/$/;"	m	struct:redisServer
calls	server.h	/^    long long microseconds, calls;$/;"	m	struct:redisCommand
cfd	server.h	/^    int cfd[CONFIG_BINDADDR_MAX];\/* Cluster bus listening socket *\/$/;"	m	struct:redisServer
cfd_count	server.h	/^    int cfd_count;              \/* Used slots in cfd[] *\/$/;"	m	struct:redisServer
changes	server.h	/^    int changes;$/;"	m	struct:saveparam
client	server.h	/^    client *client;$/;"	m	struct:pubsubPattern
client	server.h	/^typedef struct client {$/;"	s
client	server.h	/^} client;$/;"	t	typeref:struct:client
clientBufferLimitsConfig	server.h	/^typedef struct clientBufferLimitsConfig {$/;"	s
clientBufferLimitsConfig	server.h	/^} clientBufferLimitsConfig;$/;"	t	typeref:struct:clientBufferLimitsConfig
client_max_querybuf_len	server.h	/^    size_t client_max_querybuf_len; \/* Limit for client query buffer length *\/$/;"	m	struct:redisServer
client_obuf_limits	server.h	/^    clientBufferLimitsConfig client_obuf_limits[CLIENT_TYPE_OBUF_COUNT];$/;"	m	struct:redisServer
clients	server.h	/^    list *clients;              \/* List of active clients *\/$/;"	m	struct:redisServer
clients_pause_end_time	server.h	/^    mstime_t clients_pause_end_time; \/* Time when we undo clients_paused *\/$/;"	m	struct:redisServer
clients_paused	server.h	/^    int clients_paused;         \/* True if clients are currently paused *\/$/;"	m	struct:redisServer
clients_pending_write	server.h	/^    list *clients_pending_write; \/* There is to write or install handler. *\/$/;"	m	struct:redisServer
clients_to_close	server.h	/^    list *clients_to_close;     \/* Clients to close asynchronously *\/$/;"	m	struct:redisServer
clients_waiting_acks	server.h	/^    list *clients_waiting_acks;         \/* Clients waiting in WAIT command. *\/$/;"	m	struct:redisServer
cluster	server.h	/^    struct clusterState *cluster;  \/* State of the cluster *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::clusterState
cluster_configfile	server.h	/^    char *cluster_configfile; \/* Cluster auto-generated config file name. *\/$/;"	m	struct:redisServer
cluster_enabled	server.h	/^    int cluster_enabled;      \/* Is cluster enabled? *\/$/;"	m	struct:redisServer
cluster_migration_barrier	server.h	/^    int cluster_migration_barrier; \/* Cluster replicas migration barrier. *\/$/;"	m	struct:redisServer
cluster_node_timeout	server.h	/^    mstime_t cluster_node_timeout; \/* Cluster node timeout. *\/$/;"	m	struct:redisServer
cluster_require_full_coverage	server.h	/^    int cluster_require_full_coverage; \/* If true, put the cluster down if$/;"	m	struct:redisServer
cluster_slave_validity_factor	server.h	/^    int cluster_slave_validity_factor; \/* Slave max data age for failover. *\/$/;"	m	struct:redisServer
cmd	server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:client::redisCommand
cmd	server.h	/^    struct redisCommand *cmd;$/;"	m	struct:multiCmd	typeref:struct:multiCmd::redisCommand
cmd	server.h	/^    struct redisCommand *cmd;$/;"	m	struct:redisOp	typeref:struct:redisOp::redisCommand
cmpobj	server.h	/^        robj *cmpobj;$/;"	m	union:_redisSortObject::__anon21
cnegone	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
colon	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct
commands	server.h	/^    dict *commands;             \/* Command table *\/$/;"	m	struct:redisServer
commands	server.h	/^    multiCmd *commands;     \/* Array of MULTI commands *\/$/;"	m	struct:multiState
cone	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
configfile	server.h	/^    char *configfile;           \/* Absolute config file path, or NULL *\/$/;"	m	struct:redisServer
count	server.h	/^    int count;              \/* Total number of MULTI commands *\/$/;"	m	struct:multiState
crlf	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
cronloops	server.h	/^    int cronloops;              \/* Number of times the cron function run *\/$/;"	m	struct:redisServer
ctime	server.h	/^    time_t ctime;           \/* Client creation time. *\/$/;"	m	struct:client
current_client	server.h	/^    client *current_client; \/* Current client, only used on crash report *\/$/;"	m	struct:redisServer
czero	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
daemonize	server.h	/^    int daemonize;                  \/* True if running as a daemon *\/$/;"	m	struct:redisServer
db	server.h	/^    redisDb *db;            \/* Pointer to currently SELECTed DB. *\/$/;"	m	struct:client
db	server.h	/^    redisDb *db;$/;"	m	struct:readyList
db	server.h	/^    redisDb *db;$/;"	m	struct:redisServer
dbid	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp
dbnum	server.h	/^    int dbnum;                      \/* Total number of configured DBs *\/$/;"	m	struct:redisServer
de	server.h	/^    dictEntry *de;$/;"	m	struct:__anon25
del	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
delCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::redisCommand
di	server.h	/^    dictIterator *di;$/;"	m	struct:__anon24
di	server.h	/^    dictIterator *di;$/;"	m	struct:__anon25
dict	server.h	/^    dict *dict;                 \/* The keyspace for this DB *\/$/;"	m	struct:redisDb
dict	server.h	/^    dict *dict;$/;"	m	struct:zset
dictid	server.h	/^    int dictid;             \/* ID of the currently SELECTed DB. *\/$/;"	m	struct:client
direction	server.h	/^    unsigned char direction; \/* Iteration direction *\/$/;"	m	struct:__anon22
dirty	server.h	/^    long long dirty;                \/* Changes to DB from the last save *\/$/;"	m	struct:redisServer
dirty_before_bgsave	server.h	/^    long long dirty_before_bgsave;  \/* Used to restore dirty on failed BGSAVE *\/$/;"	m	struct:redisServer
el	server.h	/^    aeEventLoop *el;$/;"	m	struct:redisServer
emptybulk	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
emptymultibulk	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
emptyscan	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct
encoding	server.h	/^    int encoding;$/;"	m	struct:__anon24
encoding	server.h	/^    int encoding;$/;"	m	struct:__anon25
encoding	server.h	/^    unsigned char encoding;$/;"	m	struct:__anon22
encoding	server.h	/^    unsigned encoding:4;$/;"	m	struct:redisObject
entry	server.h	/^    quicklistEntry entry; \/* Entry in quicklist *\/$/;"	m	struct:__anon23
err	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
evictionPoolEntry	server.h	/^struct evictionPoolEntry {$/;"	s
eviction_pool	server.h	/^    struct evictionPoolEntry *eviction_pool;    \/* Eviction pool of keys *\/$/;"	m	struct:redisDb	typeref:struct:redisDb::evictionPoolEntry
execCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::
exec_argv	server.h	/^    char **exec_argv;           \/* Executable argv vector (copy). *\/$/;"	m	struct:redisServer
execaborterr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
executable	server.h	/^    char *executable;           \/* Absolute executable file path. *\/$/;"	m	struct:redisServer
expires	server.h	/^    dict *expires;              \/* Timeout of keys with a timeout set *\/$/;"	m	struct:redisDb
fd	server.h	/^    int fd;                 \/* Client socket. *\/$/;"	m	struct:client
firstkey	server.h	/^    int firstkey; \/* The first argument that's a key (0 = no keys) *\/$/;"	m	struct:redisCommand
flags	server.h	/^    int flags;              \/* Client flags: CLIENT_* macros. *\/$/;"	m	struct:client
flags	server.h	/^    int flags;    \/* The actual flags, obtained from the 'sflags' field. *\/$/;"	m	struct:redisCommand
forward	server.h	/^        struct zskiplistNode *forward;$/;"	m	struct:zskiplistNode::zskiplistLevel	typeref:struct:zskiplistNode::zskiplistLevel::zskiplistNode
fptr	server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon25
get_ack_from_slaves	server.h	/^    int get_ack_from_slaves;            \/* If true we send REPLCONF GETACK. *\/$/;"	m	struct:redisServer
getkeys_proc	server.h	/^    redisGetKeysProc *getkeys_proc;$/;"	m	struct:redisCommand
hard_limit_bytes	server.h	/^    unsigned long long hard_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig
hashTypeIterator	server.h	/^} hashTypeIterator;$/;"	t	typeref:struct:__anon25
hash_max_ziplist_entries	server.h	/^    size_t hash_max_ziplist_entries;$/;"	m	struct:redisServer
hash_max_ziplist_value	server.h	/^    size_t hash_max_ziplist_value;$/;"	m	struct:redisServer
header	server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::zskiplistNode
hll_sparse_max_bytes	server.h	/^    size_t hll_sparse_max_bytes;$/;"	m	struct:redisServer
hz	server.h	/^    int hz;                     \/* serverCron() calls frequency in hertz *\/$/;"	m	struct:redisServer
hz	server.h	701;"	d
id	server.h	/^    int id;                     \/* Database ID *\/$/;"	m	struct:redisDb
id	server.h	/^    uint64_t id;            \/* Client incremental unique ID. *\/$/;"	m	struct:client
idle	server.h	/^    unsigned long long idle;    \/* Object idle time. *\/$/;"	m	struct:evictionPoolEntry
idx	server.h	/^        int idx;$/;"	m	struct:redisServer::__anon20
ii	server.h	/^    int ii; \/* intset iterator *\/$/;"	m	struct:__anon24
initStaticStringObject	server.h	481;"	d
inst_metric	server.h	/^    } inst_metric[STATS_METRIC_COUNT];$/;"	m	struct:redisServer	typeref:struct:redisServer::__anon20
integers	server.h	/^    *integers[OBJ_SHARED_INTEGERS],$/;"	m	struct:sharedObjectsStruct
ipfd	server.h	/^    int ipfd[CONFIG_BINDADDR_MAX]; \/* TCP socket file descriptors *\/$/;"	m	struct:redisServer
ipfd_count	server.h	/^    int ipfd_count;             \/* Used slots in ipfd[] *\/$/;"	m	struct:redisServer
iter	server.h	/^    quicklistIter *iter;$/;"	m	struct:__anon22
key	server.h	/^    robj *key;$/;"	m	struct:readyList
key	server.h	/^    sds key;                    \/* Key name. *\/$/;"	m	struct:evictionPoolEntry
keys	server.h	/^    dict *keys;             \/* The keys we are waiting to terminate a blocking$/;"	m	struct:blockingState
keystep	server.h	/^    int keystep;  \/* The step between first and last key *\/$/;"	m	struct:redisCommand
last_sample_count	server.h	/^        long long last_sample_count;\/* Count in last sample *\/$/;"	m	struct:redisServer::__anon20
last_sample_time	server.h	/^        long long last_sample_time; \/* Timestamp of last sample in ms *\/$/;"	m	struct:redisServer::__anon20
lastbgsave_status	server.h	/^    int lastbgsave_status;          \/* C_OK or C_ERR *\/$/;"	m	struct:redisServer
lastbgsave_try	server.h	/^    time_t lastbgsave_try;          \/* Unix time of last attempted bgsave *\/$/;"	m	struct:redisServer
lastcmd	server.h	/^    struct redisCommand *cmd, *lastcmd;  \/* Last command executed. *\/$/;"	m	struct:client	typeref:struct:client::
lastinteraction	server.h	/^    time_t lastinteraction; \/* Time of the last interaction, used for timeout *\/$/;"	m	struct:client
lastkey	server.h	/^    int lastkey;  \/* The last argument that's a key *\/$/;"	m	struct:redisCommand
lastsave	server.h	/^    time_t lastsave;                \/* Unix time of last successful save *\/$/;"	m	struct:redisServer
latency_events	server.h	/^    dict *latency_events;$/;"	m	struct:redisServer
latency_monitor_threshold	server.h	/^    long long latency_monitor_threshold;$/;"	m	struct:redisServer
length	server.h	/^    unsigned long length;$/;"	m	struct:zskiplist
level	server.h	/^    int level;$/;"	m	struct:zskiplist
level	server.h	/^    } level[];$/;"	m	struct:zskiplistNode	typeref:struct:zskiplistNode::zskiplistLevel
li	server.h	/^    listTypeIterator *li;$/;"	m	struct:__anon23
listTypeEntry	server.h	/^} listTypeEntry;$/;"	t	typeref:struct:__anon23
listTypeIterator	server.h	/^} listTypeIterator;$/;"	t	typeref:struct:__anon22
list_compress_depth	server.h	/^    int list_compress_depth;$/;"	m	struct:redisServer
list_max_ziplist_size	server.h	/^    int list_max_ziplist_size;$/;"	m	struct:redisServer
loading	server.h	/^    int loading;                \/* We are loading data from disk if true *\/$/;"	m	struct:redisServer
loading_loaded_bytes	server.h	/^    off_t loading_loaded_bytes;$/;"	m	struct:redisServer
loading_process_events_interval_bytes	server.h	/^    off_t loading_process_events_interval_bytes;$/;"	m	struct:redisServer
loading_start_time	server.h	/^    time_t loading_start_time;$/;"	m	struct:redisServer
loading_total_bytes	server.h	/^    off_t loading_total_bytes;$/;"	m	struct:redisServer
loadingerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
logfile	server.h	/^    char *logfile;                  \/* Path of log file *\/$/;"	m	struct:redisServer
lpop	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
lpopCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
lpush	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct
lpushCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
lru	server.h	/^    unsigned lru:LRU_BITS; \/* lru time (relative to server.lruclock) *\/$/;"	m	struct:redisObject
lruclock	server.h	/^    unsigned lruclock:LRU_BITS; \/* Clock for LRU eviction *\/$/;"	m	struct:redisServer
lua	server.h	/^    lua_State *lua; \/* The Lua interpreter. We use just one for all clients *\/$/;"	m	struct:redisServer
lua_always_replicate_commands	server.h	/^    int lua_always_replicate_commands; \/* Default replication type. *\/$/;"	m	struct:redisServer
lua_caller	server.h	/^    client *lua_caller;   \/* The client running EVAL right now, or NULL *\/$/;"	m	struct:redisServer
lua_client	server.h	/^    client *lua_client;   \/* The "fake client" to query Redis from Lua *\/$/;"	m	struct:redisServer
lua_kill	server.h	/^    int lua_kill;         \/* Kill the script if true. *\/$/;"	m	struct:redisServer
lua_multi_emitted	server.h	/^    int lua_multi_emitted;\/* True if we already proagated MULTI. *\/$/;"	m	struct:redisServer
lua_random_dirty	server.h	/^    int lua_random_dirty; \/* True if a random command was called during the$/;"	m	struct:redisServer
lua_repl	server.h	/^    int lua_repl;         \/* Script replication flags for redis.set_repl(). *\/$/;"	m	struct:redisServer
lua_replicate_commands	server.h	/^    int lua_replicate_commands; \/* True if we are doing single commands repl. *\/$/;"	m	struct:redisServer
lua_scripts	server.h	/^    dict *lua_scripts;         \/* A dictionary of SHA1 -> Lua scripts *\/$/;"	m	struct:redisServer
lua_time_limit	server.h	/^    mstime_t lua_time_limit;  \/* Script timeout in milliseconds *\/$/;"	m	struct:redisServer
lua_time_start	server.h	/^    mstime_t lua_time_start;  \/* Start time of script, milliseconds time *\/$/;"	m	struct:redisServer
lua_timedout	server.h	/^    int lua_timedout;     \/* True if we reached the time limit for script$/;"	m	struct:redisServer
lua_write_dirty	server.h	/^    int lua_write_dirty;  \/* True if a write command was called during the$/;"	m	struct:redisServer
master	server.h	/^    client *master;     \/* Client that is master for this slave *\/$/;"	m	struct:redisServer
master_repl_offset	server.h	/^    long long master_repl_offset;   \/* Global replication offset *\/$/;"	m	struct:redisServer
masterauth	server.h	/^    char *masterauth;               \/* AUTH with this password with master *\/$/;"	m	struct:redisServer
masterdownerr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
masterhost	server.h	/^    char *masterhost;               \/* Hostname of master *\/$/;"	m	struct:redisServer
masterport	server.h	/^    int masterport;                 \/* Port of master *\/$/;"	m	struct:redisServer
max	server.h	/^    double min, max;$/;"	m	struct:__anon26
max	server.h	/^    robj *min, *max;  \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon27
maxclients	server.h	/^    unsigned int maxclients;            \/* Max number of simultaneous clients *\/$/;"	m	struct:redisServer
maxex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon26
maxex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon27
maxidletime	server.h	/^    int maxidletime;                \/* Client timeout in seconds *\/$/;"	m	struct:redisServer
maxmemory	server.h	/^    unsigned long long maxmemory;   \/* Max number of memory bytes to use *\/$/;"	m	struct:redisServer
maxmemory_policy	server.h	/^    int maxmemory_policy;           \/* Policy for key eviction *\/$/;"	m	struct:redisServer
maxmemory_samples	server.h	/^    int maxmemory_samples;          \/* Pricision of random sampling *\/$/;"	m	struct:redisServer
maxstring	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct
mbulkhdr	server.h	/^    *mbulkhdr[OBJ_SHARED_BULKHDR_LEN], \/* "*<value>\\r\\n" *\/$/;"	m	struct:sharedObjectsStruct
messagebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
microseconds	server.h	/^    long long microseconds, calls;$/;"	m	struct:redisCommand
migrate_cached_sockets	server.h	/^    dict *migrate_cached_sockets;\/* MIGRATE cached sockets *\/$/;"	m	struct:redisServer
min	server.h	/^    double min, max;$/;"	m	struct:__anon26
min	server.h	/^    robj *min, *max;  \/* May be set to shared.(minstring|maxstring) *\/$/;"	m	struct:__anon27
minex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon26
minex	server.h	/^    int minex, maxex; \/* are min or max exclusive? *\/$/;"	m	struct:__anon27
minreplicas	server.h	/^    int minreplicas;        \/* MINREPLICAS for synchronous replication *\/$/;"	m	struct:multiState
minreplicas_timeout	server.h	/^    time_t minreplicas_timeout; \/* MINREPLICAS timeout as unixtime. *\/$/;"	m	struct:multiState
minstring	server.h	/^    *lpush, *emptyscan, *minstring, *maxstring,$/;"	m	struct:sharedObjectsStruct
monitors	server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer
mstate	server.h	/^    multiState mstate;      \/* MULTI\/EXEC state *\/$/;"	m	struct:client
mstime	server.h	/^    long long mstime;       \/* Like 'unixtime' but with milliseconds resolution. *\/$/;"	m	struct:redisServer
mstime_t	server.h	/^typedef long long mstime_t; \/* millisecond time type. *\/$/;"	t
multiCmd	server.h	/^typedef struct multiCmd {$/;"	s
multiCmd	server.h	/^} multiCmd;$/;"	t	typeref:struct:multiCmd
multiCommand	server.h	/^    struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,$/;"	m	struct:redisServer	typeref:struct:redisServer::
multiState	server.h	/^typedef struct multiState {$/;"	s
multiState	server.h	/^} multiState;$/;"	t	typeref:struct:multiState
multibulklen	server.h	/^    int multibulklen;       \/* Number of multi bulk arguments left to read. *\/$/;"	m	struct:client
name	server.h	/^    char *name;$/;"	m	struct:redisCommand
name	server.h	/^    char *name;$/;"	m	struct:redisFunctionSym
name	server.h	/^    robj *name;             \/* As set by CLIENT SETNAME. *\/$/;"	m	struct:client
neterr	server.h	/^    char neterr[ANET_ERR_LEN];   \/* Error buffer for anet.c *\/$/;"	m	struct:redisServer
next_client_id	server.h	/^    uint64_t next_client_id;    \/* Next client unique ID. Incremental. *\/$/;"	m	struct:redisServer
noautherr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
nokeyerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
noreplicaserr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
noscripterr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
notify_keyspace_events	server.h	/^    int notify_keyspace_events; \/* Events to propagate via Pub\/Sub. This is an$/;"	m	struct:redisServer
nullbulk	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct
nullmultibulk	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct
numops	server.h	/^    int numops;$/;"	m	struct:redisOpArray
numreplicas	server.h	/^    int numreplicas;        \/* Number of replicas we are waiting for ACK. *\/$/;"	m	struct:blockingState
obj	server.h	/^    robj *obj;$/;"	m	struct:_redisSortObject
obj	server.h	/^    robj *obj;$/;"	m	struct:zskiplistNode
obuf_soft_limit_reached_time	server.h	/^    time_t obuf_soft_limit_reached_time;$/;"	m	struct:client
ok	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
oomerr	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
ops	server.h	/^    redisOp *ops;$/;"	m	struct:redisOpArray
orig_commands	server.h	/^    dict *orig_commands;        \/* Command table before command renaming. *\/$/;"	m	struct:redisServer
outofrangeerr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
pattern	server.h	/^    robj *pattern;$/;"	m	struct:_redisSortOperation
pattern	server.h	/^    robj *pattern;$/;"	m	struct:pubsubPattern
peerid	server.h	/^    sds peerid;             \/* Cached peer ID. *\/$/;"	m	struct:client
pid	server.h	/^    pid_t pid;                  \/* Main process pid. *\/$/;"	m	struct:redisServer
pidfile	server.h	/^    char *pidfile;              \/* PID file path *\/$/;"	m	struct:redisServer
plus	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
pmessagebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
pointer	server.h	/^    unsigned long pointer;$/;"	m	struct:redisFunctionSym
pong	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
port	server.h	/^    int port;                   \/* TCP listening port *\/$/;"	m	struct:redisServer
proc	server.h	/^    redisCommandProc *proc;$/;"	m	struct:redisCommand
protected_mode	server.h	/^    int protected_mode;         \/* Don't accept external connections. *\/$/;"	m	struct:redisServer
psubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
psync_initial_offset	server.h	/^    long long psync_initial_offset; \/* FULLRESYNC reply offset other slaves$/;"	m	struct:client
ptr	server.h	/^    void *ptr;$/;"	m	struct:redisObject
pubsubPattern	server.h	/^typedef struct pubsubPattern {$/;"	s
pubsubPattern	server.h	/^} pubsubPattern;$/;"	t	typeref:struct:pubsubPattern
pubsub_channels	server.h	/^    dict *pubsub_channels;  \/* Map channels to list of subscribed clients *\/$/;"	m	struct:redisServer
pubsub_channels	server.h	/^    dict *pubsub_channels;  \/* channels a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client
pubsub_patterns	server.h	/^    list *pubsub_patterns;  \/* A list of pubsub_patterns *\/$/;"	m	struct:redisServer
pubsub_patterns	server.h	/^    list *pubsub_patterns;  \/* patterns a client is interested in (SUBSCRIBE) *\/$/;"	m	struct:client
punsubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
querybuf	server.h	/^    sds querybuf;           \/* Buffer we use to accumulate client queries. *\/$/;"	m	struct:client
querybuf_peak	server.h	/^    size_t querybuf_peak;   \/* Recent (100ms or more) peak of querybuf size. *\/$/;"	m	struct:client
queued	server.h	/^    *colon, *nullbulk, *nullmultibulk, *queued,$/;"	m	struct:sharedObjectsStruct
rdb_bgsave_scheduled	server.h	/^    int rdb_bgsave_scheduled;       \/* BGSAVE when possible if true. *\/$/;"	m	struct:redisServer
rdb_checksum	server.h	/^    int rdb_checksum;               \/* Use RDB checksum? *\/$/;"	m	struct:redisServer
rdb_child_pid	server.h	/^    pid_t rdb_child_pid;            \/* PID of RDB saving child *\/$/;"	m	struct:redisServer
rdb_child_type	server.h	/^    int rdb_child_type;             \/* Type of save by active child. *\/$/;"	m	struct:redisServer
rdb_compression	server.h	/^    int rdb_compression;            \/* Use compression in RDB? *\/$/;"	m	struct:redisServer
rdb_filename	server.h	/^    char *rdb_filename;             \/* Name of RDB file *\/$/;"	m	struct:redisServer
rdb_pipe_read_result_from_child	server.h	/^    int rdb_pipe_read_result_from_child; \/* of each slave in diskless SYNC. *\/$/;"	m	struct:redisServer
rdb_pipe_write_result_to_parent	server.h	/^    int rdb_pipe_write_result_to_parent; \/* RDB pipes used to return the state *\/$/;"	m	struct:redisServer
rdb_save_time_last	server.h	/^    time_t rdb_save_time_last;      \/* Time used by last RDB save run. *\/$/;"	m	struct:redisServer
rdb_save_time_start	server.h	/^    time_t rdb_save_time_start;     \/* Current RDB save start time. *\/$/;"	m	struct:redisServer
readyList	server.h	/^typedef struct readyList {$/;"	s
readyList	server.h	/^} readyList;$/;"	t	typeref:struct:readyList
ready_keys	server.h	/^    dict *ready_keys;           \/* Blocked keys that received a PUSH *\/$/;"	m	struct:redisDb
ready_keys	server.h	/^    list *ready_keys;        \/* List of readyList structures for BLPOP & co *\/$/;"	m	struct:redisServer
redisCommand	server.h	/^struct redisCommand {$/;"	s
redisCommandProc	server.h	/^typedef void redisCommandProc(client *c);$/;"	t
redisDb	server.h	/^typedef struct redisDb {$/;"	s
redisDb	server.h	/^} redisDb;$/;"	t	typeref:struct:redisDb
redisDebug	server.h	1671;"	d
redisDebugMark	server.h	1673;"	d
redisFunctionSym	server.h	/^struct redisFunctionSym {$/;"	s
redisGetKeysProc	server.h	/^typedef int *redisGetKeysProc(struct redisCommand *cmd, robj **argv, int argc, int *numkeys);$/;"	t
redisObject	server.h	/^typedef struct redisObject {$/;"	s
redisOp	server.h	/^typedef struct redisOp {$/;"	s
redisOp	server.h	/^} redisOp;$/;"	t	typeref:struct:redisOp
redisOpArray	server.h	/^typedef struct redisOpArray {$/;"	s
redisOpArray	server.h	/^} redisOpArray;$/;"	t	typeref:struct:redisOpArray
redisServer	server.h	/^struct redisServer {$/;"	s
redisSortObject	server.h	/^} redisSortObject;$/;"	t	typeref:struct:_redisSortObject
redisSortOperation	server.h	/^} redisSortOperation;$/;"	t	typeref:struct:_redisSortOperation
refcount	server.h	/^    int refcount;$/;"	m	struct:redisObject
repl_ack_off	server.h	/^    long long repl_ack_off; \/* Replication ack offset, if this is a slave. *\/$/;"	m	struct:client
repl_ack_time	server.h	/^    long long repl_ack_time;\/* Replication ack time, if this is a slave. *\/$/;"	m	struct:client
repl_backlog	server.h	/^    char *repl_backlog;             \/* Replication backlog for partial syncs *\/$/;"	m	struct:redisServer
repl_backlog_histlen	server.h	/^    long long repl_backlog_histlen; \/* Backlog actual data length *\/$/;"	m	struct:redisServer
repl_backlog_idx	server.h	/^    long long repl_backlog_idx;     \/* Backlog circular buffer current offset *\/$/;"	m	struct:redisServer
repl_backlog_off	server.h	/^    long long repl_backlog_off;     \/* Replication offset of first byte in the$/;"	m	struct:redisServer
repl_backlog_size	server.h	/^    long long repl_backlog_size;    \/* Backlog circular buffer size *\/$/;"	m	struct:redisServer
repl_backlog_time_limit	server.h	/^    time_t repl_backlog_time_limit; \/* Time without slaves after the backlog$/;"	m	struct:redisServer
repl_disable_tcp_nodelay	server.h	/^    int repl_disable_tcp_nodelay;   \/* Disable TCP_NODELAY after SYNC? *\/$/;"	m	struct:redisServer
repl_diskless_sync	server.h	/^    int repl_diskless_sync;         \/* Send RDB to slaves sockets directly. *\/$/;"	m	struct:redisServer
repl_diskless_sync_delay	server.h	/^    int repl_diskless_sync_delay;   \/* Delay to start a diskless repl BGSAVE. *\/$/;"	m	struct:redisServer
repl_down_since	server.h	/^    time_t repl_down_since; \/* Unix time at which link with master went down *\/$/;"	m	struct:redisServer
repl_good_slaves_count	server.h	/^    int repl_good_slaves_count;     \/* Number of slaves with lag <= max_lag. *\/$/;"	m	struct:redisServer
repl_master_initial_offset	server.h	/^    long long repl_master_initial_offset;         \/* Master PSYNC offset. *\/$/;"	m	struct:redisServer
repl_master_runid	server.h	/^    char repl_master_runid[CONFIG_RUN_ID_SIZE+1];  \/* Master run id for PSYNC.*\/$/;"	m	struct:redisServer
repl_min_slaves_max_lag	server.h	/^    int repl_min_slaves_max_lag;    \/* Max lag of <count> slaves to write. *\/$/;"	m	struct:redisServer
repl_min_slaves_to_write	server.h	/^    int repl_min_slaves_to_write;   \/* Min number of slaves to write. *\/$/;"	m	struct:redisServer
repl_no_slaves_since	server.h	/^    time_t repl_no_slaves_since;    \/* We have no slaves since that time.$/;"	m	struct:redisServer
repl_ping_slave_period	server.h	/^    int repl_ping_slave_period;     \/* Master pings the slave every N seconds *\/$/;"	m	struct:redisServer
repl_put_online_on_ack	server.h	/^    int repl_put_online_on_ack; \/* Install slave write handler on ACK. *\/$/;"	m	struct:client
repl_scriptcache_dict	server.h	/^    dict *repl_scriptcache_dict;        \/* SHA1 all slaves are aware of. *\/$/;"	m	struct:redisServer
repl_scriptcache_fifo	server.h	/^    list *repl_scriptcache_fifo;        \/* First in, first out LRU eviction. *\/$/;"	m	struct:redisServer
repl_scriptcache_size	server.h	/^    unsigned int repl_scriptcache_size; \/* Max number of elements. *\/$/;"	m	struct:redisServer
repl_serve_stale_data	server.h	/^    int repl_serve_stale_data; \/* Serve stale data when link is down? *\/$/;"	m	struct:redisServer
repl_slave_ro	server.h	/^    int repl_slave_ro;          \/* Slave is read only? *\/$/;"	m	struct:redisServer
repl_state	server.h	/^    int repl_state;          \/* Replication status if the instance is a slave *\/$/;"	m	struct:redisServer
repl_syncio_timeout	server.h	/^    int repl_syncio_timeout; \/* Timeout for synchronous I\/O calls *\/$/;"	m	struct:redisServer
repl_timeout	server.h	/^    int repl_timeout;               \/* Timeout after N seconds of master idle *\/$/;"	m	struct:redisServer
repl_transfer_fd	server.h	/^    int repl_transfer_fd;    \/* Slave -> Master SYNC temp file descriptor *\/$/;"	m	struct:redisServer
repl_transfer_last_fsync_off	server.h	/^    off_t repl_transfer_last_fsync_off; \/* Offset when we fsync-ed last time. *\/$/;"	m	struct:redisServer
repl_transfer_lastio	server.h	/^    time_t repl_transfer_lastio; \/* Unix time of the latest read, for timeout *\/$/;"	m	struct:redisServer
repl_transfer_read	server.h	/^    off_t repl_transfer_read; \/* Amount of RDB read from master during sync. *\/$/;"	m	struct:redisServer
repl_transfer_s	server.h	/^    int repl_transfer_s;     \/* Slave -> Master SYNC socket *\/$/;"	m	struct:redisServer
repl_transfer_size	server.h	/^    off_t repl_transfer_size; \/* Size of RDB to read from master during sync. *\/$/;"	m	struct:redisServer
repl_transfer_tmpfile	server.h	/^    char *repl_transfer_tmpfile; \/* Slave-> master SYNC temp file name *\/$/;"	m	struct:redisServer
repldbfd	server.h	/^    int repldbfd;           \/* Replication DB file descriptor. *\/$/;"	m	struct:client
repldboff	server.h	/^    off_t repldboff;        \/* Replication DB file offset. *\/$/;"	m	struct:client
repldbsize	server.h	/^    off_t repldbsize;       \/* Replication DB file size. *\/$/;"	m	struct:client
reploff	server.h	/^    long long reploff;      \/* Replication offset if this is our master. *\/$/;"	m	struct:client
reploffset	server.h	/^    long long reploffset;   \/* Replication offset to reach. *\/$/;"	m	struct:blockingState
replpreamble	server.h	/^    sds replpreamble;       \/* Replication DB preamble. *\/$/;"	m	struct:client
replrunid	server.h	/^    char replrunid[CONFIG_RUN_ID_SIZE+1]; \/* Master run id if is a master. *\/$/;"	m	struct:client
replstate	server.h	/^    int replstate;          \/* Replication state if this is a slave. *\/$/;"	m	struct:client
reply	server.h	/^    list *reply;            \/* List of reply objects to send to the client. *\/$/;"	m	struct:client
reply_bytes	server.h	/^    unsigned long long reply_bytes; \/* Tot bytes of objects in reply list. *\/$/;"	m	struct:client
reqtype	server.h	/^    int reqtype;            \/* Request protocol type: PROTO_REQ_* *\/$/;"	m	struct:client
requirepass	server.h	/^    char *requirepass;          \/* Pass for AUTH command, or NULL *\/$/;"	m	struct:redisServer
resident_set_size	server.h	/^    size_t resident_set_size;       \/* RSS sampled in serverCron(). *\/$/;"	m	struct:redisServer
robj	server.h	/^} robj;$/;"	t	typeref:struct:redisObject
roslaveerr	server.h	/^    *masterdownerr, *roslaveerr, *execaborterr, *noautherr, *noreplicaserr,$/;"	m	struct:sharedObjectsStruct
rpop	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
rpopCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::
run_with_period	server.h	446;"	d
runid	server.h	/^    char runid[CONFIG_RUN_ID_SIZE+1];  \/* ID always different at every exec. *\/$/;"	m	struct:redisServer
sameobjecterr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
samples	server.h	/^        long long samples[STATS_METRIC_SAMPLES];$/;"	m	struct:redisServer::__anon20
saveparam	server.h	/^struct saveparam {$/;"	s
saveparams	server.h	/^    struct saveparam *saveparams;   \/* Save points array for RDB *\/$/;"	m	struct:redisServer	typeref:struct:redisServer::saveparam
saveparamslen	server.h	/^    int saveparamslen;              \/* Number of saving points *\/$/;"	m	struct:redisServer
score	server.h	/^        double score;$/;"	m	union:_redisSortObject::__anon21
score	server.h	/^    double score;$/;"	m	struct:zskiplistNode
sdsEncodedObject	server.h	1224;"	d
seconds	server.h	/^    time_t seconds;$/;"	m	struct:saveparam
select	server.h	/^    *select[PROTO_SHARED_SELECT_CMDS],$/;"	m	struct:sharedObjectsStruct
sentinel_mode	server.h	/^    int sentinel_mode;          \/* True if this instance is a Sentinel. *\/$/;"	m	struct:redisServer
sentlen	server.h	/^    size_t sentlen;         \/* Amount of bytes already sent in the current$/;"	m	struct:client
serverAssert	server.h	450;"	d
serverAssertWithInfo	server.h	449;"	d
serverPanic	server.h	451;"	d
setTypeIterator	server.h	/^} setTypeIterator;$/;"	t	typeref:struct:__anon24
set_max_intset_entries	server.h	/^    size_t set_max_intset_entries;$/;"	m	struct:redisServer
sflags	server.h	/^    char *sflags; \/* Flags as string representation, one char per flag. *\/$/;"	m	struct:redisCommand
sharedObjectsStruct	server.h	/^struct sharedObjectsStruct {$/;"	s
shutdown_asap	server.h	/^    int shutdown_asap;          \/* SHUTDOWN needed ASAP *\/$/;"	m	struct:redisServer
slave_announce_ip	server.h	/^    char *slave_announce_ip;        \/* Give the master this ip address. *\/$/;"	m	struct:redisServer
slave_announce_port	server.h	/^    int slave_announce_port;        \/* Give the master this listening port. *\/$/;"	m	struct:redisServer
slave_capa	server.h	/^    int slave_capa;         \/* Slave capabilities: SLAVE_CAPA_* bitwise OR. *\/$/;"	m	struct:client
slave_ip	server.h	/^    char slave_ip[NET_IP_STR_LEN]; \/* Optionally given by REPLCONF ip-address *\/$/;"	m	struct:client
slave_listening_port	server.h	/^    int slave_listening_port; \/* As configured with: REPLCONF listening-port *\/$/;"	m	struct:client
slave_priority	server.h	/^    int slave_priority;             \/* Reported in INFO and used by Sentinel. *\/$/;"	m	struct:redisServer
slaves	server.h	/^    list *slaves, *monitors;    \/* List of slaves and MONITORs *\/$/;"	m	struct:redisServer
slaveseldb	server.h	/^    int slaveseldb;                 \/* Last SELECTed DB in replication output *\/$/;"	m	struct:redisServer
slowlog	server.h	/^    list *slowlog;                  \/* SLOWLOG list of commands *\/$/;"	m	struct:redisServer
slowlog_entry_id	server.h	/^    long long slowlog_entry_id;     \/* SLOWLOG current entry ID *\/$/;"	m	struct:redisServer
slowlog_log_slower_than	server.h	/^    long long slowlog_log_slower_than; \/* SLOWLOG time limit (to get logged) *\/$/;"	m	struct:redisServer
slowlog_max_len	server.h	/^    unsigned long slowlog_max_len;     \/* SLOWLOG max number of items logged *\/$/;"	m	struct:redisServer
slowscripterr	server.h	/^    *outofrangeerr, *noscripterr, *loadingerr, *slowscripterr, *bgsaveerr,$/;"	m	struct:sharedObjectsStruct
sofd	server.h	/^    int sofd;                   \/* Unix socket file descriptor *\/$/;"	m	struct:redisServer
soft_limit_bytes	server.h	/^    unsigned long long soft_limit_bytes;$/;"	m	struct:clientBufferLimitsConfig
soft_limit_seconds	server.h	/^    time_t soft_limit_seconds;$/;"	m	struct:clientBufferLimitsConfig
sort_alpha	server.h	/^    int sort_alpha;$/;"	m	struct:redisServer
sort_bypattern	server.h	/^    int sort_bypattern;$/;"	m	struct:redisServer
sort_desc	server.h	/^    int sort_desc;$/;"	m	struct:redisServer
sort_store	server.h	/^    int sort_store;$/;"	m	struct:redisServer
space	server.h	/^    robj *crlf, *ok, *err, *emptybulk, *czero, *cone, *cnegone, *pong, *space,$/;"	m	struct:sharedObjectsStruct
span	server.h	/^        unsigned int span;$/;"	m	struct:zskiplistNode::zskiplistLevel
sremCommand	server.h	/^                        *rpopCommand, *sremCommand, *execCommand;$/;"	m	struct:redisServer	typeref:struct:redisServer::
stat_evictedkeys	server.h	/^    long long stat_evictedkeys;     \/* Number of evicted keys (maxmemory) *\/$/;"	m	struct:redisServer
stat_expiredkeys	server.h	/^    long long stat_expiredkeys;     \/* Number of expired keys *\/$/;"	m	struct:redisServer
stat_fork_rate	server.h	/^    double stat_fork_rate;          \/* Fork rate in GB\/sec. *\/$/;"	m	struct:redisServer
stat_fork_time	server.h	/^    long long stat_fork_time;       \/* Time needed to perform latest fork() *\/$/;"	m	struct:redisServer
stat_keyspace_hits	server.h	/^    long long stat_keyspace_hits;   \/* Number of successful lookups of keys *\/$/;"	m	struct:redisServer
stat_keyspace_misses	server.h	/^    long long stat_keyspace_misses; \/* Number of failed lookups of keys *\/$/;"	m	struct:redisServer
stat_net_input_bytes	server.h	/^    long long stat_net_input_bytes; \/* Bytes read from network. *\/$/;"	m	struct:redisServer
stat_net_output_bytes	server.h	/^    long long stat_net_output_bytes; \/* Bytes written to network. *\/$/;"	m	struct:redisServer
stat_numcommands	server.h	/^    long long stat_numcommands;     \/* Number of processed commands *\/$/;"	m	struct:redisServer
stat_numconnections	server.h	/^    long long stat_numconnections;  \/* Number of connections received *\/$/;"	m	struct:redisServer
stat_peak_memory	server.h	/^    size_t stat_peak_memory;        \/* Max used memory record *\/$/;"	m	struct:redisServer
stat_rejected_conn	server.h	/^    long long stat_rejected_conn;   \/* Clients rejected because of maxclients *\/$/;"	m	struct:redisServer
stat_starttime	server.h	/^    time_t stat_starttime;          \/* Server start time *\/$/;"	m	struct:redisServer
stat_sync_full	server.h	/^    long long stat_sync_full;       \/* Number of full resyncs with slaves. *\/$/;"	m	struct:redisServer
stat_sync_partial_err	server.h	/^    long long stat_sync_partial_err;\/* Number of unaccepted PSYNC requests. *\/$/;"	m	struct:redisServer
stat_sync_partial_ok	server.h	/^    long long stat_sync_partial_ok; \/* Number of accepted PSYNC requests. *\/$/;"	m	struct:redisServer
stop_writes_on_bgsave_err	server.h	/^    int stop_writes_on_bgsave_err;  \/* Don't allow writes if can't BGSAVE *\/$/;"	m	struct:redisServer
subject	server.h	/^    robj *subject;$/;"	m	struct:__anon22
subject	server.h	/^    robj *subject;$/;"	m	struct:__anon24
subject	server.h	/^    robj *subject;$/;"	m	struct:__anon25
subscribebulk	server.h	/^    *busykeyerr, *oomerr, *plus, *messagebulk, *pmessagebulk, *subscribebulk,$/;"	m	struct:sharedObjectsStruct
supervised	server.h	/^    int supervised;                 \/* 1 if supervised, 0 otherwise. *\/$/;"	m	struct:redisServer
supervised_mode	server.h	/^    int supervised_mode;            \/* See SUPERVISED_* *\/$/;"	m	struct:redisServer
syntaxerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
syslog_enabled	server.h	/^    int syslog_enabled;             \/* Is syslog enabled? *\/$/;"	m	struct:redisServer
syslog_facility	server.h	/^    int syslog_facility;            \/* Syslog facility *\/$/;"	m	struct:redisServer
syslog_ident	server.h	/^    char *syslog_ident;             \/* Syslog ident *\/$/;"	m	struct:redisServer
system_memory_size	server.h	/^    size_t system_memory_size;  \/* Total memory in system as reported by OS *\/$/;"	m	struct:redisServer
tail	server.h	/^    struct zskiplistNode *header, *tail;$/;"	m	struct:zskiplist	typeref:struct:zskiplist::
target	server.h	/^    int argc, dbid, target;$/;"	m	struct:redisOp
target	server.h	/^    robj *target;           \/* The key that should receive the element,$/;"	m	struct:blockingState
tcp_backlog	server.h	/^    int tcp_backlog;            \/* TCP listen() backlog *\/$/;"	m	struct:redisServer
tcpkeepalive	server.h	/^    int tcpkeepalive;               \/* Set SO_KEEPALIVE if non-zero. *\/$/;"	m	struct:redisServer
timeout	server.h	/^    mstime_t timeout;       \/* Blocking operation timeout. If UNIX current time$/;"	m	struct:blockingState
type	server.h	/^    int type;$/;"	m	struct:_redisSortOperation
type	server.h	/^    unsigned type:4;$/;"	m	struct:redisObject
u	server.h	/^    } u;$/;"	m	struct:_redisSortObject	typeref:union:_redisSortObject::__anon21
unblocked_clients	server.h	/^    list *unblocked_clients; \/* list of clients to unblock before next loop *\/$/;"	m	struct:redisServer
unixsocket	server.h	/^    char *unixsocket;           \/* UNIX socket path *\/$/;"	m	struct:redisServer
unixsocketperm	server.h	/^    mode_t unixsocketperm;      \/* UNIX socket permission *\/$/;"	m	struct:redisServer
unixtime	server.h	/^    time_t unixtime;        \/* Unix time sampled every cron cycle. *\/$/;"	m	struct:redisServer
unsubscribebulk	server.h	/^    *unsubscribebulk, *psubscribebulk, *punsubscribebulk, *del, *rpop, *lpop,$/;"	m	struct:sharedObjectsStruct
verbosity	server.h	/^    int verbosity;                  \/* Loglevel in redis.conf *\/$/;"	m	struct:redisServer
vptr	server.h	/^    unsigned char *fptr, *vptr;$/;"	m	struct:__anon25
watchdog_period	server.h	/^    int watchdog_period;  \/* Software watchdog period in ms. 0 = off *\/$/;"	m	struct:redisServer
watched_keys	server.h	/^    dict *watched_keys;         \/* WATCHED keys for MULTI\/EXEC CAS *\/$/;"	m	struct:redisDb
watched_keys	server.h	/^    list *watched_keys;     \/* Keys WATCHED for MULTI\/EXEC CAS *\/$/;"	m	struct:client
woff	server.h	/^    long long woff;         \/* Last write global replication offset. *\/$/;"	m	struct:client
wrongtypeerr	server.h	/^    *emptymultibulk, *wrongtypeerr, *nokeyerr, *syntaxerr, *sameobjecterr,$/;"	m	struct:sharedObjectsStruct
zlexrangespec	server.h	/^} zlexrangespec;$/;"	t	typeref:struct:__anon27
zrangespec	server.h	/^} zrangespec;$/;"	t	typeref:struct:__anon26
zset	server.h	/^typedef struct zset {$/;"	s
zset	server.h	/^} zset;$/;"	t	typeref:struct:zset
zset_max_ziplist_entries	server.h	/^    size_t zset_max_ziplist_entries;$/;"	m	struct:redisServer
zset_max_ziplist_value	server.h	/^    size_t zset_max_ziplist_value;$/;"	m	struct:redisServer
zskiplist	server.h	/^typedef struct zskiplist {$/;"	s
zskiplist	server.h	/^} zskiplist;$/;"	t	typeref:struct:zskiplist
zskiplistLevel	server.h	/^    struct zskiplistLevel {$/;"	s	struct:zskiplistNode
zskiplistNode	server.h	/^typedef struct zskiplistNode {$/;"	s
zskiplistNode	server.h	/^} zskiplistNode;$/;"	t	typeref:struct:zskiplistNode
zsl	server.h	/^    zskiplist *zsl;$/;"	m	struct:zset
HAVE_SETPROCTITLE	setproctitle.c	42;"	d	file:
SPT	setproctitle.c	/^} SPT;$/;"	v	typeref:struct:__anon19	file:
SPT_MAXTITLE	setproctitle.c	213;"	d	file:
SPT_MIN	setproctitle.c	67;"	d	file:
_GNU_SOURCE	setproctitle.c	29;"	d	file:
arg0	setproctitle.c	/^	const char *arg0;$/;"	m	struct:__anon19	file:
base	setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon19	file:
end	setproctitle.c	/^	char *base, *end;$/;"	m	struct:__anon19	file:
error	setproctitle.c	/^	int error;$/;"	m	struct:__anon19	file:
nul	setproctitle.c	/^	char *nul;$/;"	m	struct:__anon19	file:
reset	setproctitle.c	/^	_Bool reset;$/;"	m	struct:__anon19	file:
setproctitle	setproctitle.c	/^void setproctitle(const char *fmt, ...) {$/;"	f
spt_clearenv	setproctitle.c	/^static int spt_clearenv(void) {$/;"	f	file:
spt_copyargs	setproctitle.c	/^static int spt_copyargs(int argc, char *argv[]) {$/;"	f	file:
spt_copyenv	setproctitle.c	/^static int spt_copyenv(char *oldenv[]) {$/;"	f	file:
spt_init	setproctitle.c	/^void spt_init(int argc, char *argv[]) {$/;"	f
spt_min	setproctitle.c	/^static inline size_t spt_min(size_t a, size_t b) {$/;"	f	file:
BUFSIZE	sha1.c	201;"	d	file:
R0	sha1.c	47;"	d	file:
R1	sha1.c	48;"	d	file:
R2	sha1.c	49;"	d	file:
R3	sha1.c	50;"	d	file:
R4	sha1.c	51;"	d	file:
SHA1Final	sha1.c	/^void SHA1Final(unsigned char digest[20], SHA1_CTX* context)$/;"	f
SHA1HANDSOFF	sha1.c	22;"	d	file:
SHA1Init	sha1.c	/^void SHA1Init(SHA1_CTX* context)$/;"	f
SHA1Transform	sha1.c	/^void SHA1Transform(uint32_t state[5], const unsigned char buffer[64])$/;"	f
SHA1Update	sha1.c	/^void SHA1Update(SHA1_CTX* context, const unsigned char* data, uint32_t len)$/;"	f
UNUSED	sha1.c	203;"	d	file:
blk	sha1.c	43;"	d	file:
blk0	sha1.c	36;"	d	file:
blk0	sha1.c	39;"	d	file:
rol	sha1.c	31;"	d	file:
sha1Test	sha1.c	/^int sha1Test(int argc, char **argv)$/;"	f
SHA1_CTX	sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon29
SHA1_H	sha1.h	2;"	d
buffer	sha1.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon29
count	sha1.h	/^    uint32_t count[2];$/;"	m	struct:__anon29
state	sha1.h	/^    uint32_t state[5];$/;"	m	struct:__anon29
slowlogCommand	slowlog.c	/^void slowlogCommand(client *c) {$/;"	f
slowlogCreateEntry	slowlog.c	/^slowlogEntry *slowlogCreateEntry(robj **argv, int argc, long long duration) {$/;"	f
slowlogFreeEntry	slowlog.c	/^void slowlogFreeEntry(void *septr) {$/;"	f
slowlogInit	slowlog.c	/^void slowlogInit(void) {$/;"	f
slowlogPushEntryIfNeeded	slowlog.c	/^void slowlogPushEntryIfNeeded(robj **argv, int argc, long long duration) {$/;"	f
slowlogReset	slowlog.c	/^void slowlogReset(void) {$/;"	f
SLOWLOG_ENTRY_MAX_ARGC	slowlog.h	30;"	d
SLOWLOG_ENTRY_MAX_STRING	slowlog.h	31;"	d
argc	slowlog.h	/^    int argc;$/;"	m	struct:slowlogEntry
argv	slowlog.h	/^    robj **argv;$/;"	m	struct:slowlogEntry
duration	slowlog.h	/^    long long duration; \/* Time spent by the query, in nanoseconds. *\/$/;"	m	struct:slowlogEntry
id	slowlog.h	/^    long long id;       \/* Unique entry identifier. *\/$/;"	m	struct:slowlogEntry
slowlogEntry	slowlog.h	/^typedef struct slowlogEntry {$/;"	s
slowlogEntry	slowlog.h	/^} slowlogEntry;$/;"	t	typeref:struct:slowlogEntry
time	slowlog.h	/^    time_t time;        \/* Unix time at which the query was executed. *\/$/;"	m	struct:slowlogEntry
isfinite	solarisfixes.h	40;"	d
isfinite	solarisfixes.h	41;"	d
isinf	solarisfixes.h	45;"	d
isinf	solarisfixes.h	46;"	d
isnan	solarisfixes.h	35;"	d
isnan	solarisfixes.h	36;"	d
u_int	solarisfixes.h	50;"	d
u_int32_t	solarisfixes.h	51;"	d
createSortOperation	sort.c	/^redisSortOperation *createSortOperation(int type, robj *pattern) {$/;"	f
lookupKeyByPattern	sort.c	/^robj *lookupKeyByPattern(redisDb *db, robj *pattern, robj *subst) {$/;"	f
sortCommand	sort.c	/^void sortCommand(client *c) {$/;"	f
sortCompare	sort.c	/^int sortCompare(const void *s1, const void *s2) {$/;"	f
charset	sparkline.c	/^static char charset[] = "_-`";$/;"	v	file:
charset_fill	sparkline.c	/^static char charset_fill[] = "_o#";$/;"	v	file:
charset_len	sparkline.c	/^static int charset_len = sizeof(charset)-1;$/;"	v	file:
createSparklineSequence	sparkline.c	/^struct sequence *createSparklineSequence(void) {$/;"	f
freeSparklineSequence	sparkline.c	/^void freeSparklineSequence(struct sequence *seq) {$/;"	f
label_margin_top	sparkline.c	/^static int label_margin_top = 1;$/;"	v	file:
sparklineRender	sparkline.c	/^sds sparklineRender(sds output, struct sequence *seq, int columns, int rows, int flags) {$/;"	f
sparklineRenderRange	sparkline.c	/^sds sparklineRenderRange(sds output, struct sequence *seq, int rows, int offset, int len, int flags) {$/;"	f
sparklineSequenceAddSample	sparkline.c	/^void sparklineSequenceAddSample(struct sequence *seq, double value, char *label) {$/;"	f
SPARKLINE_FILL	sparkline.h	47;"	d
SPARKLINE_LOG_SCALE	sparkline.h	48;"	d
SPARKLINE_NO_FLAGS	sparkline.h	46;"	d
__SPARKLINE_H	sparkline.h	31;"	d
label	sparkline.h	/^    char *label;$/;"	m	struct:sample
labels	sparkline.h	/^    int labels;$/;"	m	struct:sequence
length	sparkline.h	/^    int length;$/;"	m	struct:sequence
max	sparkline.h	/^    double min, max;$/;"	m	struct:sequence
min	sparkline.h	/^    double min, max;$/;"	m	struct:sequence
sample	sparkline.h	/^struct sample {$/;"	s
samples	sparkline.h	/^    struct sample *samples;$/;"	m	struct:sequence	typeref:struct:sequence::sample
sequence	sparkline.h	/^struct sequence {$/;"	s
value	sparkline.h	/^    double value;$/;"	m	struct:sample
SYNCIO__RESOLUTION	syncio.c	43;"	d	file:
syncRead	syncio.c	/^ssize_t syncRead(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
syncReadLine	syncio.c	/^ssize_t syncReadLine(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
syncWrite	syncio.c	/^ssize_t syncWrite(int fd, char *ptr, ssize_t size, long long timeout) {$/;"	f
addHashFieldToReply	t_hash.c	/^static void addHashFieldToReply(client *c, robj *o, robj *field) {$/;"	f	file:
addHashIteratorCursorToReply	t_hash.c	/^static void addHashIteratorCursorToReply(client *c, hashTypeIterator *hi, int what) {$/;"	f	file:
genericHgetallCommand	t_hash.c	/^void genericHgetallCommand(client *c, int flags) {$/;"	f
hashTypeConvert	t_hash.c	/^void hashTypeConvert(robj *o, int enc) {$/;"	f
hashTypeConvertZiplist	t_hash.c	/^void hashTypeConvertZiplist(robj *o, int enc) {$/;"	f
hashTypeCurrentFromHashTable	t_hash.c	/^void hashTypeCurrentFromHashTable(hashTypeIterator *hi, int what, robj **dst) {$/;"	f
hashTypeCurrentFromZiplist	t_hash.c	/^void hashTypeCurrentFromZiplist(hashTypeIterator *hi, int what,$/;"	f
hashTypeCurrentObject	t_hash.c	/^robj *hashTypeCurrentObject(hashTypeIterator *hi, int what) {$/;"	f
hashTypeDelete	t_hash.c	/^int hashTypeDelete(robj *o, robj *field) {$/;"	f
hashTypeExists	t_hash.c	/^int hashTypeExists(robj *o, robj *field) {$/;"	f
hashTypeGetFromHashTable	t_hash.c	/^int hashTypeGetFromHashTable(robj *o, robj *field, robj **value) {$/;"	f
hashTypeGetFromZiplist	t_hash.c	/^int hashTypeGetFromZiplist(robj *o, robj *field,$/;"	f
hashTypeGetObject	t_hash.c	/^robj *hashTypeGetObject(robj *o, robj *field) {$/;"	f
hashTypeGetValueLength	t_hash.c	/^size_t hashTypeGetValueLength(robj *o, robj *field) {$/;"	f
hashTypeInitIterator	t_hash.c	/^hashTypeIterator *hashTypeInitIterator(robj *subject) {$/;"	f
hashTypeLength	t_hash.c	/^unsigned long hashTypeLength(robj *o) {$/;"	f
hashTypeLookupWriteOrCreate	t_hash.c	/^robj *hashTypeLookupWriteOrCreate(client *c, robj *key) {$/;"	f
hashTypeNext	t_hash.c	/^int hashTypeNext(hashTypeIterator *hi) {$/;"	f
hashTypeReleaseIterator	t_hash.c	/^void hashTypeReleaseIterator(hashTypeIterator *hi) {$/;"	f
hashTypeSet	t_hash.c	/^int hashTypeSet(robj *o, robj *field, robj *value) {$/;"	f
hashTypeTryConversion	t_hash.c	/^void hashTypeTryConversion(robj *o, robj **argv, int start, int end) {$/;"	f
hashTypeTryObjectEncoding	t_hash.c	/^void hashTypeTryObjectEncoding(robj *subject, robj **o1, robj **o2) {$/;"	f
hdelCommand	t_hash.c	/^void hdelCommand(client *c) {$/;"	f
hexistsCommand	t_hash.c	/^void hexistsCommand(client *c) {$/;"	f
hgetCommand	t_hash.c	/^void hgetCommand(client *c) {$/;"	f
hgetallCommand	t_hash.c	/^void hgetallCommand(client *c) {$/;"	f
hincrbyCommand	t_hash.c	/^void hincrbyCommand(client *c) {$/;"	f
hincrbyfloatCommand	t_hash.c	/^void hincrbyfloatCommand(client *c) {$/;"	f
hkeysCommand	t_hash.c	/^void hkeysCommand(client *c) {$/;"	f
hlenCommand	t_hash.c	/^void hlenCommand(client *c) {$/;"	f
hmgetCommand	t_hash.c	/^void hmgetCommand(client *c) {$/;"	f
hmsetCommand	t_hash.c	/^void hmsetCommand(client *c) {$/;"	f
hscanCommand	t_hash.c	/^void hscanCommand(client *c) {$/;"	f
hsetCommand	t_hash.c	/^void hsetCommand(client *c) {$/;"	f
hsetnxCommand	t_hash.c	/^void hsetnxCommand(client *c) {$/;"	f
hstrlenCommand	t_hash.c	/^void hstrlenCommand(client *c) {$/;"	f
hvalsCommand	t_hash.c	/^void hvalsCommand(client *c) {$/;"	f
blockForKeys	t_list.c	/^void blockForKeys(client *c, robj **keys, int numkeys, mstime_t timeout, robj *target) {$/;"	f
blockingPopGenericCommand	t_list.c	/^void blockingPopGenericCommand(client *c, int where) {$/;"	f
blpopCommand	t_list.c	/^void blpopCommand(client *c) {$/;"	f
brpopCommand	t_list.c	/^void brpopCommand(client *c) {$/;"	f
brpoplpushCommand	t_list.c	/^void brpoplpushCommand(client *c) {$/;"	f
handleClientsBlockedOnLists	t_list.c	/^void handleClientsBlockedOnLists(void) {$/;"	f
lindexCommand	t_list.c	/^void lindexCommand(client *c) {$/;"	f
linsertCommand	t_list.c	/^void linsertCommand(client *c) {$/;"	f
listPopSaver	t_list.c	/^void *listPopSaver(unsigned char *data, unsigned int sz) {$/;"	f
listTypeConvert	t_list.c	/^void listTypeConvert(robj *subject, int enc) {$/;"	f
listTypeDelete	t_list.c	/^void listTypeDelete(listTypeIterator *iter, listTypeEntry *entry) {$/;"	f
listTypeEqual	t_list.c	/^int listTypeEqual(listTypeEntry *entry, robj *o) {$/;"	f
listTypeGet	t_list.c	/^robj *listTypeGet(listTypeEntry *entry) {$/;"	f
listTypeInitIterator	t_list.c	/^listTypeIterator *listTypeInitIterator(robj *subject, long index,$/;"	f
listTypeInsert	t_list.c	/^void listTypeInsert(listTypeEntry *entry, robj *value, int where) {$/;"	f
listTypeLength	t_list.c	/^unsigned long listTypeLength(robj *subject) {$/;"	f
listTypeNext	t_list.c	/^int listTypeNext(listTypeIterator *li, listTypeEntry *entry) {$/;"	f
listTypePop	t_list.c	/^robj *listTypePop(robj *subject, int where) {$/;"	f
listTypePush	t_list.c	/^void listTypePush(robj *subject, robj *value, int where) {$/;"	f
listTypeReleaseIterator	t_list.c	/^void listTypeReleaseIterator(listTypeIterator *li) {$/;"	f
llenCommand	t_list.c	/^void llenCommand(client *c) {$/;"	f
lpopCommand	t_list.c	/^void lpopCommand(client *c) {$/;"	f
lpushCommand	t_list.c	/^void lpushCommand(client *c) {$/;"	f
lpushxCommand	t_list.c	/^void lpushxCommand(client *c) {$/;"	f
lrangeCommand	t_list.c	/^void lrangeCommand(client *c) {$/;"	f
lremCommand	t_list.c	/^void lremCommand(client *c) {$/;"	f
lsetCommand	t_list.c	/^void lsetCommand(client *c) {$/;"	f
ltrimCommand	t_list.c	/^void ltrimCommand(client *c) {$/;"	f
popGenericCommand	t_list.c	/^void popGenericCommand(client *c, int where) {$/;"	f
pushGenericCommand	t_list.c	/^void pushGenericCommand(client *c, int where) {$/;"	f
pushxGenericCommand	t_list.c	/^void pushxGenericCommand(client *c, robj *refval, robj *val, int where) {$/;"	f
rpopCommand	t_list.c	/^void rpopCommand(client *c) {$/;"	f
rpoplpushCommand	t_list.c	/^void rpoplpushCommand(client *c) {$/;"	f
rpoplpushHandlePush	t_list.c	/^void rpoplpushHandlePush(client *c, robj *dstkey, robj *dstobj, robj *value) {$/;"	f
rpushCommand	t_list.c	/^void rpushCommand(client *c) {$/;"	f
rpushxCommand	t_list.c	/^void rpushxCommand(client *c) {$/;"	f
serveClientBlockedOnList	t_list.c	/^int serveClientBlockedOnList(client *receiver, robj *key, robj *dstkey, redisDb *db, robj *value, int where)$/;"	f
signalListAsReady	t_list.c	/^void signalListAsReady(redisDb *db, robj *key) {$/;"	f
unblockClientWaitingData	t_list.c	/^void unblockClientWaitingData(client *c) {$/;"	f
SET_OP_DIFF	t_set.c	936;"	d	file:
SET_OP_INTER	t_set.c	937;"	d	file:
SET_OP_UNION	t_set.c	935;"	d	file:
SPOP_MOVE_STRATEGY_MUL	t_set.c	409;"	d	file:
SRANDMEMBER_SUB_STRATEGY_MUL	t_set.c	620;"	d	file:
qsortCompareSetsByCardinality	t_set.c	/^int qsortCompareSetsByCardinality(const void *s1, const void *s2) {$/;"	f
qsortCompareSetsByRevCardinality	t_set.c	/^int qsortCompareSetsByRevCardinality(const void *s1, const void *s2) {$/;"	f
saddCommand	t_set.c	/^void saddCommand(client *c) {$/;"	f
scardCommand	t_set.c	/^void scardCommand(client *c) {$/;"	f
sdiffCommand	t_set.c	/^void sdiffCommand(client *c) {$/;"	f
sdiffstoreCommand	t_set.c	/^void sdiffstoreCommand(client *c) {$/;"	f
setTypeAdd	t_set.c	/^int setTypeAdd(robj *subject, robj *value) {$/;"	f
setTypeConvert	t_set.c	/^void setTypeConvert(robj *setobj, int enc) {$/;"	f
setTypeCreate	t_set.c	/^robj *setTypeCreate(robj *value) {$/;"	f
setTypeInitIterator	t_set.c	/^setTypeIterator *setTypeInitIterator(robj *subject) {$/;"	f
setTypeIsMember	t_set.c	/^int setTypeIsMember(robj *subject, robj *value) {$/;"	f
setTypeNext	t_set.c	/^int setTypeNext(setTypeIterator *si, robj **objele, int64_t *llele) {$/;"	f
setTypeNextObject	t_set.c	/^robj *setTypeNextObject(setTypeIterator *si) {$/;"	f
setTypeRandomElement	t_set.c	/^int setTypeRandomElement(robj *setobj, robj **objele, int64_t *llele) {$/;"	f
setTypeReleaseIterator	t_set.c	/^void setTypeReleaseIterator(setTypeIterator *si) {$/;"	f
setTypeRemove	t_set.c	/^int setTypeRemove(robj *setobj, robj *value) {$/;"	f
setTypeSize	t_set.c	/^unsigned long setTypeSize(robj *subject) {$/;"	f
sinterCommand	t_set.c	/^void sinterCommand(client *c) {$/;"	f
sinterGenericCommand	t_set.c	/^void sinterGenericCommand(client *c, robj **setkeys,$/;"	f
sinterstoreCommand	t_set.c	/^void sinterstoreCommand(client *c) {$/;"	f
sismemberCommand	t_set.c	/^void sismemberCommand(client *c) {$/;"	f
smoveCommand	t_set.c	/^void smoveCommand(client *c) {$/;"	f
spopCommand	t_set.c	/^void spopCommand(client *c) {$/;"	f
spopWithCountCommand	t_set.c	/^void spopWithCountCommand(client *c) {$/;"	f
srandmemberCommand	t_set.c	/^void srandmemberCommand(client *c) {$/;"	f
srandmemberWithCountCommand	t_set.c	/^void srandmemberWithCountCommand(client *c) {$/;"	f
sremCommand	t_set.c	/^void sremCommand(client *c) {$/;"	f
sscanCommand	t_set.c	/^void sscanCommand(client *c) {$/;"	f
sunionCommand	t_set.c	/^void sunionCommand(client *c) {$/;"	f
sunionDiffGenericCommand	t_set.c	/^void sunionDiffGenericCommand(client *c, robj **setkeys, int setnum,$/;"	f
sunionstoreCommand	t_set.c	/^void sunionstoreCommand(client *c) {$/;"	f
OBJ_SET_EX	t_string.c	64;"	d	file:
OBJ_SET_NO_FLAGS	t_string.c	61;"	d	file:
OBJ_SET_NX	t_string.c	62;"	d	file:
OBJ_SET_PX	t_string.c	65;"	d	file:
OBJ_SET_XX	t_string.c	63;"	d	file:
appendCommand	t_string.c	/^void appendCommand(client *c) {$/;"	f
checkStringLength	t_string.c	/^static int checkStringLength(client *c, long long size) {$/;"	f	file:
decrCommand	t_string.c	/^void decrCommand(client *c) {$/;"	f
decrbyCommand	t_string.c	/^void decrbyCommand(client *c) {$/;"	f
getCommand	t_string.c	/^void getCommand(client *c) {$/;"	f
getGenericCommand	t_string.c	/^int getGenericCommand(client *c) {$/;"	f
getrangeCommand	t_string.c	/^void getrangeCommand(client *c) {$/;"	f
getsetCommand	t_string.c	/^void getsetCommand(client *c) {$/;"	f
incrCommand	t_string.c	/^void incrCommand(client *c) {$/;"	f
incrDecrCommand	t_string.c	/^void incrDecrCommand(client *c, long long incr) {$/;"	f
incrbyCommand	t_string.c	/^void incrbyCommand(client *c) {$/;"	f
incrbyfloatCommand	t_string.c	/^void incrbyfloatCommand(client *c) {$/;"	f
mgetCommand	t_string.c	/^void mgetCommand(client *c) {$/;"	f
msetCommand	t_string.c	/^void msetCommand(client *c) {$/;"	f
msetGenericCommand	t_string.c	/^void msetGenericCommand(client *c, int nx) {$/;"	f
msetnxCommand	t_string.c	/^void msetnxCommand(client *c) {$/;"	f
psetexCommand	t_string.c	/^void psetexCommand(client *c) {$/;"	f
setCommand	t_string.c	/^void setCommand(client *c) {$/;"	f
setGenericCommand	t_string.c	/^void setGenericCommand(client *c, int flags, robj *key, robj *val, robj *expire, int unit, robj *ok_reply, robj *abort_reply) {$/;"	f
setexCommand	t_string.c	/^void setexCommand(client *c) {$/;"	f
setnxCommand	t_string.c	/^void setnxCommand(client *c) {$/;"	f
setrangeCommand	t_string.c	/^void setrangeCommand(client *c) {$/;"	f
strlenCommand	t_string.c	/^void strlenCommand(client *c) {$/;"	f
OPVAL_DIRTY_LL	t_zset.c	1629;"	d	file:
OPVAL_DIRTY_ROBJ	t_zset.c	1628;"	d	file:
OPVAL_VALID_LL	t_zset.c	1630;"	d	file:
REDIS_AGGR_MAX	t_zset.c	1917;"	d	file:
REDIS_AGGR_MIN	t_zset.c	1916;"	d	file:
REDIS_AGGR_SUM	t_zset.c	1915;"	d	file:
ZADD_CH	t_zset.c	1210;"	d	file:
ZADD_INCR	t_zset.c	1207;"	d	file:
ZADD_NONE	t_zset.c	1206;"	d	file:
ZADD_NX	t_zset.c	1208;"	d	file:
ZADD_XX	t_zset.c	1209;"	d	file:
ZRANGE_LEX	t_zset.c	1474;"	d	file:
ZRANGE_RANK	t_zset.c	1472;"	d	file:
ZRANGE_SCORE	t_zset.c	1473;"	d	file:
_buf	t_zset.c	/^    unsigned char _buf[32]; \/* Private buffer. *\/$/;"	m	struct:__anon7	file:
_iterset	t_zset.c	/^        union _iterset {$/;"	u	union:__anon1::__anon2	file:
_iterzset	t_zset.c	/^        union _iterzset {$/;"	u	union:__anon1::__anon2	file:
compareStringObjectsForLexRange	t_zset.c	/^int compareStringObjectsForLexRange(robj *a, robj *b) {$/;"	f
de	t_zset.c	/^                dictEntry *de;$/;"	m	struct:__anon1::__anon2::_iterset::__anon4	file:
di	t_zset.c	/^                dictIterator *di;$/;"	m	struct:__anon1::__anon2::_iterset::__anon4	file:
dict	t_zset.c	/^                dict *dict;$/;"	m	struct:__anon1::__anon2::_iterset::__anon4	file:
ele	t_zset.c	/^    robj *ele;$/;"	m	struct:__anon7	file:
elen	t_zset.c	/^    unsigned int elen;$/;"	m	struct:__anon7	file:
ell	t_zset.c	/^    long long ell;$/;"	m	struct:__anon7	file:
encoding	t_zset.c	/^    int encoding;$/;"	m	struct:__anon1	file:
eptr	t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon1::__anon2::_iterzset::__anon5	file:
estr	t_zset.c	/^    unsigned char *estr;$/;"	m	struct:__anon7	file:
flags	t_zset.c	/^    int flags;$/;"	m	struct:__anon7	file:
genericZrangebylexCommand	t_zset.c	/^void genericZrangebylexCommand(client *c, int reverse) {$/;"	f
genericZrangebyscoreCommand	t_zset.c	/^void genericZrangebyscoreCommand(client *c, int reverse) {$/;"	f
ht	t_zset.c	/^            } ht;$/;"	m	union:__anon1::__anon2::_iterset	typeref:struct:__anon1::__anon2::_iterset::__anon4	file:
ii	t_zset.c	/^                int ii;$/;"	m	struct:__anon1::__anon2::_iterset::__anon3	file:
is	t_zset.c	/^                intset *is;$/;"	m	struct:__anon1::__anon2::_iterset::__anon3	file:
is	t_zset.c	/^            } is;$/;"	m	union:__anon1::__anon2::_iterset	typeref:struct:__anon1::__anon2::_iterset::__anon3	file:
iter	t_zset.c	/^    } iter;$/;"	m	struct:__anon1	typeref:union:__anon1::__anon2	file:
iterset	t_zset.c	/^typedef union _iterset iterset;$/;"	t	typeref:union:_iterset	file:
iterzset	t_zset.c	/^typedef union _iterzset iterzset;$/;"	t	typeref:union:_iterzset	file:
node	t_zset.c	/^                zskiplistNode *node;$/;"	m	struct:__anon1::__anon2::_iterzset::__anon6	file:
score	t_zset.c	/^    double score;$/;"	m	struct:__anon7	file:
set	t_zset.c	/^        } set;$/;"	m	union:__anon1::__anon2	typeref:union:__anon1::__anon2::_iterset	file:
sl	t_zset.c	/^            } sl;$/;"	m	union:__anon1::__anon2::_iterzset	typeref:struct:__anon1::__anon2::_iterzset::__anon6	file:
sptr	t_zset.c	/^                unsigned char *eptr, *sptr;$/;"	m	struct:__anon1::__anon2::_iterzset::__anon5	file:
subject	t_zset.c	/^    robj *subject;$/;"	m	struct:__anon1	file:
type	t_zset.c	/^    int type; \/* Set, sorted set *\/$/;"	m	struct:__anon1	file:
weight	t_zset.c	/^    double weight;$/;"	m	struct:__anon1	file:
zaddCommand	t_zset.c	/^void zaddCommand(client *c) {$/;"	f
zaddGenericCommand	t_zset.c	/^void zaddGenericCommand(client *c, int flags) {$/;"	f
zcardCommand	t_zset.c	/^void zcardCommand(client *c) {$/;"	f
zcountCommand	t_zset.c	/^void zcountCommand(client *c) {$/;"	f
zincrbyCommand	t_zset.c	/^void zincrbyCommand(client *c) {$/;"	f
zinterstoreCommand	t_zset.c	/^void zinterstoreCommand(client *c) {$/;"	f
ziplistGetObject	t_zset.c	/^robj *ziplistGetObject(unsigned char *sptr) {$/;"	f
zl	t_zset.c	/^                unsigned char *zl;$/;"	m	struct:__anon1::__anon2::_iterzset::__anon5	file:
zl	t_zset.c	/^            } zl;$/;"	m	union:__anon1::__anon2::_iterzset	typeref:struct:__anon1::__anon2::_iterzset::__anon5	file:
zlexcountCommand	t_zset.c	/^void zlexcountCommand(client *c) {$/;"	f
zrangeCommand	t_zset.c	/^void zrangeCommand(client *c) {$/;"	f
zrangeGenericCommand	t_zset.c	/^void zrangeGenericCommand(client *c, int reverse) {$/;"	f
zrangebylexCommand	t_zset.c	/^void zrangebylexCommand(client *c) {$/;"	f
zrangebyscoreCommand	t_zset.c	/^void zrangebyscoreCommand(client *c) {$/;"	f
zrankCommand	t_zset.c	/^void zrankCommand(client *c) {$/;"	f
zrankGenericCommand	t_zset.c	/^void zrankGenericCommand(client *c, int reverse) {$/;"	f
zremCommand	t_zset.c	/^void zremCommand(client *c) {$/;"	f
zremrangeGenericCommand	t_zset.c	/^void zremrangeGenericCommand(client *c, int rangetype) {$/;"	f
zremrangebylexCommand	t_zset.c	/^void zremrangebylexCommand(client *c) {$/;"	f
zremrangebyrankCommand	t_zset.c	/^void zremrangebyrankCommand(client *c) {$/;"	f
zremrangebyscoreCommand	t_zset.c	/^void zremrangebyscoreCommand(client *c) {$/;"	f
zrevrangeCommand	t_zset.c	/^void zrevrangeCommand(client *c) {$/;"	f
zrevrangebylexCommand	t_zset.c	/^void zrevrangebylexCommand(client *c) {$/;"	f
zrevrangebyscoreCommand	t_zset.c	/^void zrevrangebyscoreCommand(client *c) {$/;"	f
zrevrankCommand	t_zset.c	/^void zrevrankCommand(client *c) {$/;"	f
zs	t_zset.c	/^                zset *zs;$/;"	m	struct:__anon1::__anon2::_iterzset::__anon6	file:
zscanCommand	t_zset.c	/^void zscanCommand(client *c) {$/;"	f
zscoreCommand	t_zset.c	/^void zscoreCommand(client *c) {$/;"	f
zset	t_zset.c	/^        } zset;$/;"	m	union:__anon1::__anon2	typeref:union:__anon1::__anon2::_iterzset	file:
zsetConvert	t_zset.c	/^void zsetConvert(robj *zobj, int encoding) {$/;"	f
zsetConvertToZiplistIfNeeded	t_zset.c	/^void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen) {$/;"	f
zsetLength	t_zset.c	/^unsigned int zsetLength(robj *zobj) {$/;"	f
zsetScore	t_zset.c	/^int zsetScore(robj *zobj, robj *member, double *score) {$/;"	f
zsetopsrc	t_zset.c	/^} zsetopsrc;$/;"	t	typeref:struct:__anon1	file:
zsetopval	t_zset.c	/^} zsetopval;$/;"	t	typeref:struct:__anon7	file:
zslCreate	t_zset.c	/^zskiplist *zslCreate(void) {$/;"	f
zslCreateNode	t_zset.c	/^zskiplistNode *zslCreateNode(int level, double score, robj *obj) {$/;"	f
zslDelete	t_zset.c	/^int zslDelete(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslDeleteNode	t_zset.c	/^void zslDeleteNode(zskiplist *zsl, zskiplistNode *x, zskiplistNode **update) {$/;"	f
zslDeleteRangeByLex	t_zset.c	/^unsigned long zslDeleteRangeByLex(zskiplist *zsl, zlexrangespec *range, dict *dict) {$/;"	f
zslDeleteRangeByRank	t_zset.c	/^unsigned long zslDeleteRangeByRank(zskiplist *zsl, unsigned int start, unsigned int end, dict *dict) {$/;"	f
zslDeleteRangeByScore	t_zset.c	/^unsigned long zslDeleteRangeByScore(zskiplist *zsl, zrangespec *range, dict *dict) {$/;"	f
zslFirstInLexRange	t_zset.c	/^zskiplistNode *zslFirstInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslFirstInRange	t_zset.c	/^zskiplistNode *zslFirstInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslFree	t_zset.c	/^void zslFree(zskiplist *zsl) {$/;"	f
zslFreeLexRange	t_zset.c	/^void zslFreeLexRange(zlexrangespec *spec) {$/;"	f
zslFreeNode	t_zset.c	/^void zslFreeNode(zskiplistNode *node) {$/;"	f
zslGetElementByRank	t_zset.c	/^zskiplistNode* zslGetElementByRank(zskiplist *zsl, unsigned long rank) {$/;"	f
zslGetRank	t_zset.c	/^unsigned long zslGetRank(zskiplist *zsl, double score, robj *o) {$/;"	f
zslInsert	t_zset.c	/^zskiplistNode *zslInsert(zskiplist *zsl, double score, robj *obj) {$/;"	f
zslIsInLexRange	t_zset.c	/^int zslIsInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslIsInRange	t_zset.c	/^int zslIsInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslLastInLexRange	t_zset.c	/^zskiplistNode *zslLastInLexRange(zskiplist *zsl, zlexrangespec *range) {$/;"	f
zslLastInRange	t_zset.c	/^zskiplistNode *zslLastInRange(zskiplist *zsl, zrangespec *range) {$/;"	f
zslLexValueGteMin	t_zset.c	/^static int zslLexValueGteMin(robj *value, zlexrangespec *spec) {$/;"	f	file:
zslLexValueLteMax	t_zset.c	/^static int zslLexValueLteMax(robj *value, zlexrangespec *spec) {$/;"	f	file:
zslParseLexRange	t_zset.c	/^static int zslParseLexRange(robj *min, robj *max, zlexrangespec *spec) {$/;"	f	file:
zslParseLexRangeItem	t_zset.c	/^int zslParseLexRangeItem(robj *item, robj **dest, int *ex) {$/;"	f
zslParseRange	t_zset.c	/^static int zslParseRange(robj *min, robj *max, zrangespec *spec) {$/;"	f	file:
zslRandomLevel	t_zset.c	/^int zslRandomLevel(void) {$/;"	f
zslValueGteMin	t_zset.c	/^static int zslValueGteMin(double value, zrangespec *spec) {$/;"	f	file:
zslValueLteMax	t_zset.c	/^int zslValueLteMax(double value, zrangespec *spec) {$/;"	f
zuiBufferFromValue	t_zset.c	/^int zuiBufferFromValue(zsetopval *val) {$/;"	f
zuiClearIterator	t_zset.c	/^void zuiClearIterator(zsetopsrc *op) {$/;"	f
zuiCompareByCardinality	t_zset.c	/^int zuiCompareByCardinality(const void *s1, const void *s2) {$/;"	f
zuiFind	t_zset.c	/^int zuiFind(zsetopsrc *op, zsetopval *val, double *score) {$/;"	f
zuiInitIterator	t_zset.c	/^void zuiInitIterator(zsetopsrc *op) {$/;"	f
zuiLength	t_zset.c	/^int zuiLength(zsetopsrc *op) {$/;"	f
zuiLongLongFromValue	t_zset.c	/^int zuiLongLongFromValue(zsetopval *val) {$/;"	f
zuiNext	t_zset.c	/^int zuiNext(zsetopsrc *op, zsetopval *val) {$/;"	f
zuiObjectFromValue	t_zset.c	/^robj *zuiObjectFromValue(zsetopval *val) {$/;"	f
zunionInterAggregate	t_zset.c	/^inline static void zunionInterAggregate(double *target, double val, int aggregate) {$/;"	f	file:
zunionInterDictValue	t_zset.c	1918;"	d	file:
zunionInterGenericCommand	t_zset.c	/^void zunionInterGenericCommand(client *c, robj *dstkey, int op) {$/;"	f
zunionstoreCommand	t_zset.c	/^void zunionstoreCommand(client *c) {$/;"	f
zzlCompareElements	t_zset.c	/^int zzlCompareElements(unsigned char *eptr, unsigned char *cstr, unsigned int clen) {$/;"	f
zzlDelete	t_zset.c	/^unsigned char *zzlDelete(unsigned char *zl, unsigned char *eptr) {$/;"	f
zzlDeleteRangeByLex	t_zset.c	/^unsigned char *zzlDeleteRangeByLex(unsigned char *zl, zlexrangespec *range, unsigned long *deleted) {$/;"	f
zzlDeleteRangeByRank	t_zset.c	/^unsigned char *zzlDeleteRangeByRank(unsigned char *zl, unsigned int start, unsigned int end, unsigned long *deleted) {$/;"	f
zzlDeleteRangeByScore	t_zset.c	/^unsigned char *zzlDeleteRangeByScore(unsigned char *zl, zrangespec *range, unsigned long *deleted) {$/;"	f
zzlFind	t_zset.c	/^unsigned char *zzlFind(unsigned char *zl, robj *ele, double *score) {$/;"	f
zzlFirstInLexRange	t_zset.c	/^unsigned char *zzlFirstInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlFirstInRange	t_zset.c	/^unsigned char *zzlFirstInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlGetScore	t_zset.c	/^double zzlGetScore(unsigned char *sptr) {$/;"	f
zzlInsert	t_zset.c	/^unsigned char *zzlInsert(unsigned char *zl, robj *ele, double score) {$/;"	f
zzlInsertAt	t_zset.c	/^unsigned char *zzlInsertAt(unsigned char *zl, unsigned char *eptr, robj *ele, double score) {$/;"	f
zzlIsInLexRange	t_zset.c	/^int zzlIsInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlIsInRange	t_zset.c	/^int zzlIsInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlLastInLexRange	t_zset.c	/^unsigned char *zzlLastInLexRange(unsigned char *zl, zlexrangespec *range) {$/;"	f
zzlLastInRange	t_zset.c	/^unsigned char *zzlLastInRange(unsigned char *zl, zrangespec *range) {$/;"	f
zzlLength	t_zset.c	/^unsigned int zzlLength(unsigned char *zl) {$/;"	f
zzlLexValueGteMin	t_zset.c	/^static int zzlLexValueGteMin(unsigned char *p, zlexrangespec *spec) {$/;"	f	file:
zzlLexValueLteMax	t_zset.c	/^static int zzlLexValueLteMax(unsigned char *p, zlexrangespec *spec) {$/;"	f	file:
zzlNext	t_zset.c	/^void zzlNext(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f
zzlPrev	t_zset.c	/^void zzlPrev(unsigned char *zl, unsigned char **eptr, unsigned char **sptr) {$/;"	f
__TESTHELP_H	testhelp.h	40;"	d
__failed_tests	testhelp.h	/^int __failed_tests = 0;$/;"	v
__test_num	testhelp.h	/^int __test_num = 0;$/;"	v
test_cond	testhelp.h	44;"	d
test_report	testhelp.h	48;"	d
UNUSED	util.c	737;"	d	file:
d2string	util.c	/^int d2string(char *buf, size_t len, double value) {$/;"	f
digits10	util.c	/^uint32_t digits10(uint64_t v) {$/;"	f
getAbsolutePath	util.c	/^sds getAbsolutePath(char *filename) {$/;"	f
getRandomHexChars	util.c	/^void getRandomHexChars(char *p, unsigned int len) {$/;"	f
ll2string	util.c	/^int ll2string(char* dst, size_t dstlen, long long svalue) {$/;"	f
memtoll	util.c	/^long long memtoll(const char *p, int *err) {$/;"	f
pathIsBaseName	util.c	/^int pathIsBaseName(char *path) {$/;"	f
sdigits10	util.c	/^uint32_t sdigits10(int64_t v) {$/;"	f
string2l	util.c	/^int string2l(const char *s, size_t slen, long *lval) {$/;"	f
string2ll	util.c	/^int string2ll(const char *s, size_t slen, long long *value) {$/;"	f
stringmatch	util.c	/^int stringmatch(const char *pattern, const char *string, int nocase) {$/;"	f
stringmatchlen	util.c	/^int stringmatchlen(const char *pattern, int patternLen,$/;"	f
test_ll2string	util.c	/^static void test_ll2string(void) {$/;"	f	file:
test_string2l	util.c	/^static void test_string2l(void) {$/;"	f	file:
test_string2ll	util.c	/^static void test_string2ll(void) {$/;"	f	file:
utilTest	util.c	/^int utilTest(int argc, char **argv) {$/;"	f
__REDIS_UTIL_H	util.h	31;"	d
REDIS_VERSION	version.h	1;"	d
INT24_MAX	ziplist.c	135;"	d	file:
INT24_MIN	ziplist.c	136;"	d	file:
ZIPLIST_BYTES	ziplist.c	142;"	d	file:
ZIPLIST_END_SIZE	ziplist.c	146;"	d	file:
ZIPLIST_ENTRY_END	ziplist.c	149;"	d	file:
ZIPLIST_ENTRY_HEAD	ziplist.c	147;"	d	file:
ZIPLIST_ENTRY_TAIL	ziplist.c	148;"	d	file:
ZIPLIST_ENTRY_ZERO	ziplist.c	166;"	d	file:
ZIPLIST_HEADER_SIZE	ziplist.c	145;"	d	file:
ZIPLIST_INCR_LENGTH	ziplist.c	153;"	d	file:
ZIPLIST_LENGTH	ziplist.c	144;"	d	file:
ZIPLIST_TAIL_OFFSET	ziplist.c	143;"	d	file:
ZIP_BIGLEN	ziplist.c	116;"	d	file:
ZIP_DECODE_LENGTH	ziplist.c	236;"	d	file:
ZIP_DECODE_PREVLEN	ziplist.c	299;"	d	file:
ZIP_DECODE_PREVLENSIZE	ziplist.c	289;"	d	file:
ZIP_END	ziplist.c	115;"	d	file:
ZIP_ENTRY_ENCODING	ziplist.c	175;"	d	file:
ZIP_INT_16B	ziplist.c	124;"	d	file:
ZIP_INT_24B	ziplist.c	127;"	d	file:
ZIP_INT_32B	ziplist.c	125;"	d	file:
ZIP_INT_64B	ziplist.c	126;"	d	file:
ZIP_INT_8B	ziplist.c	128;"	d	file:
ZIP_INT_IMM_MASK	ziplist.c	130;"	d	file:
ZIP_INT_IMM_MAX	ziplist.c	132;"	d	file:
ZIP_INT_IMM_MIN	ziplist.c	131;"	d	file:
ZIP_INT_IMM_VAL	ziplist.c	133;"	d	file:
ZIP_INT_MASK	ziplist.c	120;"	d	file:
ZIP_IS_STR	ziplist.c	139;"	d	file:
ZIP_STR_06B	ziplist.c	121;"	d	file:
ZIP_STR_14B	ziplist.c	122;"	d	file:
ZIP_STR_32B	ziplist.c	123;"	d	file:
ZIP_STR_MASK	ziplist.c	119;"	d	file:
__ziplistCascadeUpdate	ziplist.c	/^unsigned char *__ziplistCascadeUpdate(unsigned char *zl, unsigned char *p) {$/;"	f
__ziplistDelete	ziplist.c	/^unsigned char *__ziplistDelete(unsigned char *zl, unsigned char *p, unsigned int num) {$/;"	f
__ziplistInsert	ziplist.c	/^unsigned char *__ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
createIntList	ziplist.c	/^static unsigned char *createIntList() {$/;"	f	file:
createList	ziplist.c	/^static unsigned char *createList() {$/;"	f	file:
debug	ziplist.c	1091;"	d	file:
encoding	ziplist.c	/^    unsigned char encoding;$/;"	m	struct:zlentry	file:
headersize	ziplist.c	/^    unsigned int headersize;$/;"	m	struct:zlentry	file:
len	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
lensize	ziplist.c	/^    unsigned int lensize, len;$/;"	m	struct:zlentry	file:
p	ziplist.c	/^    unsigned char *p;$/;"	m	struct:zlentry	file:
pop	ziplist.c	/^static unsigned char *pop(unsigned char *zl, int where) {$/;"	f	file:
prevrawlen	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
prevrawlensize	ziplist.c	/^    unsigned int prevrawlensize, prevrawlen;$/;"	m	struct:zlentry	file:
randstring	ziplist.c	/^static int randstring(char *target, unsigned int min, unsigned int max) {$/;"	f	file:
stress	ziplist.c	/^static void stress(int pos, int num, int maxsize, int dnum) {$/;"	f	file:
usec	ziplist.c	/^static long long usec(void) {$/;"	f	file:
verify	ziplist.c	/^static void verify(unsigned char *zl, zlentry *e) {$/;"	f	file:
zipEncodeLength	ziplist.c	/^unsigned int zipEncodeLength(unsigned char *p, unsigned char encoding, unsigned int rawlen) {$/;"	f
zipEntry	ziplist.c	/^void zipEntry(unsigned char *p, zlentry *e) {$/;"	f
zipIntSize	ziplist.c	/^unsigned int zipIntSize(unsigned char encoding) {$/;"	f
zipLoadInteger	ziplist.c	/^int64_t zipLoadInteger(unsigned char *p, unsigned char encoding) {$/;"	f
zipPrevEncodeLength	ziplist.c	/^unsigned int zipPrevEncodeLength(unsigned char *p, unsigned int len) {$/;"	f
zipPrevEncodeLengthForceLarge	ziplist.c	/^void zipPrevEncodeLengthForceLarge(unsigned char *p, unsigned int len) {$/;"	f
zipPrevLenByteDiff	ziplist.c	/^int zipPrevLenByteDiff(unsigned char *p, unsigned int len) {$/;"	f
zipRawEntryLength	ziplist.c	/^unsigned int zipRawEntryLength(unsigned char *p) {$/;"	f
zipSaveInteger	ziplist.c	/^void zipSaveInteger(unsigned char *p, int64_t value, unsigned char encoding) {$/;"	f
zipTryEncoding	ziplist.c	/^int zipTryEncoding(unsigned char *entry, unsigned int entrylen, long long *v, unsigned char *encoding) {$/;"	f
ziplistBlobLen	ziplist.c	/^size_t ziplistBlobLen(unsigned char *zl) {$/;"	f
ziplistCompare	ziplist.c	/^unsigned int ziplistCompare(unsigned char *p, unsigned char *sstr, unsigned int slen) {$/;"	f
ziplistDelete	ziplist.c	/^unsigned char *ziplistDelete(unsigned char *zl, unsigned char **p) {$/;"	f
ziplistDeleteRange	ziplist.c	/^unsigned char *ziplistDeleteRange(unsigned char *zl, int index, unsigned int num) {$/;"	f
ziplistFind	ziplist.c	/^unsigned char *ziplistFind(unsigned char *p, unsigned char *vstr, unsigned int vlen, unsigned int skip) {$/;"	f
ziplistGet	ziplist.c	/^unsigned int ziplistGet(unsigned char *p, unsigned char **sstr, unsigned int *slen, long long *sval) {$/;"	f
ziplistIndex	ziplist.c	/^unsigned char *ziplistIndex(unsigned char *zl, int index) {$/;"	f
ziplistInsert	ziplist.c	/^unsigned char *ziplistInsert(unsigned char *zl, unsigned char *p, unsigned char *s, unsigned int slen) {$/;"	f
ziplistLen	ziplist.c	/^unsigned int ziplistLen(unsigned char *zl) {$/;"	f
ziplistMerge	ziplist.c	/^unsigned char *ziplistMerge(unsigned char **first, unsigned char **second) {$/;"	f
ziplistNew	ziplist.c	/^unsigned char *ziplistNew(void) {$/;"	f
ziplistNext	ziplist.c	/^unsigned char *ziplistNext(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPrev	ziplist.c	/^unsigned char *ziplistPrev(unsigned char *zl, unsigned char *p) {$/;"	f
ziplistPush	ziplist.c	/^unsigned char *ziplistPush(unsigned char *zl, unsigned char *s, unsigned int slen, int where) {$/;"	f
ziplistRepr	ziplist.c	/^void ziplistRepr(unsigned char *zl) {$/;"	f
ziplistResize	ziplist.c	/^unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {$/;"	f
ziplistTest	ziplist.c	/^int ziplistTest(int argc, char **argv) {$/;"	f
zlentry	ziplist.c	/^typedef struct zlentry {$/;"	s	file:
zlentry	ziplist.c	/^} zlentry;$/;"	t	typeref:struct:zlentry	file:
ZIPLIST_HEAD	ziplist.h	34;"	d
ZIPLIST_TAIL	ziplist.h	35;"	d
_ZIPLIST_H	ziplist.h	32;"	d
UNUSED	zipmap.c	407;"	d	file:
ZIPMAP_BIGLEN	zipmap.c	83;"	d	file:
ZIPMAP_END	zipmap.c	84;"	d	file:
ZIPMAP_LEN_BYTES	zipmap.c	93;"	d	file:
ZIPMAP_VALUE_MAX_FREE	zipmap.c	88;"	d	file:
zipmapBlobLen	zipmap.c	/^size_t zipmapBlobLen(unsigned char *zm) {$/;"	f
zipmapDecodeLength	zipmap.c	/^static unsigned int zipmapDecodeLength(unsigned char *p) {$/;"	f	file:
zipmapDel	zipmap.c	/^unsigned char *zipmapDel(unsigned char *zm, unsigned char *key, unsigned int klen, int *deleted) {$/;"	f
zipmapEncodeLength	zipmap.c	/^static unsigned int zipmapEncodeLength(unsigned char *p, unsigned int len) {$/;"	f	file:
zipmapExists	zipmap.c	/^int zipmapExists(unsigned char *zm, unsigned char *key, unsigned int klen) {$/;"	f
zipmapGet	zipmap.c	/^int zipmapGet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char **value, unsigned int *vlen) {$/;"	f
zipmapLen	zipmap.c	/^unsigned int zipmapLen(unsigned char *zm) {$/;"	f
zipmapLookupRaw	zipmap.c	/^static unsigned char *zipmapLookupRaw(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned int *totlen) {$/;"	f	file:
zipmapNew	zipmap.c	/^unsigned char *zipmapNew(void) {$/;"	f
zipmapNext	zipmap.c	/^unsigned char *zipmapNext(unsigned char *zm, unsigned char **key, unsigned int *klen, unsigned char **value, unsigned int *vlen) {$/;"	f
zipmapRawEntryLength	zipmap.c	/^static unsigned int zipmapRawEntryLength(unsigned char *p) {$/;"	f	file:
zipmapRawKeyLength	zipmap.c	/^static unsigned int zipmapRawKeyLength(unsigned char *p) {$/;"	f	file:
zipmapRawValueLength	zipmap.c	/^static unsigned int zipmapRawValueLength(unsigned char *p) {$/;"	f	file:
zipmapRepr	zipmap.c	/^static void zipmapRepr(unsigned char *p) {$/;"	f	file:
zipmapRequiredLength	zipmap.c	/^static unsigned long zipmapRequiredLength(unsigned int klen, unsigned int vlen) {$/;"	f	file:
zipmapResize	zipmap.c	/^static inline unsigned char *zipmapResize(unsigned char *zm, unsigned int len) {$/;"	f	file:
zipmapRewind	zipmap.c	/^unsigned char *zipmapRewind(unsigned char *zm) {$/;"	f
zipmapSet	zipmap.c	/^unsigned char *zipmapSet(unsigned char *zm, unsigned char *key, unsigned int klen, unsigned char *val, unsigned int vlen, int *update) {$/;"	f
zipmapTest	zipmap.c	/^int zipmapTest(int argc, char *argv[]) {$/;"	f
_ZIPMAP_H	zipmap.h	36;"	d
PREFIX_SIZE	zmalloc.c	48;"	d	file:
PREFIX_SIZE	zmalloc.c	51;"	d	file:
PREFIX_SIZE	zmalloc.c	53;"	d	file:
calloc	zmalloc.c	60;"	d	file:
calloc	zmalloc.c	65;"	d	file:
free	zmalloc.c	62;"	d	file:
free	zmalloc.c	67;"	d	file:
malloc	zmalloc.c	59;"	d	file:
malloc	zmalloc.c	64;"	d	file:
realloc	zmalloc.c	61;"	d	file:
realloc	zmalloc.c	66;"	d	file:
update_zmalloc_stat_add	zmalloc.c	71;"	d	file:
update_zmalloc_stat_add	zmalloc.c	74;"	d	file:
update_zmalloc_stat_add	zmalloc.c	77;"	d	file:
update_zmalloc_stat_alloc	zmalloc.c	91;"	d	file:
update_zmalloc_stat_free	zmalloc.c	101;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	72;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	75;"	d	file:
update_zmalloc_stat_sub	zmalloc.c	83;"	d	file:
used_memory	zmalloc.c	/^static size_t used_memory = 0;$/;"	v	file:
used_memory_mutex	zmalloc.c	/^pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
zcalloc	zmalloc.c	/^void *zcalloc(size_t size) {$/;"	f
zfree	zmalloc.c	/^void zfree(void *ptr) {$/;"	f
zlibc_free	zmalloc.c	/^void zlibc_free(void *ptr) {$/;"	f
zmalloc	zmalloc.c	/^void *zmalloc(size_t size) {$/;"	f
zmalloc_default_oom	zmalloc.c	/^static void zmalloc_default_oom(size_t size) {$/;"	f	file:
zmalloc_enable_thread_safeness	zmalloc.c	/^void zmalloc_enable_thread_safeness(void) {$/;"	f
zmalloc_get_fragmentation_ratio	zmalloc.c	/^float zmalloc_get_fragmentation_ratio(size_t rss) {$/;"	f
zmalloc_get_memory_size	zmalloc.c	/^size_t zmalloc_get_memory_size(void) {$/;"	f
zmalloc_get_private_dirty	zmalloc.c	/^size_t zmalloc_get_private_dirty(void) {$/;"	f
zmalloc_get_rss	zmalloc.c	/^size_t zmalloc_get_rss(void) {$/;"	f
zmalloc_get_smap_bytes_by_field	zmalloc.c	/^size_t zmalloc_get_smap_bytes_by_field(char *field) {$/;"	f
zmalloc_oom_handler	zmalloc.c	/^static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;$/;"	v	file:
zmalloc_set_oom_handler	zmalloc.c	/^void zmalloc_set_oom_handler(void (*oom_handler)(size_t)) {$/;"	f
zmalloc_size	zmalloc.c	/^size_t zmalloc_size(void *ptr) {$/;"	f
zmalloc_thread_safe	zmalloc.c	/^static int zmalloc_thread_safe = 0;$/;"	v	file:
zmalloc_used_memory	zmalloc.c	/^size_t zmalloc_used_memory(void) {$/;"	f
zrealloc	zmalloc.c	/^void *zrealloc(void *ptr, size_t size) {$/;"	f
zstrdup	zmalloc.c	/^char *zstrdup(const char *s) {$/;"	f
HAVE_MALLOC_SIZE	zmalloc.h	42;"	d
HAVE_MALLOC_SIZE	zmalloc.h	52;"	d
HAVE_MALLOC_SIZE	zmalloc.h	60;"	d
ZMALLOC_LIB	zmalloc.h	39;"	d
ZMALLOC_LIB	zmalloc.h	49;"	d
ZMALLOC_LIB	zmalloc.h	65;"	d
__ZMALLOC_H	zmalloc.h	32;"	d
__str	zmalloc.h	36;"	d
__xstr	zmalloc.h	35;"	d
zmalloc_size	zmalloc.h	43;"	d
zmalloc_size	zmalloc.h	53;"	d
zmalloc_size	zmalloc.h	61;"	d
